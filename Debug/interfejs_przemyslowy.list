
interfejs_przemyslowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c20  080001d0  080001d0  000101d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08006df0  08006df0  00016df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800722c  0800722c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800722c  0800722c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800722c  0800722c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800722c  0800722c  0001722c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007230  08007230  00017230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200001dc  08007410  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  08007410  00020650  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e133  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e1  00000000  00000000  0002e338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00030b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00031ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012baf  00000000  00000000  00032938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112d4  00000000  00000000  000454e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006cf03  00000000  00000000  000567bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c36be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000502c  00000000  00000000  000c3710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006dd8 	.word	0x08006dd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08006dd8 	.word	0x08006dd8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9c:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a2d      	ldr	r2, [pc, #180]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000ba2:	f043 0310 	orr.w	r3, r3, #16
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0310 	and.w	r3, r3, #16
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb4:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a27      	ldr	r2, [pc, #156]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000bba:	f043 0320 	orr.w	r3, r3, #32
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0320 	and.w	r3, r3, #32
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a21      	ldr	r2, [pc, #132]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000bea:	f043 0308 	orr.w	r3, r3, #8
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_GPIO_Init+0xd0>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0308 	and.w	r3, r3, #8
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c02:	4816      	ldr	r0, [pc, #88]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000c04:	f001 f822 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000c0e:	4814      	ldr	r0, [pc, #80]	; (8000c60 <MX_GPIO_Init+0xd8>)
 8000c10:	f001 f81c 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000c2e:	f000 fe89 	bl	8001944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000c32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_GPIO_Init+0xd8>)
 8000c4c:	f000 fe7a 	bl	8001944 <HAL_GPIO_Init>

}
 8000c50:	bf00      	nop
 8000c52:	3720      	adds	r7, #32
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40010c00 	.word	0x40010c00
 8000c60:	40011000 	.word	0x40011000

08000c64 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)//10ms
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c74:	d113      	bne.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		error_void_uart_next(1);
 8000c76:	2001      	movs	r0, #1
 8000c78:	f003 fb3a 	bl	80042f0 <error_void_uart_next>
		counter++;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c86:	801a      	strh	r2, [r3, #0]
		if(counter>999)
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c90:	d305      	bcc.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x3a>
		{
			counter=0;
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	801a      	strh	r2, [r3, #0]
			flag=1;
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200001fa 	.word	0x200001fa
 8000cac:	200001f9 	.word	0x200001f9

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b096      	sub	sp, #88	; 0x58
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb6:	f000 fc2e 	bl	8001516 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cba:	f000 f8c1 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbe:	f7ff ff63 	bl	8000b88 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cc2:	f000 fb77 	bl	80013b4 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000cc6:	f000 f94f 	bl	8000f68 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000cca:	f000 fb03 	bl	80012d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t tx_buffer[64];
  uint16_t size = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  uint8_t bufor_lsb;
  uint8_t bufor_msb;
  uint16_t raw=0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  double Temp;
  char cels=248;
 8000cda:	23f8      	movs	r3, #248	; 0xf8
 8000cdc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  HAL_TIM_Base_Start_IT(&htim2);
 8000ce0:	484d      	ldr	r0, [pc, #308]	; (8000e18 <main+0x168>)
 8000ce2:	f002 f96b 	bl	8002fbc <HAL_TIM_Base_Start_IT>

  write_next_init();
 8000ce6:	f003 fb29 	bl	800433c <write_next_init>
  read_next_init();
 8000cea:	f003 f9fb 	bl	80040e4 <read_next_init>
  zapis_spi(0x80,0b11110011);	//zapis do rejestru configuration
 8000cee:	21f3      	movs	r1, #243	; 0xf3
 8000cf0:	2080      	movs	r0, #128	; 0x80
 8000cf2:	f000 f90b 	bl	8000f0c <zapis_spi>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t t_main,t_modulo;

	  odczyt_spi(0x02,&bufor_lsb);
 8000cf6:	1cfb      	adds	r3, r7, #3
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f000 f8e0 	bl	8000ec0 <odczyt_spi>
	  odczyt_spi(0x01,&bufor_msb);
 8000d00:	1cbb      	adds	r3, r7, #2
 8000d02:	4619      	mov	r1, r3
 8000d04:	2001      	movs	r0, #1
 8000d06:	f000 f8db 	bl	8000ec0 <odczyt_spi>
	  raw = (bufor_lsb>>1) + (bufor_msb << 7);
 8000d0a:	78fb      	ldrb	r3, [r7, #3]
 8000d0c:	085b      	lsrs	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	78bb      	ldrb	r3, [r7, #2]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	01db      	lsls	r3, r3, #7
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	  if(flag==1)
 8000d20:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <main+0x16c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d13f      	bne.n	8000da8 <main+0xf8>
	  {
	  	  Temp=(((double)raw*10)/32)-2380;
 8000d28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fbb9 	bl	80004a4 <__aeabi_ui2d>
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	4b3a      	ldr	r3, [pc, #232]	; (8000e20 <main+0x170>)
 8000d38:	f7ff fc2e 	bl	8000598 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4610      	mov	r0, r2
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	4b36      	ldr	r3, [pc, #216]	; (8000e24 <main+0x174>)
 8000d4a:	f7ff fd4f 	bl	80007ec <__aeabi_ddiv>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	4610      	mov	r0, r2
 8000d54:	4619      	mov	r1, r3
 8000d56:	a32e      	add	r3, pc, #184	; (adr r3, 8000e10 <main+0x160>)
 8000d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5c:	f7ff fa64 	bl	8000228 <__aeabi_dsub>
 8000d60:	4602      	mov	r2, r0
 8000d62:	460b      	mov	r3, r1
 8000d64:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  	  t_main=((uint16_t)Temp)/10;
 8000d68:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000d6c:	f7ff feec 	bl	8000b48 <__aeabi_d2uiz>
 8000d70:	4603      	mov	r3, r0
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4a2c      	ldr	r2, [pc, #176]	; (8000e28 <main+0x178>)
 8000d76:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7a:	08db      	lsrs	r3, r3, #3
 8000d7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  	  t_modulo=((uint16_t)Temp)%10;
 8000d80:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000d84:	f7ff fee0 	bl	8000b48 <__aeabi_d2uiz>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <main+0x178>)
 8000d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d92:	08d9      	lsrs	r1, r3, #3
 8000d94:	460b      	mov	r3, r1
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	440b      	add	r3, r1
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	  	  flag=0;
 8000da2:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <main+0x16c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
//	  size = sprintf((char*)tx_buffer, "%3.1f%cC\n", Temp, cels);
//	  //HAL_UART_Transmit(&huart1, tx_buffer, size, 1000);
//	  HAL_Delay(400);


	  uint8_t max_val=3;
 8000da8:	2303      	movs	r3, #3
 8000daa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	  write_next_val("pageset.val=", pageset ,     0, max_val);
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <main+0x17c>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b299      	uxth	r1, r3
 8000db4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000db8:	2200      	movs	r2, #0
 8000dba:	481d      	ldr	r0, [pc, #116]	; (8000e30 <main+0x180>)
 8000dbc:	f003 f9ac 	bl	8004118 <write_next_val>
	  write_next_val("n0.val=", t_main,     1, max_val);
 8000dc0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000dc4:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8000dc8:	2201      	movs	r2, #1
 8000dca:	481a      	ldr	r0, [pc, #104]	; (8000e34 <main+0x184>)
 8000dcc:	f003 f9a4 	bl	8004118 <write_next_val>
	  write_next_val("n1.val=", t_modulo,     2, max_val);
 8000dd0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000dd4:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8000dd8:	2202      	movs	r2, #2
 8000dda:	4817      	ldr	r0, [pc, #92]	; (8000e38 <main+0x188>)
 8000ddc:	f003 f99c 	bl	8004118 <write_next_val>
	  write_next_val("j0.val=", Temp/10,     3, max_val);
 8000de0:	f04f 0200 	mov.w	r2, #0
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <main+0x170>)
 8000de6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000dea:	f7ff fcff 	bl	80007ec <__aeabi_ddiv>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4610      	mov	r0, r2
 8000df4:	4619      	mov	r1, r3
 8000df6:	f7ff fea7 	bl	8000b48 <__aeabi_d2uiz>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b299      	uxth	r1, r3
 8000dfe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e02:	2203      	movs	r2, #3
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <main+0x18c>)
 8000e06:	f003 f987 	bl	8004118 <write_next_val>
  {
 8000e0a:	e774      	b.n	8000cf6 <main+0x46>
 8000e0c:	f3af 8000 	nop.w
 8000e10:	00000000 	.word	0x00000000
 8000e14:	40a29800 	.word	0x40a29800
 8000e18:	20000258 	.word	0x20000258
 8000e1c:	200001f9 	.word	0x200001f9
 8000e20:	40240000 	.word	0x40240000
 8000e24:	40400000 	.word	0x40400000
 8000e28:	cccccccd 	.word	0xcccccccd
 8000e2c:	200001f8 	.word	0x200001f8
 8000e30:	08006df0 	.word	0x08006df0
 8000e34:	08006e00 	.word	0x08006e00
 8000e38:	08006e08 	.word	0x08006e08
 8000e3c:	08006e10 	.word	0x08006e10

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b090      	sub	sp, #64	; 0x40
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	2228      	movs	r2, #40	; 0x28
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 faac 	bl	80043ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e66:	2301      	movs	r3, #1
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 fefb 	bl	8001c7c <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e8c:	f000 f866 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
 8000e92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e94:	2302      	movs	r3, #2
 8000e96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 f969 	bl	8002180 <HAL_RCC_ClockConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000eb4:	f000 f852 	bl	8000f5c <Error_Handler>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3740      	adds	r7, #64	; 0x40
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <odczyt_spi>:

/* USER CODE BEGIN 4 */
void odczyt_spi(uint8_t adres, uint8_t *dane)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed2:	480c      	ldr	r0, [pc, #48]	; (8000f04 <odczyt_spi+0x44>)
 8000ed4:	f000 feba 	bl	8001c4c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &adres, 1, 100);
 8000ed8:	1df9      	adds	r1, r7, #7
 8000eda:	2364      	movs	r3, #100	; 0x64
 8000edc:	2201      	movs	r2, #1
 8000ede:	480a      	ldr	r0, [pc, #40]	; (8000f08 <odczyt_spi+0x48>)
 8000ee0:	f001 fb34 	bl	800254c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, dane, 1, 100);
 8000ee4:	2364      	movs	r3, #100	; 0x64
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	6839      	ldr	r1, [r7, #0]
 8000eea:	4807      	ldr	r0, [pc, #28]	; (8000f08 <odczyt_spi+0x48>)
 8000eec:	f001 fc6a 	bl	80027c4 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef6:	4803      	ldr	r0, [pc, #12]	; (8000f04 <odczyt_spi+0x44>)
 8000ef8:	f000 fea8 	bl	8001c4c <HAL_GPIO_WritePin>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40010c00 	.word	0x40010c00
 8000f08:	200001fc 	.word	0x200001fc

08000f0c <zapis_spi>:
void zapis_spi(uint8_t adres, uint8_t dane)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	460a      	mov	r2, r1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f22:	480c      	ldr	r0, [pc, #48]	; (8000f54 <zapis_spi+0x48>)
 8000f24:	f000 fe92 	bl	8001c4c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &adres, 1, 100);
 8000f28:	1df9      	adds	r1, r7, #7
 8000f2a:	2364      	movs	r3, #100	; 0x64
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	480a      	ldr	r0, [pc, #40]	; (8000f58 <zapis_spi+0x4c>)
 8000f30:	f001 fb0c 	bl	800254c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &dane, 1, 100);
 8000f34:	1db9      	adds	r1, r7, #6
 8000f36:	2364      	movs	r3, #100	; 0x64
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4807      	ldr	r0, [pc, #28]	; (8000f58 <zapis_spi+0x4c>)
 8000f3c:	f001 fb06 	bl	800254c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f46:	4803      	ldr	r0, [pc, #12]	; (8000f54 <zapis_spi+0x48>)
 8000f48:	f000 fe80 	bl	8001c4c <HAL_GPIO_WritePin>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40010c00 	.word	0x40010c00
 8000f58:	200001fc 	.word	0x200001fc

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>
	...

08000f68 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f6e:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <MX_SPI2_Init+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f72:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f9c:	2218      	movs	r2, #24
 8000f9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000fb4:	220a      	movs	r2, #10
 8000fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000fba:	f001 fa4b 	bl	8002454 <HAL_SPI_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000fc4:	f7ff ffca 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200001fc 	.word	0x200001fc
 8000fd0:	40003800 	.word	0x40003800

08000fd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <HAL_SPI_MspInit+0x8c>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d131      	bne.n	8001058 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_SPI_MspInit+0x90>)
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <HAL_SPI_MspInit+0x90>)
 8000ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffe:	61d3      	str	r3, [r2, #28]
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_SPI_MspInit+0x90>)
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_SPI_MspInit+0x90>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a14      	ldr	r2, [pc, #80]	; (8001064 <HAL_SPI_MspInit+0x90>)
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	6193      	str	r3, [r2, #24]
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_SPI_MspInit+0x90>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001024:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001028:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4619      	mov	r1, r3
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <HAL_SPI_MspInit+0x94>)
 800103a:	f000 fc83 	bl	8001944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800103e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001042:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4619      	mov	r1, r3
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <HAL_SPI_MspInit+0x94>)
 8001054:	f000 fc76 	bl	8001944 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001058:	bf00      	nop
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40003800 	.word	0x40003800
 8001064:	40021000 	.word	0x40021000
 8001068:	40010c00 	.word	0x40010c00

0800106c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_MspInit+0x5c>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <HAL_MspInit+0x5c>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6193      	str	r3, [r2, #24]
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_MspInit+0x5c>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_MspInit+0x5c>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_MspInit+0x5c>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	61d3      	str	r3, [r2, #28]
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_MspInit+0x5c>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_MspInit+0x60>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	4a04      	ldr	r2, [pc, #16]	; (80010cc <HAL_MspInit+0x60>)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010000 	.word	0x40010000

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <NMI_Handler+0x4>

080010d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <HardFault_Handler+0x4>

080010dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <MemManage_Handler+0x4>

080010e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <UsageFault_Handler+0x4>

080010ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr

080010fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr

08001106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001116:	f000 fa3b 	bl	8001590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <TIM2_IRQHandler+0x10>)
 8001126:	f001 ffa3 	bl	8003070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000258 	.word	0x20000258

08001134 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <USART1_IRQHandler+0x10>)
 800113a:	f002 fb95 	bl	8003868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200002a0 	.word	0x200002a0

08001148 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	return 1;
 800114c:	2301      	movs	r3, #1
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <_kill>:

int _kill(int pid, int sig)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001160:	f003 f8fa 	bl	8004358 <__errno>
 8001164:	4603      	mov	r3, r0
 8001166:	2216      	movs	r2, #22
 8001168:	601a      	str	r2, [r3, #0]
	return -1;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <_exit>:

void _exit (int status)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800117e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffe7 	bl	8001156 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001188:	e7fe      	b.n	8001188 <_exit+0x12>

0800118a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	e00a      	b.n	80011b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800119c:	f3af 8000 	nop.w
 80011a0:	4601      	mov	r1, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	60ba      	str	r2, [r7, #8]
 80011a8:	b2ca      	uxtb	r2, r1
 80011aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dbf0      	blt.n	800119c <_read+0x12>
	}

return len;
 80011ba:	687b      	ldr	r3, [r7, #4]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	e009      	b.n	80011ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	60ba      	str	r2, [r7, #8]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3301      	adds	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dbf1      	blt.n	80011d6 <_write+0x12>
	}
	return len;
 80011f2:	687b      	ldr	r3, [r7, #4]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_close>:

int _close(int file)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	return -1;
 8001204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr

08001212 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001222:	605a      	str	r2, [r3, #4]
	return 0;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <_isatty>:

int _isatty(int file)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	return 1;
 8001238:	2301      	movs	r3, #1
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
	return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001264:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <_sbrk+0x5c>)
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <_sbrk+0x60>)
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <_sbrk+0x64>)
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <_sbrk+0x68>)
 800127c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	429a      	cmp	r2, r3
 800128a:	d207      	bcs.n	800129c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800128c:	f003 f864 	bl	8004358 <__errno>
 8001290:	4603      	mov	r3, r0
 8001292:	220c      	movs	r2, #12
 8001294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800129a:	e009      	b.n	80012b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <_sbrk+0x64>)
 80012ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20002000 	.word	0x20002000
 80012bc:	00000400 	.word	0x00000400
 80012c0:	20000254 	.word	0x20000254
 80012c4:	20000650 	.word	0x20000650

080012c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_TIM2_Init+0x94>)
 80012f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_TIM2_Init+0x94>)
 80012fa:	22ef      	movs	r2, #239	; 0xef
 80012fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_TIM2_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_TIM2_Init+0x94>)
 8001306:	2263      	movs	r2, #99	; 0x63
 8001308:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MX_TIM2_Init+0x94>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_TIM2_Init+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001316:	4814      	ldr	r0, [pc, #80]	; (8001368 <MX_TIM2_Init+0x94>)
 8001318:	f001 fe00 	bl	8002f1c <HAL_TIM_Base_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001322:	f7ff fe1b 	bl	8000f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	4619      	mov	r1, r3
 8001332:	480d      	ldr	r0, [pc, #52]	; (8001368 <MX_TIM2_Init+0x94>)
 8001334:	f001 ffa4 	bl	8003280 <HAL_TIM_ConfigClockSource>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800133e:	f7ff fe0d 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800134a:	463b      	mov	r3, r7
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <MX_TIM2_Init+0x94>)
 8001350:	f002 f994 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800135a:	f7ff fdff 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000258 	.word	0x20000258

0800136c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800137c:	d113      	bne.n	80013a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <HAL_TIM_Base_MspInit+0x44>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <HAL_TIM_Base_MspInit+0x44>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_TIM_Base_MspInit+0x44>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	201c      	movs	r0, #28
 800139c:	f000 f9eb 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013a0:	201c      	movs	r0, #28
 80013a2:	f000 fa04 	bl	80017ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000

080013b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <MX_USART1_UART_Init+0x50>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_USART1_UART_Init+0x4c>)
 80013ec:	f002 f9be 	bl	800376c <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013f6:	f7ff fdb1 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002a0 	.word	0x200002a0
 8001404:	40013800 	.word	0x40013800

08001408 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a26      	ldr	r2, [pc, #152]	; (80014bc <HAL_UART_MspInit+0xb4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d145      	bne.n	80014b4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <HAL_UART_MspInit+0xb8>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a24      	ldr	r2, [pc, #144]	; (80014c0 <HAL_UART_MspInit+0xb8>)
 800142e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <HAL_UART_MspInit+0xb8>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <HAL_UART_MspInit+0xb8>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <HAL_UART_MspInit+0xb8>)
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <HAL_UART_MspInit+0xb8>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001458:	2340      	movs	r3, #64	; 0x40
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4816      	ldr	r0, [pc, #88]	; (80014c4 <HAL_UART_MspInit+0xbc>)
 800146c:	f000 fa6a 	bl	8001944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4810      	ldr	r0, [pc, #64]	; (80014c4 <HAL_UART_MspInit+0xbc>)
 8001484:	f000 fa5e 	bl	8001944 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_UART_MspInit+0xc0>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_UART_MspInit+0xc0>)
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	2025      	movs	r0, #37	; 0x25
 80014aa:	f000 f964 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014ae:	2025      	movs	r0, #37	; 0x25
 80014b0:	f000 f97d 	bl	80017ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014b4:	bf00      	nop
 80014b6:	3728      	adds	r7, #40	; 0x28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40013800 	.word	0x40013800
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010c00 	.word	0x40010c00
 80014c8:	40010000 	.word	0x40010000

080014cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ce:	490d      	ldr	r1, [pc, #52]	; (8001504 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014e4:	4c0a      	ldr	r4, [pc, #40]	; (8001510 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014f2:	f7ff fee9 	bl	80012c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f6:	f002 ff35 	bl	8004364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014fa:	f7ff fbd9 	bl	8000cb0 <main>
  bx lr
 80014fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001508:	08007234 	.word	0x08007234
  ldr r2, =_sbss
 800150c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001510:	20000650 	.word	0x20000650

08001514 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC1_IRQHandler>

08001516 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151a:	2003      	movs	r0, #3
 800151c:	f000 f920 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001520:	2000      	movs	r0, #0
 8001522:	f000 f805 	bl	8001530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001526:	f7ff fda1 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_InitTick+0x54>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_InitTick+0x58>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001546:	fbb3 f3f1 	udiv	r3, r3, r1
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f93b 	bl	80017ca <HAL_SYSTICK_Config>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e00e      	b.n	800157c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b0f      	cmp	r3, #15
 8001562:	d80a      	bhi.n	800157a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001564:	2200      	movs	r2, #0
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800156c:	f000 f903 	bl	8001776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <HAL_InitTick+0x5c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000000 	.word	0x20000000
 8001588:	20000008 	.word	0x20000008
 800158c:	20000004 	.word	0x20000004

08001590 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_IncTick+0x1c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_IncTick+0x20>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	4a03      	ldr	r2, [pc, #12]	; (80015b0 <HAL_IncTick+0x20>)
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	20000008 	.word	0x20000008
 80015b0:	200002e4 	.word	0x200002e4

080015b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;
 80015b8:	4b02      	ldr	r3, [pc, #8]	; (80015c4 <HAL_GetTick+0x10>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	200002e4 	.word	0x200002e4

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4906      	ldr	r1, [pc, #24]	; (8001660 <__NVIC_EnableIRQ+0x34>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	2001      	movs	r0, #1
 800164e:	fa00 f202 	lsl.w	r2, r0, r2
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	e000e100 	.word	0xe000e100

08001664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	db0a      	blt.n	800168e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	490c      	ldr	r1, [pc, #48]	; (80016b0 <__NVIC_SetPriority+0x4c>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	0112      	lsls	r2, r2, #4
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	440b      	add	r3, r1
 8001688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800168c:	e00a      	b.n	80016a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <__NVIC_SetPriority+0x50>)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	3b04      	subs	r3, #4
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	440b      	add	r3, r1
 80016a2:	761a      	strb	r2, [r3, #24]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000e100 	.word	0xe000e100
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f1c3 0307 	rsb	r3, r3, #7
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	bf28      	it	cs
 80016d6:	2304      	movcs	r3, #4
 80016d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3304      	adds	r3, #4
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d902      	bls.n	80016e8 <NVIC_EncodePriority+0x30>
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3b03      	subs	r3, #3
 80016e6:	e000      	b.n	80016ea <NVIC_EncodePriority+0x32>
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001700:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	43d9      	mvns	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	4313      	orrs	r3, r2
         );
}
 8001712:	4618      	mov	r0, r3
 8001714:	3724      	adds	r7, #36	; 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800172c:	d301      	bcc.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e00f      	b.n	8001752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <SysTick_Config+0x40>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	210f      	movs	r1, #15
 800173c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001740:	f7ff ff90 	bl	8001664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <SysTick_Config+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <SysTick_Config+0x40>)
 800174c:	2207      	movs	r2, #7
 800174e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010

08001760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff2d 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001788:	f7ff ff42 	bl	8001610 <__NVIC_GetPriorityGrouping>
 800178c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff ff90 	bl	80016b8 <NVIC_EncodePriority>
 8001798:	4602      	mov	r2, r0
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff5f 	bl	8001664 <__NVIC_SetPriority>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff35 	bl	800162c <__NVIC_EnableIRQ>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffa2 	bl	800171c <SysTick_Config>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b085      	sub	sp, #20
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d008      	beq.n	800180a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2204      	movs	r2, #4
 80017fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e020      	b.n	800184c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 020e 	bic.w	r2, r2, #14
 8001818:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0201 	bic.w	r2, r2, #1
 8001828:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f202 	lsl.w	r2, r1, r2
 8001838:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800184a:	7bfb      	ldrb	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
	...

08001858 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800186a:	2b02      	cmp	r3, #2
 800186c:	d005      	beq.n	800187a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2204      	movs	r2, #4
 8001872:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e051      	b.n	800191e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 020e 	bic.w	r2, r2, #14
 8001888:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a22      	ldr	r2, [pc, #136]	; (8001928 <HAL_DMA_Abort_IT+0xd0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d029      	beq.n	80018f8 <HAL_DMA_Abort_IT+0xa0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a20      	ldr	r2, [pc, #128]	; (800192c <HAL_DMA_Abort_IT+0xd4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d022      	beq.n	80018f4 <HAL_DMA_Abort_IT+0x9c>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a1f      	ldr	r2, [pc, #124]	; (8001930 <HAL_DMA_Abort_IT+0xd8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d01a      	beq.n	80018ee <HAL_DMA_Abort_IT+0x96>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_DMA_Abort_IT+0xdc>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d012      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x90>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <HAL_DMA_Abort_IT+0xe0>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d00a      	beq.n	80018e2 <HAL_DMA_Abort_IT+0x8a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a1a      	ldr	r2, [pc, #104]	; (800193c <HAL_DMA_Abort_IT+0xe4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d102      	bne.n	80018dc <HAL_DMA_Abort_IT+0x84>
 80018d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018da:	e00e      	b.n	80018fa <HAL_DMA_Abort_IT+0xa2>
 80018dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018e0:	e00b      	b.n	80018fa <HAL_DMA_Abort_IT+0xa2>
 80018e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e6:	e008      	b.n	80018fa <HAL_DMA_Abort_IT+0xa2>
 80018e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ec:	e005      	b.n	80018fa <HAL_DMA_Abort_IT+0xa2>
 80018ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f2:	e002      	b.n	80018fa <HAL_DMA_Abort_IT+0xa2>
 80018f4:	2310      	movs	r3, #16
 80018f6:	e000      	b.n	80018fa <HAL_DMA_Abort_IT+0xa2>
 80018f8:	2301      	movs	r3, #1
 80018fa:	4a11      	ldr	r2, [pc, #68]	; (8001940 <HAL_DMA_Abort_IT+0xe8>)
 80018fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	4798      	blx	r3
    } 
  }
  return status;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40020008 	.word	0x40020008
 800192c:	4002001c 	.word	0x4002001c
 8001930:	40020030 	.word	0x40020030
 8001934:	40020044 	.word	0x40020044
 8001938:	40020058 	.word	0x40020058
 800193c:	4002006c 	.word	0x4002006c
 8001940:	40020000 	.word	0x40020000

08001944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001944:	b480      	push	{r7}
 8001946:	b08b      	sub	sp, #44	; 0x2c
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001956:	e169      	b.n	8001c2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001958:	2201      	movs	r2, #1
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	429a      	cmp	r2, r3
 8001972:	f040 8158 	bne.w	8001c26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4a9a      	ldr	r2, [pc, #616]	; (8001be4 <HAL_GPIO_Init+0x2a0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d05e      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
 8001980:	4a98      	ldr	r2, [pc, #608]	; (8001be4 <HAL_GPIO_Init+0x2a0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d875      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 8001986:	4a98      	ldr	r2, [pc, #608]	; (8001be8 <HAL_GPIO_Init+0x2a4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d058      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
 800198c:	4a96      	ldr	r2, [pc, #600]	; (8001be8 <HAL_GPIO_Init+0x2a4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d86f      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 8001992:	4a96      	ldr	r2, [pc, #600]	; (8001bec <HAL_GPIO_Init+0x2a8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d052      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
 8001998:	4a94      	ldr	r2, [pc, #592]	; (8001bec <HAL_GPIO_Init+0x2a8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d869      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 800199e:	4a94      	ldr	r2, [pc, #592]	; (8001bf0 <HAL_GPIO_Init+0x2ac>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d04c      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
 80019a4:	4a92      	ldr	r2, [pc, #584]	; (8001bf0 <HAL_GPIO_Init+0x2ac>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d863      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 80019aa:	4a92      	ldr	r2, [pc, #584]	; (8001bf4 <HAL_GPIO_Init+0x2b0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d046      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
 80019b0:	4a90      	ldr	r2, [pc, #576]	; (8001bf4 <HAL_GPIO_Init+0x2b0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d85d      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 80019b6:	2b12      	cmp	r3, #18
 80019b8:	d82a      	bhi.n	8001a10 <HAL_GPIO_Init+0xcc>
 80019ba:	2b12      	cmp	r3, #18
 80019bc:	d859      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 80019be:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <HAL_GPIO_Init+0x80>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	08001a3f 	.word	0x08001a3f
 80019c8:	08001a19 	.word	0x08001a19
 80019cc:	08001a2b 	.word	0x08001a2b
 80019d0:	08001a6d 	.word	0x08001a6d
 80019d4:	08001a73 	.word	0x08001a73
 80019d8:	08001a73 	.word	0x08001a73
 80019dc:	08001a73 	.word	0x08001a73
 80019e0:	08001a73 	.word	0x08001a73
 80019e4:	08001a73 	.word	0x08001a73
 80019e8:	08001a73 	.word	0x08001a73
 80019ec:	08001a73 	.word	0x08001a73
 80019f0:	08001a73 	.word	0x08001a73
 80019f4:	08001a73 	.word	0x08001a73
 80019f8:	08001a73 	.word	0x08001a73
 80019fc:	08001a73 	.word	0x08001a73
 8001a00:	08001a73 	.word	0x08001a73
 8001a04:	08001a73 	.word	0x08001a73
 8001a08:	08001a21 	.word	0x08001a21
 8001a0c:	08001a35 	.word	0x08001a35
 8001a10:	4a79      	ldr	r2, [pc, #484]	; (8001bf8 <HAL_GPIO_Init+0x2b4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a16:	e02c      	b.n	8001a72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	623b      	str	r3, [r7, #32]
          break;
 8001a1e:	e029      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	3304      	adds	r3, #4
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e024      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	3308      	adds	r3, #8
 8001a30:	623b      	str	r3, [r7, #32]
          break;
 8001a32:	e01f      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	330c      	adds	r3, #12
 8001a3a:	623b      	str	r3, [r7, #32]
          break;
 8001a3c:	e01a      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a46:	2304      	movs	r3, #4
 8001a48:	623b      	str	r3, [r7, #32]
          break;
 8001a4a:	e013      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d105      	bne.n	8001a60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a54:	2308      	movs	r3, #8
 8001a56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	611a      	str	r2, [r3, #16]
          break;
 8001a5e:	e009      	b.n	8001a74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a60:	2308      	movs	r3, #8
 8001a62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	615a      	str	r2, [r3, #20]
          break;
 8001a6a:	e003      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
          break;
 8001a70:	e000      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          break;
 8001a72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2bff      	cmp	r3, #255	; 0xff
 8001a78:	d801      	bhi.n	8001a7e <HAL_GPIO_Init+0x13a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	e001      	b.n	8001a82 <HAL_GPIO_Init+0x13e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3304      	adds	r3, #4
 8001a82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2bff      	cmp	r3, #255	; 0xff
 8001a88:	d802      	bhi.n	8001a90 <HAL_GPIO_Init+0x14c>
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	e002      	b.n	8001a96 <HAL_GPIO_Init+0x152>
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	3b08      	subs	r3, #8
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	210f      	movs	r1, #15
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	6a39      	ldr	r1, [r7, #32]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80b1 	beq.w	8001c26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac4:	4b4d      	ldr	r3, [pc, #308]	; (8001bfc <HAL_GPIO_Init+0x2b8>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a4c      	ldr	r2, [pc, #304]	; (8001bfc <HAL_GPIO_Init+0x2b8>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b4a      	ldr	r3, [pc, #296]	; (8001bfc <HAL_GPIO_Init+0x2b8>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001adc:	4a48      	ldr	r2, [pc, #288]	; (8001c00 <HAL_GPIO_Init+0x2bc>)
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a40      	ldr	r2, [pc, #256]	; (8001c04 <HAL_GPIO_Init+0x2c0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d013      	beq.n	8001b30 <HAL_GPIO_Init+0x1ec>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a3f      	ldr	r2, [pc, #252]	; (8001c08 <HAL_GPIO_Init+0x2c4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00d      	beq.n	8001b2c <HAL_GPIO_Init+0x1e8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a3e      	ldr	r2, [pc, #248]	; (8001c0c <HAL_GPIO_Init+0x2c8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d007      	beq.n	8001b28 <HAL_GPIO_Init+0x1e4>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a3d      	ldr	r2, [pc, #244]	; (8001c10 <HAL_GPIO_Init+0x2cc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_GPIO_Init+0x1e0>
 8001b20:	2303      	movs	r3, #3
 8001b22:	e006      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b24:	2304      	movs	r3, #4
 8001b26:	e004      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e002      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b30:	2300      	movs	r3, #0
 8001b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b34:	f002 0203 	and.w	r2, r2, #3
 8001b38:	0092      	lsls	r2, r2, #2
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b42:	492f      	ldr	r1, [pc, #188]	; (8001c00 <HAL_GPIO_Init+0x2bc>)
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d006      	beq.n	8001b6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	492c      	ldr	r1, [pc, #176]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
 8001b68:	e006      	b.n	8001b78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	4928      	ldr	r1, [pc, #160]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b84:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	4922      	ldr	r1, [pc, #136]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
 8001b90:	e006      	b.n	8001ba0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	491e      	ldr	r1, [pc, #120]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	4918      	ldr	r1, [pc, #96]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	4914      	ldr	r1, [pc, #80]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d021      	beq.n	8001c18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	490e      	ldr	r1, [pc, #56]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	60cb      	str	r3, [r1, #12]
 8001be0:	e021      	b.n	8001c26 <HAL_GPIO_Init+0x2e2>
 8001be2:	bf00      	nop
 8001be4:	10320000 	.word	0x10320000
 8001be8:	10310000 	.word	0x10310000
 8001bec:	10220000 	.word	0x10220000
 8001bf0:	10210000 	.word	0x10210000
 8001bf4:	10120000 	.word	0x10120000
 8001bf8:	10110000 	.word	0x10110000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010000 	.word	0x40010000
 8001c04:	40010800 	.word	0x40010800
 8001c08:	40010c00 	.word	0x40010c00
 8001c0c:	40011000 	.word	0x40011000
 8001c10:	40011400 	.word	0x40011400
 8001c14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_GPIO_Init+0x304>)
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	4909      	ldr	r1, [pc, #36]	; (8001c48 <HAL_GPIO_Init+0x304>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	3301      	adds	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	fa22 f303 	lsr.w	r3, r2, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f47f ae8e 	bne.w	8001958 <HAL_GPIO_Init+0x14>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	372c      	adds	r7, #44	; 0x2c
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	40010400 	.word	0x40010400

08001c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c5c:	787b      	ldrb	r3, [r7, #1]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c68:	e003      	b.n	8001c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c6a:	887b      	ldrh	r3, [r7, #2]
 8001c6c:	041a      	lsls	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	611a      	str	r2, [r3, #16]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e272      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8087 	beq.w	8001daa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c9c:	4b92      	ldr	r3, [pc, #584]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d00c      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca8:	4b8f      	ldr	r3, [pc, #572]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d112      	bne.n	8001cda <HAL_RCC_OscConfig+0x5e>
 8001cb4:	4b8c      	ldr	r3, [pc, #560]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc0:	d10b      	bne.n	8001cda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc2:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d06c      	beq.n	8001da8 <HAL_RCC_OscConfig+0x12c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d168      	bne.n	8001da8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e24c      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x76>
 8001ce4:	4b80      	ldr	r3, [pc, #512]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a7f      	ldr	r2, [pc, #508]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	e02e      	b.n	8001d50 <HAL_RCC_OscConfig+0xd4>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x98>
 8001cfa:	4b7b      	ldr	r3, [pc, #492]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a7a      	ldr	r2, [pc, #488]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b78      	ldr	r3, [pc, #480]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a77      	ldr	r2, [pc, #476]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e01d      	b.n	8001d50 <HAL_RCC_OscConfig+0xd4>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0xbc>
 8001d1e:	4b72      	ldr	r3, [pc, #456]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a71      	ldr	r2, [pc, #452]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b6f      	ldr	r3, [pc, #444]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a6e      	ldr	r2, [pc, #440]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e00b      	b.n	8001d50 <HAL_RCC_OscConfig+0xd4>
 8001d38:	4b6b      	ldr	r3, [pc, #428]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a6a      	ldr	r2, [pc, #424]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b68      	ldr	r3, [pc, #416]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a67      	ldr	r2, [pc, #412]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff fc2c 	bl	80015b4 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d60:	f7ff fc28 	bl	80015b4 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e200      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	4b5d      	ldr	r3, [pc, #372]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0xe4>
 8001d7e:	e014      	b.n	8001daa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff fc18 	bl	80015b4 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff fc14 	bl	80015b4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e1ec      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9a:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x10c>
 8001da6:	e000      	b.n	8001daa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d063      	beq.n	8001e7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001db6:	4b4c      	ldr	r3, [pc, #304]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00b      	beq.n	8001dda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dc2:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d11c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x18c>
 8001dce:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d116      	bne.n	8001e08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_RCC_OscConfig+0x176>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e1c0      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4939      	ldr	r1, [pc, #228]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	e03a      	b.n	8001e7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d020      	beq.n	8001e52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e10:	4b36      	ldr	r3, [pc, #216]	; (8001eec <HAL_RCC_OscConfig+0x270>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff fbcd 	bl	80015b4 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fbc9 	bl	80015b4 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e1a1      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e30:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4927      	ldr	r1, [pc, #156]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]
 8001e50:	e015      	b.n	8001e7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_RCC_OscConfig+0x270>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fbac 	bl	80015b4 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e60:	f7ff fba8 	bl	80015b4 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e180      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d03a      	beq.n	8001f00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d019      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_RCC_OscConfig+0x274>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e98:	f7ff fb8c 	bl	80015b4 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff fb88 	bl	80015b4 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e160      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f000 faaa 	bl	8002418 <RCC_Delay>
 8001ec4:	e01c      	b.n	8001f00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ecc:	f7ff fb72 	bl	80015b4 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed2:	e00f      	b.n	8001ef4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7ff fb6e 	bl	80015b4 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d908      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e146      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	42420000 	.word	0x42420000
 8001ef0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef4:	4b92      	ldr	r3, [pc, #584]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1e9      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80a6 	beq.w	800205a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f12:	4b8b      	ldr	r3, [pc, #556]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10d      	bne.n	8001f3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b88      	ldr	r3, [pc, #544]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	4a87      	ldr	r2, [pc, #540]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	61d3      	str	r3, [r2, #28]
 8001f2a:	4b85      	ldr	r3, [pc, #532]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f36:	2301      	movs	r3, #1
 8001f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3a:	4b82      	ldr	r3, [pc, #520]	; (8002144 <HAL_RCC_OscConfig+0x4c8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d118      	bne.n	8001f78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f46:	4b7f      	ldr	r3, [pc, #508]	; (8002144 <HAL_RCC_OscConfig+0x4c8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a7e      	ldr	r2, [pc, #504]	; (8002144 <HAL_RCC_OscConfig+0x4c8>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f52:	f7ff fb2f 	bl	80015b4 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5a:	f7ff fb2b 	bl	80015b4 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b64      	cmp	r3, #100	; 0x64
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e103      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	4b75      	ldr	r3, [pc, #468]	; (8002144 <HAL_RCC_OscConfig+0x4c8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x312>
 8001f80:	4b6f      	ldr	r3, [pc, #444]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a6e      	ldr	r2, [pc, #440]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6213      	str	r3, [r2, #32]
 8001f8c:	e02d      	b.n	8001fea <HAL_RCC_OscConfig+0x36e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x334>
 8001f96:	4b6a      	ldr	r3, [pc, #424]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a69      	ldr	r2, [pc, #420]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6213      	str	r3, [r2, #32]
 8001fa2:	4b67      	ldr	r3, [pc, #412]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4a66      	ldr	r2, [pc, #408]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	f023 0304 	bic.w	r3, r3, #4
 8001fac:	6213      	str	r3, [r2, #32]
 8001fae:	e01c      	b.n	8001fea <HAL_RCC_OscConfig+0x36e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d10c      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x356>
 8001fb8:	4b61      	ldr	r3, [pc, #388]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4a60      	ldr	r2, [pc, #384]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6213      	str	r3, [r2, #32]
 8001fc4:	4b5e      	ldr	r3, [pc, #376]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a5d      	ldr	r2, [pc, #372]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6213      	str	r3, [r2, #32]
 8001fd0:	e00b      	b.n	8001fea <HAL_RCC_OscConfig+0x36e>
 8001fd2:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	4a5a      	ldr	r2, [pc, #360]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	6213      	str	r3, [r2, #32]
 8001fde:	4b58      	ldr	r3, [pc, #352]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4a57      	ldr	r2, [pc, #348]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	f023 0304 	bic.w	r3, r3, #4
 8001fe8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d015      	beq.n	800201e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fadf 	bl	80015b4 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffa:	f7ff fadb 	bl	80015b4 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f241 3288 	movw	r2, #5000	; 0x1388
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e0b1      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002010:	4b4b      	ldr	r3, [pc, #300]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ee      	beq.n	8001ffa <HAL_RCC_OscConfig+0x37e>
 800201c:	e014      	b.n	8002048 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7ff fac9 	bl	80015b4 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7ff fac5 	bl	80015b4 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e09b      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203c:	4b40      	ldr	r3, [pc, #256]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1ee      	bne.n	8002026 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d105      	bne.n	800205a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204e:	4b3c      	ldr	r3, [pc, #240]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4a3b      	ldr	r2, [pc, #236]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002058:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8087 	beq.w	8002172 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002064:	4b36      	ldr	r3, [pc, #216]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b08      	cmp	r3, #8
 800206e:	d061      	beq.n	8002134 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d146      	bne.n	8002106 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002078:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_RCC_OscConfig+0x4cc>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7ff fa99 	bl	80015b4 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002086:	f7ff fa95 	bl	80015b4 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e06d      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002098:	4b29      	ldr	r3, [pc, #164]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ac:	d108      	bne.n	80020c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ae:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	f023 020f 	bic.w	r2, r3, #15
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	4921      	ldr	r1, [pc, #132]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c0:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a19      	ldr	r1, [r3, #32]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	430b      	orrs	r3, r1
 80020d2:	491b      	ldr	r1, [pc, #108]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_RCC_OscConfig+0x4cc>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7ff fa69 	bl	80015b4 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e6:	f7ff fa65 	bl	80015b4 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e03d      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x46a>
 8002104:	e035      	b.n	8002172 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_RCC_OscConfig+0x4cc>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff fa52 	bl	80015b4 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002114:	f7ff fa4e 	bl	80015b4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e026      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x498>
 8002132:	e01e      	b.n	8002172 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d107      	bne.n	800214c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e019      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
 8002140:	40021000 	.word	0x40021000
 8002144:	40007000 	.word	0x40007000
 8002148:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCC_OscConfig+0x500>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	429a      	cmp	r2, r3
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000

08002180 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0a0      	b.n	80022d6 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d020      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ac:	4b4c      	ldr	r3, [pc, #304]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a4b      	ldr	r2, [pc, #300]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 80021b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c4:	4b46      	ldr	r3, [pc, #280]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4a45      	ldr	r2, [pc, #276]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 80021ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d0:	4b43      	ldr	r3, [pc, #268]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4940      	ldr	r1, [pc, #256]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d040      	beq.n	8002270 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	4b3a      	ldr	r3, [pc, #232]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d115      	bne.n	800222e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e067      	b.n	80022d6 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220e:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e05b      	b.n	80022d6 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221e:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e053      	b.n	80022d6 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222e:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f023 0203 	bic.w	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4929      	ldr	r1, [pc, #164]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002240:	f7ff f9b8 	bl	80015b4 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	e00a      	b.n	800225e <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002248:	f7ff f9b4 	bl	80015b4 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	; 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e03b      	b.n	80022d6 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 020c 	and.w	r2, r3, #12
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	429a      	cmp	r2, r3
 800226e:	d1eb      	bne.n	8002248 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800227c:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4915      	ldr	r1, [pc, #84]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	490d      	ldr	r1, [pc, #52]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ae:	f000 f81f 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 80022b2:	4602      	mov	r2, r0
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_RCC_ClockConfig+0x160>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	4909      	ldr	r1, [pc, #36]	; (80022e4 <HAL_RCC_ClockConfig+0x164>)
 80022c0:	5ccb      	ldrb	r3, [r1, r3]
 80022c2:	fa22 f303 	lsr.w	r3, r2, r3
 80022c6:	4a08      	ldr	r2, [pc, #32]	; (80022e8 <HAL_RCC_ClockConfig+0x168>)
 80022c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <HAL_RCC_ClockConfig+0x16c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f92e 	bl	8001530 <HAL_InitTick>

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	08006e38 	.word	0x08006e38
 80022e8:	20000000 	.word	0x20000000
 80022ec:	20000004 	.word	0x20000004

080022f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f0:	b490      	push	{r4, r7}
 80022f2:	b08e      	sub	sp, #56	; 0x38
 80022f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022f6:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022f8:	f107 0414 	add.w	r4, r7, #20
 80022fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002302:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002304:	1d3c      	adds	r4, r7, #4
 8002306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002310:	2300      	movs	r3, #0
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
 8002314:	2300      	movs	r3, #0
 8002316:	637b      	str	r3, [r7, #52]	; 0x34
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b04      	cmp	r3, #4
 800232e:	d002      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x46>
 8002330:	2b08      	cmp	r3, #8
 8002332:	d003      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x4c>
 8002334:	e02a      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002338:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800233a:	e02a      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233e:	0c9b      	lsrs	r3, r3, #18
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	3338      	adds	r3, #56	; 0x38
 8002346:	443b      	add	r3, r7
 8002348:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d011      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	3338      	adds	r3, #56	; 0x38
 8002362:	443b      	add	r3, r7
 8002364:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	4a0f      	ldr	r2, [pc, #60]	; (80023ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800236e:	fb03 f202 	mul.w	r2, r3, r2
 8002372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002374:	fbb2 f3f3 	udiv	r3, r2, r3
 8002378:	637b      	str	r3, [r7, #52]	; 0x34
 800237a:	e004      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002380:	fb02 f303 	mul.w	r3, r2, r3
 8002384:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8002386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800238a:	e002      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800238c:	4b07      	ldr	r3, [pc, #28]	; (80023ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002394:	4618      	mov	r0, r3
 8002396:	3738      	adds	r7, #56	; 0x38
 8002398:	46bd      	mov	sp, r7
 800239a:	bc90      	pop	{r4, r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	08006e18 	.word	0x08006e18
 80023a4:	08006e28 	.word	0x08006e28
 80023a8:	40021000 	.word	0x40021000
 80023ac:	007a1200 	.word	0x007a1200
 80023b0:	003d0900 	.word	0x003d0900

080023b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b02      	ldr	r3, [pc, #8]	; (80023c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	20000000 	.word	0x20000000

080023c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023cc:	f7ff fff2 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	4903      	ldr	r1, [pc, #12]	; (80023ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80023de:	5ccb      	ldrb	r3, [r1, r3]
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08006e48 	.word	0x08006e48

080023f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023f4:	f7ff ffde 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	0adb      	lsrs	r3, r3, #11
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	4903      	ldr	r1, [pc, #12]	; (8002414 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	08006e48 	.word	0x08006e48

08002418 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <RCC_Delay+0x34>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <RCC_Delay+0x38>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	0a5b      	lsrs	r3, r3, #9
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002434:	bf00      	nop
  }
  while (Delay --);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1e5a      	subs	r2, r3, #1
 800243a:	60fa      	str	r2, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f9      	bne.n	8002434 <RCC_Delay+0x1c>
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	20000000 	.word	0x20000000
 8002450:	10624dd3 	.word	0x10624dd3

08002454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e06e      	b.n	8002544 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	2b00      	cmp	r3, #0
 800246c:	d108      	bne.n	8002480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002476:	d009      	beq.n	800248c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
 800247e:	e005      	b.n	800248c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe fd94 	bl	8000fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002510:	ea42 0103 	orr.w	r1, r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	0c1a      	lsrs	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f002 0204 	and.w	r2, r2, #4
 8002532:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_SPI_Transmit+0x22>
 800256a:	2302      	movs	r3, #2
 800256c:	e126      	b.n	80027bc <HAL_SPI_Transmit+0x270>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002576:	f7ff f81d 	bl	80015b4 <HAL_GetTick>
 800257a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d002      	beq.n	8002592 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800258c:	2302      	movs	r3, #2
 800258e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002590:	e10b      	b.n	80027aa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <HAL_SPI_Transmit+0x52>
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d102      	bne.n	80025a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025a2:	e102      	b.n	80027aa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2203      	movs	r2, #3
 80025a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	88fa      	ldrh	r2, [r7, #6]
 80025bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	88fa      	ldrh	r2, [r7, #6]
 80025c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ea:	d10f      	bne.n	800260c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800260a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	2b40      	cmp	r3, #64	; 0x40
 8002618:	d007      	beq.n	800262a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002628:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002632:	d14b      	bne.n	80026cc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <HAL_SPI_Transmit+0xf6>
 800263c:	8afb      	ldrh	r3, [r7, #22]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d13e      	bne.n	80026c0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	881a      	ldrh	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	1c9a      	adds	r2, r3, #2
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002666:	e02b      	b.n	80026c0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b02      	cmp	r3, #2
 8002674:	d112      	bne.n	800269c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	881a      	ldrh	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	1c9a      	adds	r2, r3, #2
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	86da      	strh	r2, [r3, #54]	; 0x36
 800269a:	e011      	b.n	80026c0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800269c:	f7fe ff8a 	bl	80015b4 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d803      	bhi.n	80026b4 <HAL_SPI_Transmit+0x168>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b2:	d102      	bne.n	80026ba <HAL_SPI_Transmit+0x16e>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026be:	e074      	b.n	80027aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1ce      	bne.n	8002668 <HAL_SPI_Transmit+0x11c>
 80026ca:	e04c      	b.n	8002766 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_SPI_Transmit+0x18e>
 80026d4:	8afb      	ldrh	r3, [r7, #22]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d140      	bne.n	800275c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	330c      	adds	r3, #12
 80026e4:	7812      	ldrb	r2, [r2, #0]
 80026e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002700:	e02c      	b.n	800275c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b02      	cmp	r3, #2
 800270e:	d113      	bne.n	8002738 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	330c      	adds	r3, #12
 800271a:	7812      	ldrb	r2, [r2, #0]
 800271c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	86da      	strh	r2, [r3, #54]	; 0x36
 8002736:	e011      	b.n	800275c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002738:	f7fe ff3c 	bl	80015b4 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d803      	bhi.n	8002750 <HAL_SPI_Transmit+0x204>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800274e:	d102      	bne.n	8002756 <HAL_SPI_Transmit+0x20a>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d102      	bne.n	800275c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	77fb      	strb	r3, [r7, #31]
          goto error;
 800275a:	e026      	b.n	80027aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1cd      	bne.n	8002702 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	6839      	ldr	r1, [r7, #0]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 fbb8 	bl	8002ee0 <SPI_EndRxTxTransaction>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2220      	movs	r2, #32
 800277a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10a      	bne.n	800279a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002784:	2300      	movs	r3, #0
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	77fb      	strb	r3, [r7, #31]
 80027a6:	e000      	b.n	80027aa <HAL_SPI_Transmit+0x25e>
  }

error:
 80027a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3720      	adds	r7, #32
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	4613      	mov	r3, r2
 80027d2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027e0:	d112      	bne.n	8002808 <HAL_SPI_Receive+0x44>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10e      	bne.n	8002808 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2204      	movs	r2, #4
 80027ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80027f2:	88fa      	ldrh	r2, [r7, #6]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f8f1 	bl	80029e6 <HAL_SPI_TransmitReceive>
 8002804:	4603      	mov	r3, r0
 8002806:	e0ea      	b.n	80029de <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_SPI_Receive+0x52>
 8002812:	2302      	movs	r3, #2
 8002814:	e0e3      	b.n	80029de <HAL_SPI_Receive+0x21a>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800281e:	f7fe fec9 	bl	80015b4 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d002      	beq.n	8002836 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002830:	2302      	movs	r3, #2
 8002832:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002834:	e0ca      	b.n	80029cc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_SPI_Receive+0x7e>
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d102      	bne.n	8002848 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002846:	e0c1      	b.n	80029cc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2204      	movs	r2, #4
 800284c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	88fa      	ldrh	r2, [r7, #6]
 8002860:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	88fa      	ldrh	r2, [r7, #6]
 8002866:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800288e:	d10f      	bne.n	80028b0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800289e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028ae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	2b40      	cmp	r3, #64	; 0x40
 80028bc:	d007      	beq.n	80028ce <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028cc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d162      	bne.n	800299c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028d6:	e02e      	b.n	8002936 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d115      	bne.n	8002912 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f103 020c 	add.w	r2, r3, #12
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	7812      	ldrb	r2, [r2, #0]
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002910:	e011      	b.n	8002936 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002912:	f7fe fe4f 	bl	80015b4 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d803      	bhi.n	800292a <HAL_SPI_Receive+0x166>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002928:	d102      	bne.n	8002930 <HAL_SPI_Receive+0x16c>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002934:	e04a      	b.n	80029cc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1cb      	bne.n	80028d8 <HAL_SPI_Receive+0x114>
 8002940:	e031      	b.n	80029a6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	d113      	bne.n	8002978 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	b292      	uxth	r2, r2
 800295c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	1c9a      	adds	r2, r3, #2
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002976:	e011      	b.n	800299c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002978:	f7fe fe1c 	bl	80015b4 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d803      	bhi.n	8002990 <HAL_SPI_Receive+0x1cc>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800298e:	d102      	bne.n	8002996 <HAL_SPI_Receive+0x1d2>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	75fb      	strb	r3, [r7, #23]
          goto error;
 800299a:	e017      	b.n	80029cc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1cd      	bne.n	8002942 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	6839      	ldr	r1, [r7, #0]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fa46 	bl	8002e3c <SPI_EndRxTransaction>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	75fb      	strb	r3, [r7, #23]
 80029c8:	e000      	b.n	80029cc <HAL_SPI_Receive+0x208>
  }

error :
 80029ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b08c      	sub	sp, #48	; 0x30
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029f4:	2301      	movs	r3, #1
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_SPI_TransmitReceive+0x26>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e18a      	b.n	8002d22 <HAL_SPI_TransmitReceive+0x33c>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a14:	f7fe fdce 	bl	80015b4 <HAL_GetTick>
 8002a18:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a2a:	887b      	ldrh	r3, [r7, #2]
 8002a2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d00f      	beq.n	8002a56 <HAL_SPI_TransmitReceive+0x70>
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a3c:	d107      	bne.n	8002a4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d103      	bne.n	8002a4e <HAL_SPI_TransmitReceive+0x68>
 8002a46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d003      	beq.n	8002a56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a54:	e15b      	b.n	8002d0e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x82>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x82>
 8002a62:	887b      	ldrh	r3, [r7, #2]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d103      	bne.n	8002a70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a6e:	e14e      	b.n	8002d0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d003      	beq.n	8002a84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2205      	movs	r2, #5
 8002a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	887a      	ldrh	r2, [r7, #2]
 8002a9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	887a      	ldrh	r2, [r7, #2]
 8002aa6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	887a      	ldrh	r2, [r7, #2]
 8002aac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	d007      	beq.n	8002ad8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ad6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae0:	d178      	bne.n	8002bd4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_SPI_TransmitReceive+0x10a>
 8002aea:	8b7b      	ldrh	r3, [r7, #26]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d166      	bne.n	8002bbe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	881a      	ldrh	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	1c9a      	adds	r2, r3, #2
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b14:	e053      	b.n	8002bbe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d11b      	bne.n	8002b5c <HAL_SPI_TransmitReceive+0x176>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d016      	beq.n	8002b5c <HAL_SPI_TransmitReceive+0x176>
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d113      	bne.n	8002b5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	881a      	ldrh	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	1c9a      	adds	r2, r3, #2
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d119      	bne.n	8002b9e <HAL_SPI_TransmitReceive+0x1b8>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d014      	beq.n	8002b9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	b292      	uxth	r2, r2
 8002b80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	1c9a      	adds	r2, r3, #2
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b9e:	f7fe fd09 	bl	80015b4 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d807      	bhi.n	8002bbe <HAL_SPI_TransmitReceive+0x1d8>
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bb4:	d003      	beq.n	8002bbe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002bbc:	e0a7      	b.n	8002d0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1a6      	bne.n	8002b16 <HAL_SPI_TransmitReceive+0x130>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1a1      	bne.n	8002b16 <HAL_SPI_TransmitReceive+0x130>
 8002bd2:	e07c      	b.n	8002cce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_SPI_TransmitReceive+0x1fc>
 8002bdc:	8b7b      	ldrh	r3, [r7, #26]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d16b      	bne.n	8002cba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	330c      	adds	r3, #12
 8002bec:	7812      	ldrb	r2, [r2, #0]
 8002bee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c08:	e057      	b.n	8002cba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d11c      	bne.n	8002c52 <HAL_SPI_TransmitReceive+0x26c>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d017      	beq.n	8002c52 <HAL_SPI_TransmitReceive+0x26c>
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d114      	bne.n	8002c52 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	330c      	adds	r3, #12
 8002c32:	7812      	ldrb	r2, [r2, #0]
 8002c34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d119      	bne.n	8002c94 <HAL_SPI_TransmitReceive+0x2ae>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d014      	beq.n	8002c94 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c90:	2301      	movs	r3, #1
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c94:	f7fe fc8e 	bl	80015b4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d803      	bhi.n	8002cac <HAL_SPI_TransmitReceive+0x2c6>
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002caa:	d102      	bne.n	8002cb2 <HAL_SPI_TransmitReceive+0x2cc>
 8002cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d103      	bne.n	8002cba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cb8:	e029      	b.n	8002d0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1a2      	bne.n	8002c0a <HAL_SPI_TransmitReceive+0x224>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d19d      	bne.n	8002c0a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f904 	bl	8002ee0 <SPI_EndRxTxTransaction>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d006      	beq.n	8002cec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002cea:	e010      	b.n	8002d0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	e000      	b.n	8002d0e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3730      	adds	r7, #48	; 0x30
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d3c:	f7fe fc3a 	bl	80015b4 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	4413      	add	r3, r2
 8002d4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d4c:	f7fe fc32 	bl	80015b4 <HAL_GetTick>
 8002d50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d52:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	015b      	lsls	r3, r3, #5
 8002d58:	0d1b      	lsrs	r3, r3, #20
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	fb02 f303 	mul.w	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d62:	e054      	b.n	8002e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d6a:	d050      	beq.n	8002e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d6c:	f7fe fc22 	bl	80015b4 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d902      	bls.n	8002d82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d13d      	bne.n	8002dfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d9a:	d111      	bne.n	8002dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da4:	d004      	beq.n	8002db0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dae:	d107      	bne.n	8002dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc8:	d10f      	bne.n	8002dea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002de8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e017      	b.n	8002e2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4013      	ands	r3, r2
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	bf0c      	ite	eq
 8002e1e:	2301      	moveq	r3, #1
 8002e20:	2300      	movne	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d19b      	bne.n	8002d64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000000 	.word	0x20000000

08002e3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e50:	d111      	bne.n	8002e76 <SPI_EndRxTransaction+0x3a>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e5a:	d004      	beq.n	8002e66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e64:	d107      	bne.n	8002e76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e74:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e7e:	d117      	bne.n	8002eb0 <SPI_EndRxTransaction+0x74>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e88:	d112      	bne.n	8002eb0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2200      	movs	r2, #0
 8002e92:	2101      	movs	r1, #1
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f7ff ff49 	bl	8002d2c <SPI_WaitFlagStateUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01a      	beq.n	8002ed6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e013      	b.n	8002ed8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7ff ff36 	bl	8002d2c <SPI_WaitFlagStateUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	f043 0220 	orr.w	r2, r3, #32
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e000      	b.n	8002ed8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2180      	movs	r1, #128	; 0x80
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff ff18 	bl	8002d2c <SPI_WaitFlagStateUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e000      	b.n	8002f14 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e041      	b.n	8002fb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe fa12 	bl	800136c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3304      	adds	r3, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f000 fa78 	bl	8003450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d001      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e03f      	b.n	8003054 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <HAL_TIM_Base_Start_IT+0xa4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_TIM_Base_Start_IT+0x62>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffe:	d00e      	beq.n	800301e <HAL_TIM_Base_Start_IT+0x62>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a17      	ldr	r2, [pc, #92]	; (8003064 <HAL_TIM_Base_Start_IT+0xa8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d009      	beq.n	800301e <HAL_TIM_Base_Start_IT+0x62>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a16      	ldr	r2, [pc, #88]	; (8003068 <HAL_TIM_Base_Start_IT+0xac>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <HAL_TIM_Base_Start_IT+0x62>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a14      	ldr	r2, [pc, #80]	; (800306c <HAL_TIM_Base_Start_IT+0xb0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d111      	bne.n	8003042 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b06      	cmp	r3, #6
 800302e:	d010      	beq.n	8003052 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003040:	e007      	b.n	8003052 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40012c00 	.word	0x40012c00
 8003064:	40000400 	.word	0x40000400
 8003068:	40000800 	.word	0x40000800
 800306c:	40014000 	.word	0x40014000

08003070 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b02      	cmp	r3, #2
 8003084:	d122      	bne.n	80030cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b02      	cmp	r3, #2
 8003092:	d11b      	bne.n	80030cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0202 	mvn.w	r2, #2
 800309c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f9b1 	bl	800341a <HAL_TIM_IC_CaptureCallback>
 80030b8:	e005      	b.n	80030c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f9a4 	bl	8003408 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f9b3 	bl	800342c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d122      	bne.n	8003120 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d11b      	bne.n	8003120 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0204 	mvn.w	r2, #4
 80030f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f987 	bl	800341a <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f97a 	bl	8003408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f989 	bl	800342c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b08      	cmp	r3, #8
 800312c:	d122      	bne.n	8003174 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b08      	cmp	r3, #8
 800313a:	d11b      	bne.n	8003174 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0208 	mvn.w	r2, #8
 8003144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2204      	movs	r2, #4
 800314a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f95d 	bl	800341a <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f950 	bl	8003408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f95f 	bl	800342c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b10      	cmp	r3, #16
 8003180:	d122      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b10      	cmp	r3, #16
 800318e:	d11b      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0210 	mvn.w	r2, #16
 8003198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2208      	movs	r2, #8
 800319e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f933 	bl	800341a <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f926 	bl	8003408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f935 	bl	800342c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d10e      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d107      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0201 	mvn.w	r2, #1
 80031ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fd fd38 	bl	8000c64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fe:	2b80      	cmp	r3, #128	; 0x80
 8003200:	d10e      	bne.n	8003220 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320c:	2b80      	cmp	r3, #128	; 0x80
 800320e:	d107      	bne.n	8003220 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fa9d 	bl	800375a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322a:	2b40      	cmp	r3, #64	; 0x40
 800322c:	d10e      	bne.n	800324c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003238:	2b40      	cmp	r3, #64	; 0x40
 800323a:	d107      	bne.n	800324c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8f9 	bl	800343e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b20      	cmp	r3, #32
 8003258:	d10e      	bne.n	8003278 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b20      	cmp	r3, #32
 8003266:	d107      	bne.n	8003278 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0220 	mvn.w	r2, #32
 8003270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fa68 	bl	8003748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_TIM_ConfigClockSource+0x18>
 8003294:	2302      	movs	r3, #2
 8003296:	e0b3      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x180>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d0:	d03e      	beq.n	8003350 <HAL_TIM_ConfigClockSource+0xd0>
 80032d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d6:	f200 8087 	bhi.w	80033e8 <HAL_TIM_ConfigClockSource+0x168>
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032de:	f000 8085 	beq.w	80033ec <HAL_TIM_ConfigClockSource+0x16c>
 80032e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e6:	d87f      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x168>
 80032e8:	2b70      	cmp	r3, #112	; 0x70
 80032ea:	d01a      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0xa2>
 80032ec:	2b70      	cmp	r3, #112	; 0x70
 80032ee:	d87b      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x168>
 80032f0:	2b60      	cmp	r3, #96	; 0x60
 80032f2:	d050      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x116>
 80032f4:	2b60      	cmp	r3, #96	; 0x60
 80032f6:	d877      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x168>
 80032f8:	2b50      	cmp	r3, #80	; 0x50
 80032fa:	d03c      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0xf6>
 80032fc:	2b50      	cmp	r3, #80	; 0x50
 80032fe:	d873      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x168>
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d058      	beq.n	80033b6 <HAL_TIM_ConfigClockSource+0x136>
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d86f      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x168>
 8003308:	2b30      	cmp	r3, #48	; 0x30
 800330a:	d064      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x156>
 800330c:	2b30      	cmp	r3, #48	; 0x30
 800330e:	d86b      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x168>
 8003310:	2b20      	cmp	r3, #32
 8003312:	d060      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x156>
 8003314:	2b20      	cmp	r3, #32
 8003316:	d867      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x168>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d05c      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x156>
 800331c:	2b10      	cmp	r3, #16
 800331e:	d05a      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003320:	e062      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6899      	ldr	r1, [r3, #8]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f000 f984 	bl	800363e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003344:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	609a      	str	r2, [r3, #8]
      break;
 800334e:	e04e      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6899      	ldr	r1, [r3, #8]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f000 f96d 	bl	800363e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003372:	609a      	str	r2, [r3, #8]
      break;
 8003374:	e03b      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	461a      	mov	r2, r3
 8003384:	f000 f8e4 	bl	8003550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2150      	movs	r1, #80	; 0x50
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f93b 	bl	800360a <TIM_ITRx_SetConfig>
      break;
 8003394:	e02b      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6859      	ldr	r1, [r3, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f000 f902 	bl	80035ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2160      	movs	r1, #96	; 0x60
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f92b 	bl	800360a <TIM_ITRx_SetConfig>
      break;
 80033b4:	e01b      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6859      	ldr	r1, [r3, #4]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	461a      	mov	r2, r3
 80033c4:	f000 f8c4 	bl	8003550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2140      	movs	r1, #64	; 0x40
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f91b 	bl	800360a <TIM_ITRx_SetConfig>
      break;
 80033d4:	e00b      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f000 f912 	bl	800360a <TIM_ITRx_SetConfig>
        break;
 80033e6:	e002      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033e8:	bf00      	nop
 80033ea:	e000      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr

0800343e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a35      	ldr	r2, [pc, #212]	; (8003538 <TIM_Base_SetConfig+0xe8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00b      	beq.n	8003480 <TIM_Base_SetConfig+0x30>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346e:	d007      	beq.n	8003480 <TIM_Base_SetConfig+0x30>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a32      	ldr	r2, [pc, #200]	; (800353c <TIM_Base_SetConfig+0xec>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d003      	beq.n	8003480 <TIM_Base_SetConfig+0x30>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a31      	ldr	r2, [pc, #196]	; (8003540 <TIM_Base_SetConfig+0xf0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d108      	bne.n	8003492 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a28      	ldr	r2, [pc, #160]	; (8003538 <TIM_Base_SetConfig+0xe8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d017      	beq.n	80034ca <TIM_Base_SetConfig+0x7a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a0:	d013      	beq.n	80034ca <TIM_Base_SetConfig+0x7a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a25      	ldr	r2, [pc, #148]	; (800353c <TIM_Base_SetConfig+0xec>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00f      	beq.n	80034ca <TIM_Base_SetConfig+0x7a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a24      	ldr	r2, [pc, #144]	; (8003540 <TIM_Base_SetConfig+0xf0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00b      	beq.n	80034ca <TIM_Base_SetConfig+0x7a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a23      	ldr	r2, [pc, #140]	; (8003544 <TIM_Base_SetConfig+0xf4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <TIM_Base_SetConfig+0x7a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a22      	ldr	r2, [pc, #136]	; (8003548 <TIM_Base_SetConfig+0xf8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d003      	beq.n	80034ca <TIM_Base_SetConfig+0x7a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a21      	ldr	r2, [pc, #132]	; (800354c <TIM_Base_SetConfig+0xfc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d108      	bne.n	80034dc <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a0d      	ldr	r2, [pc, #52]	; (8003538 <TIM_Base_SetConfig+0xe8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00b      	beq.n	8003520 <TIM_Base_SetConfig+0xd0>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <TIM_Base_SetConfig+0xf4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d007      	beq.n	8003520 <TIM_Base_SetConfig+0xd0>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a0d      	ldr	r2, [pc, #52]	; (8003548 <TIM_Base_SetConfig+0xf8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d003      	beq.n	8003520 <TIM_Base_SetConfig+0xd0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a0c      	ldr	r2, [pc, #48]	; (800354c <TIM_Base_SetConfig+0xfc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d103      	bne.n	8003528 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	615a      	str	r2, [r3, #20]
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr
 8003538:	40012c00 	.word	0x40012c00
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800
 8003544:	40014000 	.word	0x40014000
 8003548:	40014400 	.word	0x40014400
 800354c:	40014800 	.word	0x40014800

08003550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f023 0201 	bic.w	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800357a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f023 030a 	bic.w	r3, r3, #10
 800358c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f023 0210 	bic.w	r2, r3, #16
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	031b      	lsls	r3, r3, #12
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	621a      	str	r2, [r3, #32]
}
 8003600:	bf00      	nop
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003620:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	f043 0307 	orr.w	r3, r3, #7
 800362c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	609a      	str	r2, [r3, #8]
}
 8003634:	bf00      	nop
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr

0800363e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800363e:	b480      	push	{r7}
 8003640:	b087      	sub	sp, #28
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003658:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	021a      	lsls	r2, r3, #8
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	431a      	orrs	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4313      	orrs	r3, r2
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	609a      	str	r2, [r3, #8]
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003690:	2302      	movs	r3, #2
 8003692:	e04b      	b.n	800372c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a19      	ldr	r2, [pc, #100]	; (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d013      	beq.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e0:	d00e      	beq.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d009      	beq.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a13      	ldr	r2, [pc, #76]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a12      	ldr	r2, [pc, #72]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d10c      	bne.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003706:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	4313      	orrs	r3, r2
 8003710:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40000400 	.word	0x40000400
 8003740:	40000800 	.word	0x40000800
 8003744:	40014000 	.word	0x40014000

08003748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e03f      	b.n	80037fe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd fe38 	bl	8001408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	; 0x24
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fbb3 	bl	8003f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	4613      	mov	r3, r2
 8003812:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b20      	cmp	r3, #32
 800381e:	d11d      	bne.n	800385c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_UART_Receive_IT+0x26>
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e016      	b.n	800385e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_UART_Receive_IT+0x38>
 800383a:	2302      	movs	r3, #2
 800383c:	e00f      	b.n	800385e <HAL_UART_Receive_IT+0x58>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	461a      	mov	r2, r3
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f9d8 	bl	8003c08 <UART_Start_Receive_IT>
 8003858:	4603      	mov	r3, r0
 800385a:	e000      	b.n	800385e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800385c:	2302      	movs	r3, #2
  }
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003888:	2300      	movs	r3, #0
 800388a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10d      	bne.n	80038ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_UART_IRQHandler+0x52>
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa88 	bl	8003dc8 <UART_Receive_IT>
      return;
 80038b8:	e17b      	b.n	8003bb2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80b1 	beq.w	8003a24 <HAL_UART_IRQHandler+0x1bc>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <HAL_UART_IRQHandler+0x70>
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80a6 	beq.w	8003a24 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_UART_IRQHandler+0x90>
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f043 0201 	orr.w	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_UART_IRQHandler+0xb0>
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f043 0202 	orr.w	r2, r3, #2
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_UART_IRQHandler+0xd0>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f043 0204 	orr.w	r2, r3, #4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00f      	beq.n	8003962 <HAL_UART_IRQHandler+0xfa>
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d104      	bne.n	8003956 <HAL_UART_IRQHandler+0xee>
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f043 0208 	orr.w	r2, r3, #8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 811e 	beq.w	8003ba8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <HAL_UART_IRQHandler+0x11e>
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fa21 	bl	8003dc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf14      	ite	ne
 8003994:	2301      	movne	r3, #1
 8003996:	2300      	moveq	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d102      	bne.n	80039ae <HAL_UART_IRQHandler+0x146>
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d031      	beq.n	8003a12 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f963 	bl	8003c7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d023      	beq.n	8003a0a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d013      	beq.n	8003a02 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	4a76      	ldr	r2, [pc, #472]	; (8003bb8 <HAL_UART_IRQHandler+0x350>)
 80039e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd ff36 	bl	8001858 <HAL_DMA_Abort_IT>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d016      	beq.n	8003a20 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039fc:	4610      	mov	r0, r2
 80039fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a00:	e00e      	b.n	8003a20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f8ec 	bl	8003be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	e00a      	b.n	8003a20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f8e8 	bl	8003be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a10:	e006      	b.n	8003a20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f8e4 	bl	8003be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a1e:	e0c3      	b.n	8003ba8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	bf00      	nop
    return;
 8003a22:	e0c1      	b.n	8003ba8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	f040 80a1 	bne.w	8003b70 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 809b 	beq.w	8003b70 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8095 	beq.w	8003b70 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d04e      	beq.n	8003b08 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003a74:	8a3b      	ldrh	r3, [r7, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8098 	beq.w	8003bac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a80:	8a3a      	ldrh	r2, [r7, #16]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	f080 8092 	bcs.w	8003bac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8a3a      	ldrh	r2, [r7, #16]
 8003a8c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d02b      	beq.n	8003af0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0201 	bic.w	r2, r2, #1
 8003ab6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0210 	bic.w	r2, r2, #16
 8003ae4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fd fe79 	bl	80017e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	4619      	mov	r1, r3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f876 	bl	8003bf2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b06:	e051      	b.n	8003bac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d047      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003b20:	8a7b      	ldrh	r3, [r7, #18]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d044      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b34:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695a      	ldr	r2, [r3, #20]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0210 	bic.w	r2, r2, #16
 8003b62:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b64:	8a7b      	ldrh	r3, [r7, #18]
 8003b66:	4619      	mov	r1, r3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f842 	bl	8003bf2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b6e:	e01f      	b.n	8003bb0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d008      	beq.n	8003b8c <HAL_UART_IRQHandler+0x324>
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f8b8 	bl	8003cfa <UART_Transmit_IT>
    return;
 8003b8a:	e012      	b.n	8003bb2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x34a>
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f8f9 	bl	8003d98 <UART_EndTransmit_IT>
    return;
 8003ba6:	e004      	b.n	8003bb2 <HAL_UART_IRQHandler+0x34a>
    return;
 8003ba8:	bf00      	nop
 8003baa:	e002      	b.n	8003bb2 <HAL_UART_IRQHandler+0x34a>
      return;
 8003bac:	bf00      	nop
 8003bae:	e000      	b.n	8003bb2 <HAL_UART_IRQHandler+0x34a>
      return;
 8003bb0:	bf00      	nop
  }
}
 8003bb2:	3728      	adds	r7, #40	; 0x28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	08003cd3 	.word	0x08003cd3

08003bbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	4613      	mov	r3, r2
 8003c14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2222      	movs	r2, #34	; 0x22
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c4c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0201 	orr.w	r2, r2, #1
 8003c5c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0220 	orr.w	r2, r2, #32
 8003c6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c90:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695a      	ldr	r2, [r3, #20]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d107      	bne.n	8003cba <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0210 	bic.w	r2, r2, #16
 8003cb8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr

08003cd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f7ff ff77 	bl	8003be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b21      	cmp	r3, #33	; 0x21
 8003d0c:	d13e      	bne.n	8003d8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d16:	d114      	bne.n	8003d42 <UART_Transmit_IT+0x48>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d110      	bne.n	8003d42 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	1c9a      	adds	r2, r3, #2
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	621a      	str	r2, [r3, #32]
 8003d40:	e008      	b.n	8003d54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	1c59      	adds	r1, r3, #1
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6211      	str	r1, [r2, #32]
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4619      	mov	r1, r3
 8003d62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10f      	bne.n	8003d88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e000      	b.n	8003d8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff feff 	bl	8003bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b22      	cmp	r3, #34	; 0x22
 8003dda:	f040 8099 	bne.w	8003f10 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de6:	d117      	bne.n	8003e18 <UART_Receive_IT+0x50>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d113      	bne.n	8003e18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	1c9a      	adds	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	629a      	str	r2, [r3, #40]	; 0x28
 8003e16:	e026      	b.n	8003e66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2a:	d007      	beq.n	8003e3c <UART_Receive_IT+0x74>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <UART_Receive_IT+0x82>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d106      	bne.n	8003e4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	e008      	b.n	8003e5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4619      	mov	r1, r3
 8003e74:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d148      	bne.n	8003f0c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0220 	bic.w	r2, r2, #32
 8003e88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0201 	bic.w	r2, r2, #1
 8003ea8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d123      	bne.n	8003f02 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0210 	bic.w	r2, r2, #16
 8003ece:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d10a      	bne.n	8003ef4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff fe79 	bl	8003bf2 <HAL_UARTEx_RxEventCallback>
 8003f00:	e002      	b.n	8003f08 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fe63 	bl	8003bce <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e002      	b.n	8003f12 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e000      	b.n	8003f12 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
  }
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f5c:	f023 030c 	bic.w	r3, r3, #12
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	430b      	orrs	r3, r1
 8003f68:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699a      	ldr	r2, [r3, #24]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a55      	ldr	r2, [pc, #340]	; (80040dc <UART_SetConfig+0x1c0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d103      	bne.n	8003f92 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f8a:	f7fe fa31 	bl	80023f0 <HAL_RCC_GetPCLK2Freq>
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	e002      	b.n	8003f98 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f92:	f7fe fa19 	bl	80023c8 <HAL_RCC_GetPCLK1Freq>
 8003f96:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa0:	d14c      	bne.n	800403c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	009a      	lsls	r2, r3, #2
 8003fac:	441a      	add	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	4a49      	ldr	r2, [pc, #292]	; (80040e0 <UART_SetConfig+0x1c4>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	0119      	lsls	r1, r3, #4
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	009a      	lsls	r2, r3, #2
 8003fcc:	441a      	add	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd8:	4b41      	ldr	r3, [pc, #260]	; (80040e0 <UART_SetConfig+0x1c4>)
 8003fda:	fba3 0302 	umull	r0, r3, r3, r2
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2064      	movs	r0, #100	; 0x64
 8003fe2:	fb00 f303 	mul.w	r3, r0, r3
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	3332      	adds	r3, #50	; 0x32
 8003fec:	4a3c      	ldr	r2, [pc, #240]	; (80040e0 <UART_SetConfig+0x1c4>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ffa:	4419      	add	r1, r3
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4613      	mov	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	009a      	lsls	r2, r3, #2
 8004006:	441a      	add	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004012:	4b33      	ldr	r3, [pc, #204]	; (80040e0 <UART_SetConfig+0x1c4>)
 8004014:	fba3 0302 	umull	r0, r3, r3, r2
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	2064      	movs	r0, #100	; 0x64
 800401c:	fb00 f303 	mul.w	r3, r0, r3
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	3332      	adds	r3, #50	; 0x32
 8004026:	4a2e      	ldr	r2, [pc, #184]	; (80040e0 <UART_SetConfig+0x1c4>)
 8004028:	fba2 2303 	umull	r2, r3, r2, r3
 800402c:	095b      	lsrs	r3, r3, #5
 800402e:	f003 0207 	and.w	r2, r3, #7
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	440a      	add	r2, r1
 8004038:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 800403a:	e04a      	b.n	80040d2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009a      	lsls	r2, r3, #2
 8004046:	441a      	add	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004052:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <UART_SetConfig+0x1c4>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	0119      	lsls	r1, r3, #4
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	009a      	lsls	r2, r3, #2
 8004066:	441a      	add	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004072:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <UART_SetConfig+0x1c4>)
 8004074:	fba3 0302 	umull	r0, r3, r3, r2
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	2064      	movs	r0, #100	; 0x64
 800407c:	fb00 f303 	mul.w	r3, r0, r3
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	3332      	adds	r3, #50	; 0x32
 8004086:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <UART_SetConfig+0x1c4>)
 8004088:	fba2 2303 	umull	r2, r3, r2, r3
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004092:	4419      	add	r1, r3
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	009a      	lsls	r2, r3, #2
 800409e:	441a      	add	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80040aa:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <UART_SetConfig+0x1c4>)
 80040ac:	fba3 0302 	umull	r0, r3, r3, r2
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	2064      	movs	r0, #100	; 0x64
 80040b4:	fb00 f303 	mul.w	r3, r0, r3
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	3332      	adds	r3, #50	; 0x32
 80040be:	4a08      	ldr	r2, [pc, #32]	; (80040e0 <UART_SetConfig+0x1c4>)
 80040c0:	fba2 2303 	umull	r2, r3, r2, r3
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	f003 020f 	and.w	r2, r3, #15
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	440a      	add	r2, r1
 80040d0:	609a      	str	r2, [r3, #8]
}
 80040d2:	bf00      	nop
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40013800 	.word	0x40013800
 80040e0:	51eb851f 	.word	0x51eb851f

080040e4 <read_next_init>:

	SET_UART_RX_REGISTER;
}

void read_next_init()
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
	SET_UART_RX_REGISTER;
 80040e8:	2201      	movs	r2, #1
 80040ea:	4903      	ldr	r1, [pc, #12]	; (80040f8 <read_next_init+0x14>)
 80040ec:	4803      	ldr	r0, [pc, #12]	; (80040fc <read_next_init+0x18>)
 80040ee:	f7ff fb8a 	bl	8003806 <HAL_UART_Receive_IT>
}
 80040f2:	bf00      	nop
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	2000060e 	.word	0x2000060e
 80040fc:	200002a0 	.word	0x200002a0

08004100 <clear_error_uart_next>:




void clear_error_uart_next(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
	next.error_counter=0;
 8004104:	4b03      	ldr	r3, [pc, #12]	; (8004114 <clear_error_uart_next+0x14>)
 8004106:	2200      	movs	r2, #0
 8004108:	711a      	strb	r2, [r3, #4]
}
 800410a:	bf00      	nop
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000610 	.word	0x20000610

08004118 <write_next_val>:

void write_next_val(uint8_t tab[],uint16_t value,uint8_t count,uint8_t count_max)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	4608      	mov	r0, r1
 8004122:	4611      	mov	r1, r2
 8004124:	461a      	mov	r2, r3
 8004126:	4603      	mov	r3, r0
 8004128:	807b      	strh	r3, [r7, #2]
 800412a:	460b      	mov	r3, r1
 800412c:	707b      	strb	r3, [r7, #1]
 800412e:	4613      	mov	r3, r2
 8004130:	703b      	strb	r3, [r7, #0]
	next.count_max=count_max;
 8004132:	4a6a      	ldr	r2, [pc, #424]	; (80042dc <write_next_val+0x1c4>)
 8004134:	783b      	ldrb	r3, [r7, #0]
 8004136:	7153      	strb	r3, [r2, #5]

		if(next.counter_map == count)//sprawdza ktora wartosc ma wyslac 1,2,3 itd
 8004138:	4b68      	ldr	r3, [pc, #416]	; (80042dc <write_next_val+0x1c4>)
 800413a:	785b      	ldrb	r3, [r3, #1]
 800413c:	787a      	ldrb	r2, [r7, #1]
 800413e:	429a      	cmp	r2, r3
 8004140:	f040 80c7 	bne.w	80042d2 <write_next_val+0x1ba>
		{
			if(USART_Next->SR & USART_SR_TC)// czeka az bufor bedzie gotowy
 8004144:	4b66      	ldr	r3, [pc, #408]	; (80042e0 <write_next_val+0x1c8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80ba 	beq.w	80042c6 <write_next_val+0x1ae>
			{
				clear_error_uart_next();//zerowanie licznika błędu
 8004152:	f7ff ffd5 	bl	8004100 <clear_error_uart_next>

				if(next.counter_tx==0) //wysyla tablice tab[]
 8004156:	4b61      	ldr	r3, [pc, #388]	; (80042dc <write_next_val+0x1c4>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d11d      	bne.n	800419a <write_next_val+0x82>
				{
					USART_Next->DR=tab[next.adr];
 800415e:	4b5f      	ldr	r3, [pc, #380]	; (80042dc <write_next_val+0x1c4>)
 8004160:	78db      	ldrb	r3, [r3, #3]
 8004162:	461a      	mov	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4413      	add	r3, r2
 8004168:	781a      	ldrb	r2, [r3, #0]
 800416a:	4b5d      	ldr	r3, [pc, #372]	; (80042e0 <write_next_val+0x1c8>)
 800416c:	605a      	str	r2, [r3, #4]
					next.adr++;
 800416e:	4b5b      	ldr	r3, [pc, #364]	; (80042dc <write_next_val+0x1c4>)
 8004170:	78db      	ldrb	r3, [r3, #3]
 8004172:	3301      	adds	r3, #1
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4b59      	ldr	r3, [pc, #356]	; (80042dc <write_next_val+0x1c4>)
 8004178:	70da      	strb	r2, [r3, #3]
					if(tab[next.adr]==0)next.counter_tx++;// zwieksza counter_tx aby przejsc do nastpenej funkcji gdy juz wyslal cala tablice
 800417a:	4b58      	ldr	r3, [pc, #352]	; (80042dc <write_next_val+0x1c4>)
 800417c:	78db      	ldrb	r3, [r3, #3]
 800417e:	461a      	mov	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4413      	add	r3, r2
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f040 809d 	bne.w	80042c6 <write_next_val+0x1ae>
 800418c:	4b53      	ldr	r3, [pc, #332]	; (80042dc <write_next_val+0x1c4>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	3301      	adds	r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	4b51      	ldr	r3, [pc, #324]	; (80042dc <write_next_val+0x1c4>)
 8004196:	701a      	strb	r2, [r3, #0]
 8004198:	e095      	b.n	80042c6 <write_next_val+0x1ae>
				}
				else		//wysyla wartosc value przekonwertowana do ASCII
				{
					if(next.counter_tx==1){next.val=0x30 | (value/1000)%10;}
 800419a:	4b50      	ldr	r3, [pc, #320]	; (80042dc <write_next_val+0x1c4>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d115      	bne.n	80041ce <write_next_val+0xb6>
 80041a2:	887b      	ldrh	r3, [r7, #2]
 80041a4:	4a4f      	ldr	r2, [pc, #316]	; (80042e4 <write_next_val+0x1cc>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	099b      	lsrs	r3, r3, #6
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	4b4e      	ldr	r3, [pc, #312]	; (80042e8 <write_next_val+0x1d0>)
 80041b0:	fba3 1302 	umull	r1, r3, r3, r2
 80041b4:	08d9      	lsrs	r1, r3, #3
 80041b6:	460b      	mov	r3, r1
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	4b44      	ldr	r3, [pc, #272]	; (80042dc <write_next_val+0x1c4>)
 80041cc:	709a      	strb	r2, [r3, #2]
					if(next.counter_tx==2){next.val=0x30 | (value/100)%10;}
 80041ce:	4b43      	ldr	r3, [pc, #268]	; (80042dc <write_next_val+0x1c4>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d115      	bne.n	8004202 <write_next_val+0xea>
 80041d6:	887b      	ldrh	r3, [r7, #2]
 80041d8:	4a44      	ldr	r2, [pc, #272]	; (80042ec <write_next_val+0x1d4>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <write_next_val+0x1d0>)
 80041e4:	fba3 1302 	umull	r1, r3, r3, r2
 80041e8:	08d9      	lsrs	r1, r3, #3
 80041ea:	460b      	mov	r3, r1
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4b37      	ldr	r3, [pc, #220]	; (80042dc <write_next_val+0x1c4>)
 8004200:	709a      	strb	r2, [r3, #2]
					if(next.counter_tx==3){next.val=0x30 | (value/10)%10;}
 8004202:	4b36      	ldr	r3, [pc, #216]	; (80042dc <write_next_val+0x1c4>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b03      	cmp	r3, #3
 8004208:	d115      	bne.n	8004236 <write_next_val+0x11e>
 800420a:	887b      	ldrh	r3, [r7, #2]
 800420c:	4a36      	ldr	r2, [pc, #216]	; (80042e8 <write_next_val+0x1d0>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	08db      	lsrs	r3, r3, #3
 8004214:	b29a      	uxth	r2, r3
 8004216:	4b34      	ldr	r3, [pc, #208]	; (80042e8 <write_next_val+0x1d0>)
 8004218:	fba3 1302 	umull	r1, r3, r3, r2
 800421c:	08d9      	lsrs	r1, r3, #3
 800421e:	460b      	mov	r3, r1
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	440b      	add	r3, r1
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	b29b      	uxth	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004230:	b2da      	uxtb	r2, r3
 8004232:	4b2a      	ldr	r3, [pc, #168]	; (80042dc <write_next_val+0x1c4>)
 8004234:	709a      	strb	r2, [r3, #2]
					if(next.counter_tx==4){next.val=0x30 | (value%10);}
 8004236:	4b29      	ldr	r3, [pc, #164]	; (80042dc <write_next_val+0x1c4>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	2b04      	cmp	r3, #4
 800423c:	d110      	bne.n	8004260 <write_next_val+0x148>
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	4b29      	ldr	r3, [pc, #164]	; (80042e8 <write_next_val+0x1d0>)
 8004242:	fba3 1302 	umull	r1, r3, r3, r2
 8004246:	08d9      	lsrs	r1, r3, #3
 8004248:	460b      	mov	r3, r1
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	b29b      	uxth	r3, r3
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800425a:	b2da      	uxtb	r2, r3
 800425c:	4b1f      	ldr	r3, [pc, #124]	; (80042dc <write_next_val+0x1c4>)
 800425e:	709a      	strb	r2, [r3, #2]
					if(next.counter_tx>4)// wysyla 3 razy 0xff
 8004260:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <write_next_val+0x1c4>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b04      	cmp	r3, #4
 8004266:	d902      	bls.n	800426e <write_next_val+0x156>
					{
						next.val=0xff;
 8004268:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <write_next_val+0x1c4>)
 800426a:	22ff      	movs	r2, #255	; 0xff
 800426c:	709a      	strb	r2, [r3, #2]
					}
					next.counter_tx++;
 800426e:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <write_next_val+0x1c4>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	3301      	adds	r3, #1
 8004274:	b2da      	uxtb	r2, r3
 8004276:	4b19      	ldr	r3, [pc, #100]	; (80042dc <write_next_val+0x1c4>)
 8004278:	701a      	strb	r2, [r3, #0]
					if(next.counter_tx>60)//koniec wyslania zeruje wartosci
 800427a:	4b18      	ldr	r3, [pc, #96]	; (80042dc <write_next_val+0x1c4>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b3c      	cmp	r3, #60	; 0x3c
 8004280:	d919      	bls.n	80042b6 <write_next_val+0x19e>
					{
						next.counter_tx=0;
 8004282:	4b16      	ldr	r3, [pc, #88]	; (80042dc <write_next_val+0x1c4>)
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
						next.adr=0;
 8004288:	4b14      	ldr	r3, [pc, #80]	; (80042dc <write_next_val+0x1c4>)
 800428a:	2200      	movs	r2, #0
 800428c:	70da      	strb	r2, [r3, #3]
						next.counter_map++;
 800428e:	4b13      	ldr	r3, [pc, #76]	; (80042dc <write_next_val+0x1c4>)
 8004290:	785b      	ldrb	r3, [r3, #1]
 8004292:	3301      	adds	r3, #1
 8004294:	b2da      	uxtb	r2, r3
 8004296:	4b11      	ldr	r3, [pc, #68]	; (80042dc <write_next_val+0x1c4>)
 8004298:	705a      	strb	r2, [r3, #1]
						next.val_map[count]=value;
 800429a:	787b      	ldrb	r3, [r7, #1]
 800429c:	4a0f      	ldr	r2, [pc, #60]	; (80042dc <write_next_val+0x1c4>)
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4413      	add	r3, r2
 80042a2:	887a      	ldrh	r2, [r7, #2]
 80042a4:	80da      	strh	r2, [r3, #6]
						if(next.counter_map > count_max)next.counter_map=0;
 80042a6:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <write_next_val+0x1c4>)
 80042a8:	785b      	ldrb	r3, [r3, #1]
 80042aa:	783a      	ldrb	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d202      	bcs.n	80042b6 <write_next_val+0x19e>
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <write_next_val+0x1c4>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	705a      	strb	r2, [r3, #1]
							//po wyzerowaniu licznika ciagu wyslanych danych moze wyslaj inna data
					}
					if(next.counter_tx<8)USART_Next->DR=next.val;
 80042b6:	4b09      	ldr	r3, [pc, #36]	; (80042dc <write_next_val+0x1c4>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b07      	cmp	r3, #7
 80042bc:	d803      	bhi.n	80042c6 <write_next_val+0x1ae>
 80042be:	4b07      	ldr	r3, [pc, #28]	; (80042dc <write_next_val+0x1c4>)
 80042c0:	789a      	ldrb	r2, [r3, #2]
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <write_next_val+0x1c8>)
 80042c4:	605a      	str	r2, [r3, #4]
				}
			}
			USART_Next->CR1|=USART_CR1_TCIE;
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <write_next_val+0x1c8>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	4a05      	ldr	r2, [pc, #20]	; (80042e0 <write_next_val+0x1c8>)
 80042cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d0:	60d3      	str	r3, [r2, #12]
		}

}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000610 	.word	0x20000610
 80042e0:	40013800 	.word	0x40013800
 80042e4:	10624dd3 	.word	0x10624dd3
 80042e8:	cccccccd 	.word	0xcccccccd
 80042ec:	51eb851f 	.word	0x51eb851f

080042f0 <error_void_uart_next>:
		}

}

void error_void_uart_next(uint8_t presclaler)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
	next.error_counter++;
 80042fa:	4b0f      	ldr	r3, [pc, #60]	; (8004338 <error_void_uart_next+0x48>)
 80042fc:	791b      	ldrb	r3, [r3, #4]
 80042fe:	3301      	adds	r3, #1
 8004300:	b2da      	uxtb	r2, r3
 8004302:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <error_void_uart_next+0x48>)
 8004304:	711a      	strb	r2, [r3, #4]
	if(next.error_counter>presclaler)//8 bajtów musi się nie wysłać aby to się wykonało
 8004306:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <error_void_uart_next+0x48>)
 8004308:	791b      	ldrb	r3, [r3, #4]
 800430a:	79fa      	ldrb	r2, [r7, #7]
 800430c:	429a      	cmp	r2, r3
 800430e:	d20e      	bcs.n	800432e <error_void_uart_next+0x3e>
	{
		next.counter_map++;
 8004310:	4b09      	ldr	r3, [pc, #36]	; (8004338 <error_void_uart_next+0x48>)
 8004312:	785b      	ldrb	r3, [r3, #1]
 8004314:	3301      	adds	r3, #1
 8004316:	b2da      	uxtb	r2, r3
 8004318:	4b07      	ldr	r3, [pc, #28]	; (8004338 <error_void_uart_next+0x48>)
 800431a:	705a      	strb	r2, [r3, #1]
			if(next.counter_map > next.count_max)next.counter_map=0;
 800431c:	4b06      	ldr	r3, [pc, #24]	; (8004338 <error_void_uart_next+0x48>)
 800431e:	785a      	ldrb	r2, [r3, #1]
 8004320:	4b05      	ldr	r3, [pc, #20]	; (8004338 <error_void_uart_next+0x48>)
 8004322:	795b      	ldrb	r3, [r3, #5]
 8004324:	429a      	cmp	r2, r3
 8004326:	d902      	bls.n	800432e <error_void_uart_next+0x3e>
 8004328:	4b03      	ldr	r3, [pc, #12]	; (8004338 <error_void_uart_next+0x48>)
 800432a:	2200      	movs	r2, #0
 800432c:	705a      	strb	r2, [r3, #1]

	}
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr
 8004338:	20000610 	.word	0x20000610

0800433c <write_next_init>:

void write_next_init(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
	USART_Next->CR1|=USART_CR1_TCIE;
 8004340:	4b04      	ldr	r3, [pc, #16]	; (8004354 <write_next_init+0x18>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4a03      	ldr	r2, [pc, #12]	; (8004354 <write_next_init+0x18>)
 8004346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800434a:	60d3      	str	r3, [r2, #12]
}
 800434c:	bf00      	nop
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr
 8004354:	40013800 	.word	0x40013800

08004358 <__errno>:
 8004358:	4b01      	ldr	r3, [pc, #4]	; (8004360 <__errno+0x8>)
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	2000000c 	.word	0x2000000c

08004364 <__libc_init_array>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	2600      	movs	r6, #0
 8004368:	4d0c      	ldr	r5, [pc, #48]	; (800439c <__libc_init_array+0x38>)
 800436a:	4c0d      	ldr	r4, [pc, #52]	; (80043a0 <__libc_init_array+0x3c>)
 800436c:	1b64      	subs	r4, r4, r5
 800436e:	10a4      	asrs	r4, r4, #2
 8004370:	42a6      	cmp	r6, r4
 8004372:	d109      	bne.n	8004388 <__libc_init_array+0x24>
 8004374:	f002 fd30 	bl	8006dd8 <_init>
 8004378:	2600      	movs	r6, #0
 800437a:	4d0a      	ldr	r5, [pc, #40]	; (80043a4 <__libc_init_array+0x40>)
 800437c:	4c0a      	ldr	r4, [pc, #40]	; (80043a8 <__libc_init_array+0x44>)
 800437e:	1b64      	subs	r4, r4, r5
 8004380:	10a4      	asrs	r4, r4, #2
 8004382:	42a6      	cmp	r6, r4
 8004384:	d105      	bne.n	8004392 <__libc_init_array+0x2e>
 8004386:	bd70      	pop	{r4, r5, r6, pc}
 8004388:	f855 3b04 	ldr.w	r3, [r5], #4
 800438c:	4798      	blx	r3
 800438e:	3601      	adds	r6, #1
 8004390:	e7ee      	b.n	8004370 <__libc_init_array+0xc>
 8004392:	f855 3b04 	ldr.w	r3, [r5], #4
 8004396:	4798      	blx	r3
 8004398:	3601      	adds	r6, #1
 800439a:	e7f2      	b.n	8004382 <__libc_init_array+0x1e>
 800439c:	0800722c 	.word	0x0800722c
 80043a0:	0800722c 	.word	0x0800722c
 80043a4:	0800722c 	.word	0x0800722c
 80043a8:	08007230 	.word	0x08007230

080043ac <memset>:
 80043ac:	4603      	mov	r3, r0
 80043ae:	4402      	add	r2, r0
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d100      	bne.n	80043b6 <memset+0xa>
 80043b4:	4770      	bx	lr
 80043b6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ba:	e7f9      	b.n	80043b0 <memset+0x4>

080043bc <__cvt>:
 80043bc:	2b00      	cmp	r3, #0
 80043be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c2:	461f      	mov	r7, r3
 80043c4:	bfbb      	ittet	lt
 80043c6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80043ca:	461f      	movlt	r7, r3
 80043cc:	2300      	movge	r3, #0
 80043ce:	232d      	movlt	r3, #45	; 0x2d
 80043d0:	b088      	sub	sp, #32
 80043d2:	4614      	mov	r4, r2
 80043d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80043d6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80043d8:	7013      	strb	r3, [r2, #0]
 80043da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80043dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80043e0:	f023 0820 	bic.w	r8, r3, #32
 80043e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043e8:	d005      	beq.n	80043f6 <__cvt+0x3a>
 80043ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80043ee:	d100      	bne.n	80043f2 <__cvt+0x36>
 80043f0:	3501      	adds	r5, #1
 80043f2:	2302      	movs	r3, #2
 80043f4:	e000      	b.n	80043f8 <__cvt+0x3c>
 80043f6:	2303      	movs	r3, #3
 80043f8:	aa07      	add	r2, sp, #28
 80043fa:	9204      	str	r2, [sp, #16]
 80043fc:	aa06      	add	r2, sp, #24
 80043fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004402:	e9cd 3500 	strd	r3, r5, [sp]
 8004406:	4622      	mov	r2, r4
 8004408:	463b      	mov	r3, r7
 800440a:	f000 fcc5 	bl	8004d98 <_dtoa_r>
 800440e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004412:	4606      	mov	r6, r0
 8004414:	d102      	bne.n	800441c <__cvt+0x60>
 8004416:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004418:	07db      	lsls	r3, r3, #31
 800441a:	d522      	bpl.n	8004462 <__cvt+0xa6>
 800441c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004420:	eb06 0905 	add.w	r9, r6, r5
 8004424:	d110      	bne.n	8004448 <__cvt+0x8c>
 8004426:	7833      	ldrb	r3, [r6, #0]
 8004428:	2b30      	cmp	r3, #48	; 0x30
 800442a:	d10a      	bne.n	8004442 <__cvt+0x86>
 800442c:	2200      	movs	r2, #0
 800442e:	2300      	movs	r3, #0
 8004430:	4620      	mov	r0, r4
 8004432:	4639      	mov	r1, r7
 8004434:	f7fc fb18 	bl	8000a68 <__aeabi_dcmpeq>
 8004438:	b918      	cbnz	r0, 8004442 <__cvt+0x86>
 800443a:	f1c5 0501 	rsb	r5, r5, #1
 800443e:	f8ca 5000 	str.w	r5, [sl]
 8004442:	f8da 3000 	ldr.w	r3, [sl]
 8004446:	4499      	add	r9, r3
 8004448:	2200      	movs	r2, #0
 800444a:	2300      	movs	r3, #0
 800444c:	4620      	mov	r0, r4
 800444e:	4639      	mov	r1, r7
 8004450:	f7fc fb0a 	bl	8000a68 <__aeabi_dcmpeq>
 8004454:	b108      	cbz	r0, 800445a <__cvt+0x9e>
 8004456:	f8cd 901c 	str.w	r9, [sp, #28]
 800445a:	2230      	movs	r2, #48	; 0x30
 800445c:	9b07      	ldr	r3, [sp, #28]
 800445e:	454b      	cmp	r3, r9
 8004460:	d307      	bcc.n	8004472 <__cvt+0xb6>
 8004462:	4630      	mov	r0, r6
 8004464:	9b07      	ldr	r3, [sp, #28]
 8004466:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004468:	1b9b      	subs	r3, r3, r6
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	b008      	add	sp, #32
 800446e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004472:	1c59      	adds	r1, r3, #1
 8004474:	9107      	str	r1, [sp, #28]
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	e7f0      	b.n	800445c <__cvt+0xa0>

0800447a <__exponent>:
 800447a:	4603      	mov	r3, r0
 800447c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800447e:	2900      	cmp	r1, #0
 8004480:	f803 2b02 	strb.w	r2, [r3], #2
 8004484:	bfb6      	itet	lt
 8004486:	222d      	movlt	r2, #45	; 0x2d
 8004488:	222b      	movge	r2, #43	; 0x2b
 800448a:	4249      	neglt	r1, r1
 800448c:	2909      	cmp	r1, #9
 800448e:	7042      	strb	r2, [r0, #1]
 8004490:	dd2b      	ble.n	80044ea <__exponent+0x70>
 8004492:	f10d 0407 	add.w	r4, sp, #7
 8004496:	46a4      	mov	ip, r4
 8004498:	270a      	movs	r7, #10
 800449a:	fb91 f6f7 	sdiv	r6, r1, r7
 800449e:	460a      	mov	r2, r1
 80044a0:	46a6      	mov	lr, r4
 80044a2:	fb07 1516 	mls	r5, r7, r6, r1
 80044a6:	2a63      	cmp	r2, #99	; 0x63
 80044a8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80044ac:	4631      	mov	r1, r6
 80044ae:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80044b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80044b6:	dcf0      	bgt.n	800449a <__exponent+0x20>
 80044b8:	3130      	adds	r1, #48	; 0x30
 80044ba:	f1ae 0502 	sub.w	r5, lr, #2
 80044be:	f804 1c01 	strb.w	r1, [r4, #-1]
 80044c2:	4629      	mov	r1, r5
 80044c4:	1c44      	adds	r4, r0, #1
 80044c6:	4561      	cmp	r1, ip
 80044c8:	d30a      	bcc.n	80044e0 <__exponent+0x66>
 80044ca:	f10d 0209 	add.w	r2, sp, #9
 80044ce:	eba2 020e 	sub.w	r2, r2, lr
 80044d2:	4565      	cmp	r5, ip
 80044d4:	bf88      	it	hi
 80044d6:	2200      	movhi	r2, #0
 80044d8:	4413      	add	r3, r2
 80044da:	1a18      	subs	r0, r3, r0
 80044dc:	b003      	add	sp, #12
 80044de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044e4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80044e8:	e7ed      	b.n	80044c6 <__exponent+0x4c>
 80044ea:	2330      	movs	r3, #48	; 0x30
 80044ec:	3130      	adds	r1, #48	; 0x30
 80044ee:	7083      	strb	r3, [r0, #2]
 80044f0:	70c1      	strb	r1, [r0, #3]
 80044f2:	1d03      	adds	r3, r0, #4
 80044f4:	e7f1      	b.n	80044da <__exponent+0x60>
	...

080044f8 <_printf_float>:
 80044f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fc:	b091      	sub	sp, #68	; 0x44
 80044fe:	460c      	mov	r4, r1
 8004500:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004504:	4616      	mov	r6, r2
 8004506:	461f      	mov	r7, r3
 8004508:	4605      	mov	r5, r0
 800450a:	f001 fa33 	bl	8005974 <_localeconv_r>
 800450e:	6803      	ldr	r3, [r0, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	9309      	str	r3, [sp, #36]	; 0x24
 8004514:	f7fb fe7c 	bl	8000210 <strlen>
 8004518:	2300      	movs	r3, #0
 800451a:	930e      	str	r3, [sp, #56]	; 0x38
 800451c:	f8d8 3000 	ldr.w	r3, [r8]
 8004520:	900a      	str	r0, [sp, #40]	; 0x28
 8004522:	3307      	adds	r3, #7
 8004524:	f023 0307 	bic.w	r3, r3, #7
 8004528:	f103 0208 	add.w	r2, r3, #8
 800452c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004530:	f8d4 b000 	ldr.w	fp, [r4]
 8004534:	f8c8 2000 	str.w	r2, [r8]
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004540:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004544:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004548:	930b      	str	r3, [sp, #44]	; 0x2c
 800454a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800454e:	4640      	mov	r0, r8
 8004550:	4b9c      	ldr	r3, [pc, #624]	; (80047c4 <_printf_float+0x2cc>)
 8004552:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004554:	f7fc faba 	bl	8000acc <__aeabi_dcmpun>
 8004558:	bb70      	cbnz	r0, 80045b8 <_printf_float+0xc0>
 800455a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800455e:	4640      	mov	r0, r8
 8004560:	4b98      	ldr	r3, [pc, #608]	; (80047c4 <_printf_float+0x2cc>)
 8004562:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004564:	f7fc fa94 	bl	8000a90 <__aeabi_dcmple>
 8004568:	bb30      	cbnz	r0, 80045b8 <_printf_float+0xc0>
 800456a:	2200      	movs	r2, #0
 800456c:	2300      	movs	r3, #0
 800456e:	4640      	mov	r0, r8
 8004570:	4651      	mov	r1, sl
 8004572:	f7fc fa83 	bl	8000a7c <__aeabi_dcmplt>
 8004576:	b110      	cbz	r0, 800457e <_printf_float+0x86>
 8004578:	232d      	movs	r3, #45	; 0x2d
 800457a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800457e:	4b92      	ldr	r3, [pc, #584]	; (80047c8 <_printf_float+0x2d0>)
 8004580:	4892      	ldr	r0, [pc, #584]	; (80047cc <_printf_float+0x2d4>)
 8004582:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004586:	bf94      	ite	ls
 8004588:	4698      	movls	r8, r3
 800458a:	4680      	movhi	r8, r0
 800458c:	2303      	movs	r3, #3
 800458e:	f04f 0a00 	mov.w	sl, #0
 8004592:	6123      	str	r3, [r4, #16]
 8004594:	f02b 0304 	bic.w	r3, fp, #4
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	4633      	mov	r3, r6
 800459c:	4621      	mov	r1, r4
 800459e:	4628      	mov	r0, r5
 80045a0:	9700      	str	r7, [sp, #0]
 80045a2:	aa0f      	add	r2, sp, #60	; 0x3c
 80045a4:	f000 f9d4 	bl	8004950 <_printf_common>
 80045a8:	3001      	adds	r0, #1
 80045aa:	f040 8090 	bne.w	80046ce <_printf_float+0x1d6>
 80045ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045b2:	b011      	add	sp, #68	; 0x44
 80045b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045b8:	4642      	mov	r2, r8
 80045ba:	4653      	mov	r3, sl
 80045bc:	4640      	mov	r0, r8
 80045be:	4651      	mov	r1, sl
 80045c0:	f7fc fa84 	bl	8000acc <__aeabi_dcmpun>
 80045c4:	b148      	cbz	r0, 80045da <_printf_float+0xe2>
 80045c6:	f1ba 0f00 	cmp.w	sl, #0
 80045ca:	bfb8      	it	lt
 80045cc:	232d      	movlt	r3, #45	; 0x2d
 80045ce:	4880      	ldr	r0, [pc, #512]	; (80047d0 <_printf_float+0x2d8>)
 80045d0:	bfb8      	it	lt
 80045d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80045d6:	4b7f      	ldr	r3, [pc, #508]	; (80047d4 <_printf_float+0x2dc>)
 80045d8:	e7d3      	b.n	8004582 <_printf_float+0x8a>
 80045da:	6863      	ldr	r3, [r4, #4]
 80045dc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	d142      	bne.n	800466a <_printf_float+0x172>
 80045e4:	2306      	movs	r3, #6
 80045e6:	6063      	str	r3, [r4, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	9206      	str	r2, [sp, #24]
 80045ec:	aa0e      	add	r2, sp, #56	; 0x38
 80045ee:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80045f2:	aa0d      	add	r2, sp, #52	; 0x34
 80045f4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80045f8:	9203      	str	r2, [sp, #12]
 80045fa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80045fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004602:	6023      	str	r3, [r4, #0]
 8004604:	6863      	ldr	r3, [r4, #4]
 8004606:	4642      	mov	r2, r8
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	4628      	mov	r0, r5
 800460c:	4653      	mov	r3, sl
 800460e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004610:	f7ff fed4 	bl	80043bc <__cvt>
 8004614:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004616:	4680      	mov	r8, r0
 8004618:	2947      	cmp	r1, #71	; 0x47
 800461a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800461c:	d108      	bne.n	8004630 <_printf_float+0x138>
 800461e:	1cc8      	adds	r0, r1, #3
 8004620:	db02      	blt.n	8004628 <_printf_float+0x130>
 8004622:	6863      	ldr	r3, [r4, #4]
 8004624:	4299      	cmp	r1, r3
 8004626:	dd40      	ble.n	80046aa <_printf_float+0x1b2>
 8004628:	f1a9 0902 	sub.w	r9, r9, #2
 800462c:	fa5f f989 	uxtb.w	r9, r9
 8004630:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004634:	d81f      	bhi.n	8004676 <_printf_float+0x17e>
 8004636:	464a      	mov	r2, r9
 8004638:	3901      	subs	r1, #1
 800463a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800463e:	910d      	str	r1, [sp, #52]	; 0x34
 8004640:	f7ff ff1b 	bl	800447a <__exponent>
 8004644:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004646:	4682      	mov	sl, r0
 8004648:	1813      	adds	r3, r2, r0
 800464a:	2a01      	cmp	r2, #1
 800464c:	6123      	str	r3, [r4, #16]
 800464e:	dc02      	bgt.n	8004656 <_printf_float+0x15e>
 8004650:	6822      	ldr	r2, [r4, #0]
 8004652:	07d2      	lsls	r2, r2, #31
 8004654:	d501      	bpl.n	800465a <_printf_float+0x162>
 8004656:	3301      	adds	r3, #1
 8004658:	6123      	str	r3, [r4, #16]
 800465a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800465e:	2b00      	cmp	r3, #0
 8004660:	d09b      	beq.n	800459a <_printf_float+0xa2>
 8004662:	232d      	movs	r3, #45	; 0x2d
 8004664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004668:	e797      	b.n	800459a <_printf_float+0xa2>
 800466a:	2947      	cmp	r1, #71	; 0x47
 800466c:	d1bc      	bne.n	80045e8 <_printf_float+0xf0>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1ba      	bne.n	80045e8 <_printf_float+0xf0>
 8004672:	2301      	movs	r3, #1
 8004674:	e7b7      	b.n	80045e6 <_printf_float+0xee>
 8004676:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800467a:	d118      	bne.n	80046ae <_printf_float+0x1b6>
 800467c:	2900      	cmp	r1, #0
 800467e:	6863      	ldr	r3, [r4, #4]
 8004680:	dd0b      	ble.n	800469a <_printf_float+0x1a2>
 8004682:	6121      	str	r1, [r4, #16]
 8004684:	b913      	cbnz	r3, 800468c <_printf_float+0x194>
 8004686:	6822      	ldr	r2, [r4, #0]
 8004688:	07d0      	lsls	r0, r2, #31
 800468a:	d502      	bpl.n	8004692 <_printf_float+0x19a>
 800468c:	3301      	adds	r3, #1
 800468e:	440b      	add	r3, r1
 8004690:	6123      	str	r3, [r4, #16]
 8004692:	f04f 0a00 	mov.w	sl, #0
 8004696:	65a1      	str	r1, [r4, #88]	; 0x58
 8004698:	e7df      	b.n	800465a <_printf_float+0x162>
 800469a:	b913      	cbnz	r3, 80046a2 <_printf_float+0x1aa>
 800469c:	6822      	ldr	r2, [r4, #0]
 800469e:	07d2      	lsls	r2, r2, #31
 80046a0:	d501      	bpl.n	80046a6 <_printf_float+0x1ae>
 80046a2:	3302      	adds	r3, #2
 80046a4:	e7f4      	b.n	8004690 <_printf_float+0x198>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e7f2      	b.n	8004690 <_printf_float+0x198>
 80046aa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80046ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046b0:	4299      	cmp	r1, r3
 80046b2:	db05      	blt.n	80046c0 <_printf_float+0x1c8>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	6121      	str	r1, [r4, #16]
 80046b8:	07d8      	lsls	r0, r3, #31
 80046ba:	d5ea      	bpl.n	8004692 <_printf_float+0x19a>
 80046bc:	1c4b      	adds	r3, r1, #1
 80046be:	e7e7      	b.n	8004690 <_printf_float+0x198>
 80046c0:	2900      	cmp	r1, #0
 80046c2:	bfcc      	ite	gt
 80046c4:	2201      	movgt	r2, #1
 80046c6:	f1c1 0202 	rsble	r2, r1, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	e7e0      	b.n	8004690 <_printf_float+0x198>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	055a      	lsls	r2, r3, #21
 80046d2:	d407      	bmi.n	80046e4 <_printf_float+0x1ec>
 80046d4:	6923      	ldr	r3, [r4, #16]
 80046d6:	4642      	mov	r2, r8
 80046d8:	4631      	mov	r1, r6
 80046da:	4628      	mov	r0, r5
 80046dc:	47b8      	blx	r7
 80046de:	3001      	adds	r0, #1
 80046e0:	d12b      	bne.n	800473a <_printf_float+0x242>
 80046e2:	e764      	b.n	80045ae <_printf_float+0xb6>
 80046e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80046e8:	f240 80dd 	bls.w	80048a6 <_printf_float+0x3ae>
 80046ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80046f0:	2200      	movs	r2, #0
 80046f2:	2300      	movs	r3, #0
 80046f4:	f7fc f9b8 	bl	8000a68 <__aeabi_dcmpeq>
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d033      	beq.n	8004764 <_printf_float+0x26c>
 80046fc:	2301      	movs	r3, #1
 80046fe:	4631      	mov	r1, r6
 8004700:	4628      	mov	r0, r5
 8004702:	4a35      	ldr	r2, [pc, #212]	; (80047d8 <_printf_float+0x2e0>)
 8004704:	47b8      	blx	r7
 8004706:	3001      	adds	r0, #1
 8004708:	f43f af51 	beq.w	80045ae <_printf_float+0xb6>
 800470c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004710:	429a      	cmp	r2, r3
 8004712:	db02      	blt.n	800471a <_printf_float+0x222>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	07d8      	lsls	r0, r3, #31
 8004718:	d50f      	bpl.n	800473a <_printf_float+0x242>
 800471a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800471e:	4631      	mov	r1, r6
 8004720:	4628      	mov	r0, r5
 8004722:	47b8      	blx	r7
 8004724:	3001      	adds	r0, #1
 8004726:	f43f af42 	beq.w	80045ae <_printf_float+0xb6>
 800472a:	f04f 0800 	mov.w	r8, #0
 800472e:	f104 091a 	add.w	r9, r4, #26
 8004732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004734:	3b01      	subs	r3, #1
 8004736:	4543      	cmp	r3, r8
 8004738:	dc09      	bgt.n	800474e <_printf_float+0x256>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	079b      	lsls	r3, r3, #30
 800473e:	f100 8102 	bmi.w	8004946 <_printf_float+0x44e>
 8004742:	68e0      	ldr	r0, [r4, #12]
 8004744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004746:	4298      	cmp	r0, r3
 8004748:	bfb8      	it	lt
 800474a:	4618      	movlt	r0, r3
 800474c:	e731      	b.n	80045b2 <_printf_float+0xba>
 800474e:	2301      	movs	r3, #1
 8004750:	464a      	mov	r2, r9
 8004752:	4631      	mov	r1, r6
 8004754:	4628      	mov	r0, r5
 8004756:	47b8      	blx	r7
 8004758:	3001      	adds	r0, #1
 800475a:	f43f af28 	beq.w	80045ae <_printf_float+0xb6>
 800475e:	f108 0801 	add.w	r8, r8, #1
 8004762:	e7e6      	b.n	8004732 <_printf_float+0x23a>
 8004764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004766:	2b00      	cmp	r3, #0
 8004768:	dc38      	bgt.n	80047dc <_printf_float+0x2e4>
 800476a:	2301      	movs	r3, #1
 800476c:	4631      	mov	r1, r6
 800476e:	4628      	mov	r0, r5
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <_printf_float+0x2e0>)
 8004772:	47b8      	blx	r7
 8004774:	3001      	adds	r0, #1
 8004776:	f43f af1a 	beq.w	80045ae <_printf_float+0xb6>
 800477a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800477e:	4313      	orrs	r3, r2
 8004780:	d102      	bne.n	8004788 <_printf_float+0x290>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	07d9      	lsls	r1, r3, #31
 8004786:	d5d8      	bpl.n	800473a <_printf_float+0x242>
 8004788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800478c:	4631      	mov	r1, r6
 800478e:	4628      	mov	r0, r5
 8004790:	47b8      	blx	r7
 8004792:	3001      	adds	r0, #1
 8004794:	f43f af0b 	beq.w	80045ae <_printf_float+0xb6>
 8004798:	f04f 0900 	mov.w	r9, #0
 800479c:	f104 0a1a 	add.w	sl, r4, #26
 80047a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047a2:	425b      	negs	r3, r3
 80047a4:	454b      	cmp	r3, r9
 80047a6:	dc01      	bgt.n	80047ac <_printf_float+0x2b4>
 80047a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047aa:	e794      	b.n	80046d6 <_printf_float+0x1de>
 80047ac:	2301      	movs	r3, #1
 80047ae:	4652      	mov	r2, sl
 80047b0:	4631      	mov	r1, r6
 80047b2:	4628      	mov	r0, r5
 80047b4:	47b8      	blx	r7
 80047b6:	3001      	adds	r0, #1
 80047b8:	f43f aef9 	beq.w	80045ae <_printf_float+0xb6>
 80047bc:	f109 0901 	add.w	r9, r9, #1
 80047c0:	e7ee      	b.n	80047a0 <_printf_float+0x2a8>
 80047c2:	bf00      	nop
 80047c4:	7fefffff 	.word	0x7fefffff
 80047c8:	08006e54 	.word	0x08006e54
 80047cc:	08006e58 	.word	0x08006e58
 80047d0:	08006e60 	.word	0x08006e60
 80047d4:	08006e5c 	.word	0x08006e5c
 80047d8:	08006e64 	.word	0x08006e64
 80047dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047e0:	429a      	cmp	r2, r3
 80047e2:	bfa8      	it	ge
 80047e4:	461a      	movge	r2, r3
 80047e6:	2a00      	cmp	r2, #0
 80047e8:	4691      	mov	r9, r2
 80047ea:	dc37      	bgt.n	800485c <_printf_float+0x364>
 80047ec:	f04f 0b00 	mov.w	fp, #0
 80047f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047f4:	f104 021a 	add.w	r2, r4, #26
 80047f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80047fc:	ebaa 0309 	sub.w	r3, sl, r9
 8004800:	455b      	cmp	r3, fp
 8004802:	dc33      	bgt.n	800486c <_printf_float+0x374>
 8004804:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004808:	429a      	cmp	r2, r3
 800480a:	db3b      	blt.n	8004884 <_printf_float+0x38c>
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	07da      	lsls	r2, r3, #31
 8004810:	d438      	bmi.n	8004884 <_printf_float+0x38c>
 8004812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004814:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004816:	eba3 020a 	sub.w	r2, r3, sl
 800481a:	eba3 0901 	sub.w	r9, r3, r1
 800481e:	4591      	cmp	r9, r2
 8004820:	bfa8      	it	ge
 8004822:	4691      	movge	r9, r2
 8004824:	f1b9 0f00 	cmp.w	r9, #0
 8004828:	dc34      	bgt.n	8004894 <_printf_float+0x39c>
 800482a:	f04f 0800 	mov.w	r8, #0
 800482e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004832:	f104 0a1a 	add.w	sl, r4, #26
 8004836:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	eba3 0309 	sub.w	r3, r3, r9
 8004840:	4543      	cmp	r3, r8
 8004842:	f77f af7a 	ble.w	800473a <_printf_float+0x242>
 8004846:	2301      	movs	r3, #1
 8004848:	4652      	mov	r2, sl
 800484a:	4631      	mov	r1, r6
 800484c:	4628      	mov	r0, r5
 800484e:	47b8      	blx	r7
 8004850:	3001      	adds	r0, #1
 8004852:	f43f aeac 	beq.w	80045ae <_printf_float+0xb6>
 8004856:	f108 0801 	add.w	r8, r8, #1
 800485a:	e7ec      	b.n	8004836 <_printf_float+0x33e>
 800485c:	4613      	mov	r3, r2
 800485e:	4631      	mov	r1, r6
 8004860:	4642      	mov	r2, r8
 8004862:	4628      	mov	r0, r5
 8004864:	47b8      	blx	r7
 8004866:	3001      	adds	r0, #1
 8004868:	d1c0      	bne.n	80047ec <_printf_float+0x2f4>
 800486a:	e6a0      	b.n	80045ae <_printf_float+0xb6>
 800486c:	2301      	movs	r3, #1
 800486e:	4631      	mov	r1, r6
 8004870:	4628      	mov	r0, r5
 8004872:	920b      	str	r2, [sp, #44]	; 0x2c
 8004874:	47b8      	blx	r7
 8004876:	3001      	adds	r0, #1
 8004878:	f43f ae99 	beq.w	80045ae <_printf_float+0xb6>
 800487c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800487e:	f10b 0b01 	add.w	fp, fp, #1
 8004882:	e7b9      	b.n	80047f8 <_printf_float+0x300>
 8004884:	4631      	mov	r1, r6
 8004886:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800488a:	4628      	mov	r0, r5
 800488c:	47b8      	blx	r7
 800488e:	3001      	adds	r0, #1
 8004890:	d1bf      	bne.n	8004812 <_printf_float+0x31a>
 8004892:	e68c      	b.n	80045ae <_printf_float+0xb6>
 8004894:	464b      	mov	r3, r9
 8004896:	4631      	mov	r1, r6
 8004898:	4628      	mov	r0, r5
 800489a:	eb08 020a 	add.w	r2, r8, sl
 800489e:	47b8      	blx	r7
 80048a0:	3001      	adds	r0, #1
 80048a2:	d1c2      	bne.n	800482a <_printf_float+0x332>
 80048a4:	e683      	b.n	80045ae <_printf_float+0xb6>
 80048a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048a8:	2a01      	cmp	r2, #1
 80048aa:	dc01      	bgt.n	80048b0 <_printf_float+0x3b8>
 80048ac:	07db      	lsls	r3, r3, #31
 80048ae:	d537      	bpl.n	8004920 <_printf_float+0x428>
 80048b0:	2301      	movs	r3, #1
 80048b2:	4642      	mov	r2, r8
 80048b4:	4631      	mov	r1, r6
 80048b6:	4628      	mov	r0, r5
 80048b8:	47b8      	blx	r7
 80048ba:	3001      	adds	r0, #1
 80048bc:	f43f ae77 	beq.w	80045ae <_printf_float+0xb6>
 80048c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048c4:	4631      	mov	r1, r6
 80048c6:	4628      	mov	r0, r5
 80048c8:	47b8      	blx	r7
 80048ca:	3001      	adds	r0, #1
 80048cc:	f43f ae6f 	beq.w	80045ae <_printf_float+0xb6>
 80048d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048d4:	2200      	movs	r2, #0
 80048d6:	2300      	movs	r3, #0
 80048d8:	f7fc f8c6 	bl	8000a68 <__aeabi_dcmpeq>
 80048dc:	b9d8      	cbnz	r0, 8004916 <_printf_float+0x41e>
 80048de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048e0:	f108 0201 	add.w	r2, r8, #1
 80048e4:	3b01      	subs	r3, #1
 80048e6:	4631      	mov	r1, r6
 80048e8:	4628      	mov	r0, r5
 80048ea:	47b8      	blx	r7
 80048ec:	3001      	adds	r0, #1
 80048ee:	d10e      	bne.n	800490e <_printf_float+0x416>
 80048f0:	e65d      	b.n	80045ae <_printf_float+0xb6>
 80048f2:	2301      	movs	r3, #1
 80048f4:	464a      	mov	r2, r9
 80048f6:	4631      	mov	r1, r6
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b8      	blx	r7
 80048fc:	3001      	adds	r0, #1
 80048fe:	f43f ae56 	beq.w	80045ae <_printf_float+0xb6>
 8004902:	f108 0801 	add.w	r8, r8, #1
 8004906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004908:	3b01      	subs	r3, #1
 800490a:	4543      	cmp	r3, r8
 800490c:	dcf1      	bgt.n	80048f2 <_printf_float+0x3fa>
 800490e:	4653      	mov	r3, sl
 8004910:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004914:	e6e0      	b.n	80046d8 <_printf_float+0x1e0>
 8004916:	f04f 0800 	mov.w	r8, #0
 800491a:	f104 091a 	add.w	r9, r4, #26
 800491e:	e7f2      	b.n	8004906 <_printf_float+0x40e>
 8004920:	2301      	movs	r3, #1
 8004922:	4642      	mov	r2, r8
 8004924:	e7df      	b.n	80048e6 <_printf_float+0x3ee>
 8004926:	2301      	movs	r3, #1
 8004928:	464a      	mov	r2, r9
 800492a:	4631      	mov	r1, r6
 800492c:	4628      	mov	r0, r5
 800492e:	47b8      	blx	r7
 8004930:	3001      	adds	r0, #1
 8004932:	f43f ae3c 	beq.w	80045ae <_printf_float+0xb6>
 8004936:	f108 0801 	add.w	r8, r8, #1
 800493a:	68e3      	ldr	r3, [r4, #12]
 800493c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800493e:	1a5b      	subs	r3, r3, r1
 8004940:	4543      	cmp	r3, r8
 8004942:	dcf0      	bgt.n	8004926 <_printf_float+0x42e>
 8004944:	e6fd      	b.n	8004742 <_printf_float+0x24a>
 8004946:	f04f 0800 	mov.w	r8, #0
 800494a:	f104 0919 	add.w	r9, r4, #25
 800494e:	e7f4      	b.n	800493a <_printf_float+0x442>

08004950 <_printf_common>:
 8004950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004954:	4616      	mov	r6, r2
 8004956:	4699      	mov	r9, r3
 8004958:	688a      	ldr	r2, [r1, #8]
 800495a:	690b      	ldr	r3, [r1, #16]
 800495c:	4607      	mov	r7, r0
 800495e:	4293      	cmp	r3, r2
 8004960:	bfb8      	it	lt
 8004962:	4613      	movlt	r3, r2
 8004964:	6033      	str	r3, [r6, #0]
 8004966:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800496a:	460c      	mov	r4, r1
 800496c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004970:	b10a      	cbz	r2, 8004976 <_printf_common+0x26>
 8004972:	3301      	adds	r3, #1
 8004974:	6033      	str	r3, [r6, #0]
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	0699      	lsls	r1, r3, #26
 800497a:	bf42      	ittt	mi
 800497c:	6833      	ldrmi	r3, [r6, #0]
 800497e:	3302      	addmi	r3, #2
 8004980:	6033      	strmi	r3, [r6, #0]
 8004982:	6825      	ldr	r5, [r4, #0]
 8004984:	f015 0506 	ands.w	r5, r5, #6
 8004988:	d106      	bne.n	8004998 <_printf_common+0x48>
 800498a:	f104 0a19 	add.w	sl, r4, #25
 800498e:	68e3      	ldr	r3, [r4, #12]
 8004990:	6832      	ldr	r2, [r6, #0]
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	42ab      	cmp	r3, r5
 8004996:	dc28      	bgt.n	80049ea <_printf_common+0x9a>
 8004998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800499c:	1e13      	subs	r3, r2, #0
 800499e:	6822      	ldr	r2, [r4, #0]
 80049a0:	bf18      	it	ne
 80049a2:	2301      	movne	r3, #1
 80049a4:	0692      	lsls	r2, r2, #26
 80049a6:	d42d      	bmi.n	8004a04 <_printf_common+0xb4>
 80049a8:	4649      	mov	r1, r9
 80049aa:	4638      	mov	r0, r7
 80049ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049b0:	47c0      	blx	r8
 80049b2:	3001      	adds	r0, #1
 80049b4:	d020      	beq.n	80049f8 <_printf_common+0xa8>
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	68e5      	ldr	r5, [r4, #12]
 80049ba:	f003 0306 	and.w	r3, r3, #6
 80049be:	2b04      	cmp	r3, #4
 80049c0:	bf18      	it	ne
 80049c2:	2500      	movne	r5, #0
 80049c4:	6832      	ldr	r2, [r6, #0]
 80049c6:	f04f 0600 	mov.w	r6, #0
 80049ca:	68a3      	ldr	r3, [r4, #8]
 80049cc:	bf08      	it	eq
 80049ce:	1aad      	subeq	r5, r5, r2
 80049d0:	6922      	ldr	r2, [r4, #16]
 80049d2:	bf08      	it	eq
 80049d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049d8:	4293      	cmp	r3, r2
 80049da:	bfc4      	itt	gt
 80049dc:	1a9b      	subgt	r3, r3, r2
 80049de:	18ed      	addgt	r5, r5, r3
 80049e0:	341a      	adds	r4, #26
 80049e2:	42b5      	cmp	r5, r6
 80049e4:	d11a      	bne.n	8004a1c <_printf_common+0xcc>
 80049e6:	2000      	movs	r0, #0
 80049e8:	e008      	b.n	80049fc <_printf_common+0xac>
 80049ea:	2301      	movs	r3, #1
 80049ec:	4652      	mov	r2, sl
 80049ee:	4649      	mov	r1, r9
 80049f0:	4638      	mov	r0, r7
 80049f2:	47c0      	blx	r8
 80049f4:	3001      	adds	r0, #1
 80049f6:	d103      	bne.n	8004a00 <_printf_common+0xb0>
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a00:	3501      	adds	r5, #1
 8004a02:	e7c4      	b.n	800498e <_printf_common+0x3e>
 8004a04:	2030      	movs	r0, #48	; 0x30
 8004a06:	18e1      	adds	r1, r4, r3
 8004a08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a12:	4422      	add	r2, r4
 8004a14:	3302      	adds	r3, #2
 8004a16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a1a:	e7c5      	b.n	80049a8 <_printf_common+0x58>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	4622      	mov	r2, r4
 8004a20:	4649      	mov	r1, r9
 8004a22:	4638      	mov	r0, r7
 8004a24:	47c0      	blx	r8
 8004a26:	3001      	adds	r0, #1
 8004a28:	d0e6      	beq.n	80049f8 <_printf_common+0xa8>
 8004a2a:	3601      	adds	r6, #1
 8004a2c:	e7d9      	b.n	80049e2 <_printf_common+0x92>
	...

08004a30 <_printf_i>:
 8004a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a34:	7e0f      	ldrb	r7, [r1, #24]
 8004a36:	4691      	mov	r9, r2
 8004a38:	2f78      	cmp	r7, #120	; 0x78
 8004a3a:	4680      	mov	r8, r0
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	469a      	mov	sl, r3
 8004a40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a46:	d807      	bhi.n	8004a58 <_printf_i+0x28>
 8004a48:	2f62      	cmp	r7, #98	; 0x62
 8004a4a:	d80a      	bhi.n	8004a62 <_printf_i+0x32>
 8004a4c:	2f00      	cmp	r7, #0
 8004a4e:	f000 80d9 	beq.w	8004c04 <_printf_i+0x1d4>
 8004a52:	2f58      	cmp	r7, #88	; 0x58
 8004a54:	f000 80a4 	beq.w	8004ba0 <_printf_i+0x170>
 8004a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a60:	e03a      	b.n	8004ad8 <_printf_i+0xa8>
 8004a62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a66:	2b15      	cmp	r3, #21
 8004a68:	d8f6      	bhi.n	8004a58 <_printf_i+0x28>
 8004a6a:	a101      	add	r1, pc, #4	; (adr r1, 8004a70 <_printf_i+0x40>)
 8004a6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a70:	08004ac9 	.word	0x08004ac9
 8004a74:	08004add 	.word	0x08004add
 8004a78:	08004a59 	.word	0x08004a59
 8004a7c:	08004a59 	.word	0x08004a59
 8004a80:	08004a59 	.word	0x08004a59
 8004a84:	08004a59 	.word	0x08004a59
 8004a88:	08004add 	.word	0x08004add
 8004a8c:	08004a59 	.word	0x08004a59
 8004a90:	08004a59 	.word	0x08004a59
 8004a94:	08004a59 	.word	0x08004a59
 8004a98:	08004a59 	.word	0x08004a59
 8004a9c:	08004beb 	.word	0x08004beb
 8004aa0:	08004b0d 	.word	0x08004b0d
 8004aa4:	08004bcd 	.word	0x08004bcd
 8004aa8:	08004a59 	.word	0x08004a59
 8004aac:	08004a59 	.word	0x08004a59
 8004ab0:	08004c0d 	.word	0x08004c0d
 8004ab4:	08004a59 	.word	0x08004a59
 8004ab8:	08004b0d 	.word	0x08004b0d
 8004abc:	08004a59 	.word	0x08004a59
 8004ac0:	08004a59 	.word	0x08004a59
 8004ac4:	08004bd5 	.word	0x08004bd5
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	1d1a      	adds	r2, r3, #4
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	602a      	str	r2, [r5, #0]
 8004ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0a4      	b.n	8004c26 <_printf_i+0x1f6>
 8004adc:	6820      	ldr	r0, [r4, #0]
 8004ade:	6829      	ldr	r1, [r5, #0]
 8004ae0:	0606      	lsls	r6, r0, #24
 8004ae2:	f101 0304 	add.w	r3, r1, #4
 8004ae6:	d50a      	bpl.n	8004afe <_printf_i+0xce>
 8004ae8:	680e      	ldr	r6, [r1, #0]
 8004aea:	602b      	str	r3, [r5, #0]
 8004aec:	2e00      	cmp	r6, #0
 8004aee:	da03      	bge.n	8004af8 <_printf_i+0xc8>
 8004af0:	232d      	movs	r3, #45	; 0x2d
 8004af2:	4276      	negs	r6, r6
 8004af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004af8:	230a      	movs	r3, #10
 8004afa:	485e      	ldr	r0, [pc, #376]	; (8004c74 <_printf_i+0x244>)
 8004afc:	e019      	b.n	8004b32 <_printf_i+0x102>
 8004afe:	680e      	ldr	r6, [r1, #0]
 8004b00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b04:	602b      	str	r3, [r5, #0]
 8004b06:	bf18      	it	ne
 8004b08:	b236      	sxthne	r6, r6
 8004b0a:	e7ef      	b.n	8004aec <_printf_i+0xbc>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	6820      	ldr	r0, [r4, #0]
 8004b10:	1d19      	adds	r1, r3, #4
 8004b12:	6029      	str	r1, [r5, #0]
 8004b14:	0601      	lsls	r1, r0, #24
 8004b16:	d501      	bpl.n	8004b1c <_printf_i+0xec>
 8004b18:	681e      	ldr	r6, [r3, #0]
 8004b1a:	e002      	b.n	8004b22 <_printf_i+0xf2>
 8004b1c:	0646      	lsls	r6, r0, #25
 8004b1e:	d5fb      	bpl.n	8004b18 <_printf_i+0xe8>
 8004b20:	881e      	ldrh	r6, [r3, #0]
 8004b22:	2f6f      	cmp	r7, #111	; 0x6f
 8004b24:	bf0c      	ite	eq
 8004b26:	2308      	moveq	r3, #8
 8004b28:	230a      	movne	r3, #10
 8004b2a:	4852      	ldr	r0, [pc, #328]	; (8004c74 <_printf_i+0x244>)
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b32:	6865      	ldr	r5, [r4, #4]
 8004b34:	2d00      	cmp	r5, #0
 8004b36:	bfa8      	it	ge
 8004b38:	6821      	ldrge	r1, [r4, #0]
 8004b3a:	60a5      	str	r5, [r4, #8]
 8004b3c:	bfa4      	itt	ge
 8004b3e:	f021 0104 	bicge.w	r1, r1, #4
 8004b42:	6021      	strge	r1, [r4, #0]
 8004b44:	b90e      	cbnz	r6, 8004b4a <_printf_i+0x11a>
 8004b46:	2d00      	cmp	r5, #0
 8004b48:	d04d      	beq.n	8004be6 <_printf_i+0x1b6>
 8004b4a:	4615      	mov	r5, r2
 8004b4c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b50:	fb03 6711 	mls	r7, r3, r1, r6
 8004b54:	5dc7      	ldrb	r7, [r0, r7]
 8004b56:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b5a:	4637      	mov	r7, r6
 8004b5c:	42bb      	cmp	r3, r7
 8004b5e:	460e      	mov	r6, r1
 8004b60:	d9f4      	bls.n	8004b4c <_printf_i+0x11c>
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d10b      	bne.n	8004b7e <_printf_i+0x14e>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	07de      	lsls	r6, r3, #31
 8004b6a:	d508      	bpl.n	8004b7e <_printf_i+0x14e>
 8004b6c:	6923      	ldr	r3, [r4, #16]
 8004b6e:	6861      	ldr	r1, [r4, #4]
 8004b70:	4299      	cmp	r1, r3
 8004b72:	bfde      	ittt	le
 8004b74:	2330      	movle	r3, #48	; 0x30
 8004b76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b7a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b7e:	1b52      	subs	r2, r2, r5
 8004b80:	6122      	str	r2, [r4, #16]
 8004b82:	464b      	mov	r3, r9
 8004b84:	4621      	mov	r1, r4
 8004b86:	4640      	mov	r0, r8
 8004b88:	f8cd a000 	str.w	sl, [sp]
 8004b8c:	aa03      	add	r2, sp, #12
 8004b8e:	f7ff fedf 	bl	8004950 <_printf_common>
 8004b92:	3001      	adds	r0, #1
 8004b94:	d14c      	bne.n	8004c30 <_printf_i+0x200>
 8004b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b9a:	b004      	add	sp, #16
 8004b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba0:	4834      	ldr	r0, [pc, #208]	; (8004c74 <_printf_i+0x244>)
 8004ba2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ba6:	6829      	ldr	r1, [r5, #0]
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bae:	6029      	str	r1, [r5, #0]
 8004bb0:	061d      	lsls	r5, r3, #24
 8004bb2:	d514      	bpl.n	8004bde <_printf_i+0x1ae>
 8004bb4:	07df      	lsls	r7, r3, #31
 8004bb6:	bf44      	itt	mi
 8004bb8:	f043 0320 	orrmi.w	r3, r3, #32
 8004bbc:	6023      	strmi	r3, [r4, #0]
 8004bbe:	b91e      	cbnz	r6, 8004bc8 <_printf_i+0x198>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	f023 0320 	bic.w	r3, r3, #32
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	2310      	movs	r3, #16
 8004bca:	e7af      	b.n	8004b2c <_printf_i+0xfc>
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	f043 0320 	orr.w	r3, r3, #32
 8004bd2:	6023      	str	r3, [r4, #0]
 8004bd4:	2378      	movs	r3, #120	; 0x78
 8004bd6:	4828      	ldr	r0, [pc, #160]	; (8004c78 <_printf_i+0x248>)
 8004bd8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bdc:	e7e3      	b.n	8004ba6 <_printf_i+0x176>
 8004bde:	0659      	lsls	r1, r3, #25
 8004be0:	bf48      	it	mi
 8004be2:	b2b6      	uxthmi	r6, r6
 8004be4:	e7e6      	b.n	8004bb4 <_printf_i+0x184>
 8004be6:	4615      	mov	r5, r2
 8004be8:	e7bb      	b.n	8004b62 <_printf_i+0x132>
 8004bea:	682b      	ldr	r3, [r5, #0]
 8004bec:	6826      	ldr	r6, [r4, #0]
 8004bee:	1d18      	adds	r0, r3, #4
 8004bf0:	6961      	ldr	r1, [r4, #20]
 8004bf2:	6028      	str	r0, [r5, #0]
 8004bf4:	0635      	lsls	r5, r6, #24
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	d501      	bpl.n	8004bfe <_printf_i+0x1ce>
 8004bfa:	6019      	str	r1, [r3, #0]
 8004bfc:	e002      	b.n	8004c04 <_printf_i+0x1d4>
 8004bfe:	0670      	lsls	r0, r6, #25
 8004c00:	d5fb      	bpl.n	8004bfa <_printf_i+0x1ca>
 8004c02:	8019      	strh	r1, [r3, #0]
 8004c04:	2300      	movs	r3, #0
 8004c06:	4615      	mov	r5, r2
 8004c08:	6123      	str	r3, [r4, #16]
 8004c0a:	e7ba      	b.n	8004b82 <_printf_i+0x152>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	2100      	movs	r1, #0
 8004c10:	1d1a      	adds	r2, r3, #4
 8004c12:	602a      	str	r2, [r5, #0]
 8004c14:	681d      	ldr	r5, [r3, #0]
 8004c16:	6862      	ldr	r2, [r4, #4]
 8004c18:	4628      	mov	r0, r5
 8004c1a:	f000 feb7 	bl	800598c <memchr>
 8004c1e:	b108      	cbz	r0, 8004c24 <_printf_i+0x1f4>
 8004c20:	1b40      	subs	r0, r0, r5
 8004c22:	6060      	str	r0, [r4, #4]
 8004c24:	6863      	ldr	r3, [r4, #4]
 8004c26:	6123      	str	r3, [r4, #16]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c2e:	e7a8      	b.n	8004b82 <_printf_i+0x152>
 8004c30:	462a      	mov	r2, r5
 8004c32:	4649      	mov	r1, r9
 8004c34:	4640      	mov	r0, r8
 8004c36:	6923      	ldr	r3, [r4, #16]
 8004c38:	47d0      	blx	sl
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	d0ab      	beq.n	8004b96 <_printf_i+0x166>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	079b      	lsls	r3, r3, #30
 8004c42:	d413      	bmi.n	8004c6c <_printf_i+0x23c>
 8004c44:	68e0      	ldr	r0, [r4, #12]
 8004c46:	9b03      	ldr	r3, [sp, #12]
 8004c48:	4298      	cmp	r0, r3
 8004c4a:	bfb8      	it	lt
 8004c4c:	4618      	movlt	r0, r3
 8004c4e:	e7a4      	b.n	8004b9a <_printf_i+0x16a>
 8004c50:	2301      	movs	r3, #1
 8004c52:	4632      	mov	r2, r6
 8004c54:	4649      	mov	r1, r9
 8004c56:	4640      	mov	r0, r8
 8004c58:	47d0      	blx	sl
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	d09b      	beq.n	8004b96 <_printf_i+0x166>
 8004c5e:	3501      	adds	r5, #1
 8004c60:	68e3      	ldr	r3, [r4, #12]
 8004c62:	9903      	ldr	r1, [sp, #12]
 8004c64:	1a5b      	subs	r3, r3, r1
 8004c66:	42ab      	cmp	r3, r5
 8004c68:	dcf2      	bgt.n	8004c50 <_printf_i+0x220>
 8004c6a:	e7eb      	b.n	8004c44 <_printf_i+0x214>
 8004c6c:	2500      	movs	r5, #0
 8004c6e:	f104 0619 	add.w	r6, r4, #25
 8004c72:	e7f5      	b.n	8004c60 <_printf_i+0x230>
 8004c74:	08006e66 	.word	0x08006e66
 8004c78:	08006e77 	.word	0x08006e77

08004c7c <quorem>:
 8004c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c80:	6903      	ldr	r3, [r0, #16]
 8004c82:	690c      	ldr	r4, [r1, #16]
 8004c84:	4607      	mov	r7, r0
 8004c86:	42a3      	cmp	r3, r4
 8004c88:	f2c0 8082 	blt.w	8004d90 <quorem+0x114>
 8004c8c:	3c01      	subs	r4, #1
 8004c8e:	f100 0514 	add.w	r5, r0, #20
 8004c92:	f101 0814 	add.w	r8, r1, #20
 8004c96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ca0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004cac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004cb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004cb4:	d331      	bcc.n	8004d1a <quorem+0x9e>
 8004cb6:	f04f 0e00 	mov.w	lr, #0
 8004cba:	4640      	mov	r0, r8
 8004cbc:	46ac      	mov	ip, r5
 8004cbe:	46f2      	mov	sl, lr
 8004cc0:	f850 2b04 	ldr.w	r2, [r0], #4
 8004cc4:	b293      	uxth	r3, r2
 8004cc6:	fb06 e303 	mla	r3, r6, r3, lr
 8004cca:	0c12      	lsrs	r2, r2, #16
 8004ccc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	fb06 e202 	mla	r2, r6, r2, lr
 8004cd6:	ebaa 0303 	sub.w	r3, sl, r3
 8004cda:	f8dc a000 	ldr.w	sl, [ip]
 8004cde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ce2:	fa1f fa8a 	uxth.w	sl, sl
 8004ce6:	4453      	add	r3, sl
 8004ce8:	f8dc a000 	ldr.w	sl, [ip]
 8004cec:	b292      	uxth	r2, r2
 8004cee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004cf2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cfc:	4581      	cmp	r9, r0
 8004cfe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d02:	f84c 3b04 	str.w	r3, [ip], #4
 8004d06:	d2db      	bcs.n	8004cc0 <quorem+0x44>
 8004d08:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d0c:	b92b      	cbnz	r3, 8004d1a <quorem+0x9e>
 8004d0e:	9b01      	ldr	r3, [sp, #4]
 8004d10:	3b04      	subs	r3, #4
 8004d12:	429d      	cmp	r5, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	d32f      	bcc.n	8004d78 <quorem+0xfc>
 8004d18:	613c      	str	r4, [r7, #16]
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	f001 f8d0 	bl	8005ec0 <__mcmp>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	db25      	blt.n	8004d70 <quorem+0xf4>
 8004d24:	4628      	mov	r0, r5
 8004d26:	f04f 0c00 	mov.w	ip, #0
 8004d2a:	3601      	adds	r6, #1
 8004d2c:	f858 1b04 	ldr.w	r1, [r8], #4
 8004d30:	f8d0 e000 	ldr.w	lr, [r0]
 8004d34:	b28b      	uxth	r3, r1
 8004d36:	ebac 0303 	sub.w	r3, ip, r3
 8004d3a:	fa1f f28e 	uxth.w	r2, lr
 8004d3e:	4413      	add	r3, r2
 8004d40:	0c0a      	lsrs	r2, r1, #16
 8004d42:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004d46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d50:	45c1      	cmp	r9, r8
 8004d52:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d56:	f840 3b04 	str.w	r3, [r0], #4
 8004d5a:	d2e7      	bcs.n	8004d2c <quorem+0xb0>
 8004d5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d64:	b922      	cbnz	r2, 8004d70 <quorem+0xf4>
 8004d66:	3b04      	subs	r3, #4
 8004d68:	429d      	cmp	r5, r3
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	d30a      	bcc.n	8004d84 <quorem+0x108>
 8004d6e:	613c      	str	r4, [r7, #16]
 8004d70:	4630      	mov	r0, r6
 8004d72:	b003      	add	sp, #12
 8004d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	3b04      	subs	r3, #4
 8004d7c:	2a00      	cmp	r2, #0
 8004d7e:	d1cb      	bne.n	8004d18 <quorem+0x9c>
 8004d80:	3c01      	subs	r4, #1
 8004d82:	e7c6      	b.n	8004d12 <quorem+0x96>
 8004d84:	6812      	ldr	r2, [r2, #0]
 8004d86:	3b04      	subs	r3, #4
 8004d88:	2a00      	cmp	r2, #0
 8004d8a:	d1f0      	bne.n	8004d6e <quorem+0xf2>
 8004d8c:	3c01      	subs	r4, #1
 8004d8e:	e7eb      	b.n	8004d68 <quorem+0xec>
 8004d90:	2000      	movs	r0, #0
 8004d92:	e7ee      	b.n	8004d72 <quorem+0xf6>
 8004d94:	0000      	movs	r0, r0
	...

08004d98 <_dtoa_r>:
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	4616      	mov	r6, r2
 8004d9e:	461f      	mov	r7, r3
 8004da0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004da2:	b099      	sub	sp, #100	; 0x64
 8004da4:	4605      	mov	r5, r0
 8004da6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004daa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004dae:	b974      	cbnz	r4, 8004dce <_dtoa_r+0x36>
 8004db0:	2010      	movs	r0, #16
 8004db2:	f000 fde3 	bl	800597c <malloc>
 8004db6:	4602      	mov	r2, r0
 8004db8:	6268      	str	r0, [r5, #36]	; 0x24
 8004dba:	b920      	cbnz	r0, 8004dc6 <_dtoa_r+0x2e>
 8004dbc:	21ea      	movs	r1, #234	; 0xea
 8004dbe:	4ba8      	ldr	r3, [pc, #672]	; (8005060 <_dtoa_r+0x2c8>)
 8004dc0:	48a8      	ldr	r0, [pc, #672]	; (8005064 <_dtoa_r+0x2cc>)
 8004dc2:	f001 fa81 	bl	80062c8 <__assert_func>
 8004dc6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004dca:	6004      	str	r4, [r0, #0]
 8004dcc:	60c4      	str	r4, [r0, #12]
 8004dce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004dd0:	6819      	ldr	r1, [r3, #0]
 8004dd2:	b151      	cbz	r1, 8004dea <_dtoa_r+0x52>
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4093      	lsls	r3, r2
 8004dda:	604a      	str	r2, [r1, #4]
 8004ddc:	608b      	str	r3, [r1, #8]
 8004dde:	4628      	mov	r0, r5
 8004de0:	f000 fe30 	bl	8005a44 <_Bfree>
 8004de4:	2200      	movs	r2, #0
 8004de6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	1e3b      	subs	r3, r7, #0
 8004dec:	bfaf      	iteee	ge
 8004dee:	2300      	movge	r3, #0
 8004df0:	2201      	movlt	r2, #1
 8004df2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004df6:	9305      	strlt	r3, [sp, #20]
 8004df8:	bfa8      	it	ge
 8004dfa:	f8c8 3000 	strge.w	r3, [r8]
 8004dfe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004e02:	4b99      	ldr	r3, [pc, #612]	; (8005068 <_dtoa_r+0x2d0>)
 8004e04:	bfb8      	it	lt
 8004e06:	f8c8 2000 	strlt.w	r2, [r8]
 8004e0a:	ea33 0309 	bics.w	r3, r3, r9
 8004e0e:	d119      	bne.n	8004e44 <_dtoa_r+0xac>
 8004e10:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e1c:	4333      	orrs	r3, r6
 8004e1e:	f000 857f 	beq.w	8005920 <_dtoa_r+0xb88>
 8004e22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e24:	b953      	cbnz	r3, 8004e3c <_dtoa_r+0xa4>
 8004e26:	4b91      	ldr	r3, [pc, #580]	; (800506c <_dtoa_r+0x2d4>)
 8004e28:	e022      	b.n	8004e70 <_dtoa_r+0xd8>
 8004e2a:	4b91      	ldr	r3, [pc, #580]	; (8005070 <_dtoa_r+0x2d8>)
 8004e2c:	9303      	str	r3, [sp, #12]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	9803      	ldr	r0, [sp, #12]
 8004e36:	b019      	add	sp, #100	; 0x64
 8004e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3c:	4b8b      	ldr	r3, [pc, #556]	; (800506c <_dtoa_r+0x2d4>)
 8004e3e:	9303      	str	r3, [sp, #12]
 8004e40:	3303      	adds	r3, #3
 8004e42:	e7f5      	b.n	8004e30 <_dtoa_r+0x98>
 8004e44:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e48:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004e4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e50:	2200      	movs	r2, #0
 8004e52:	2300      	movs	r3, #0
 8004e54:	f7fb fe08 	bl	8000a68 <__aeabi_dcmpeq>
 8004e58:	4680      	mov	r8, r0
 8004e5a:	b158      	cbz	r0, 8004e74 <_dtoa_r+0xdc>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8558 	beq.w	800591a <_dtoa_r+0xb82>
 8004e6a:	4882      	ldr	r0, [pc, #520]	; (8005074 <_dtoa_r+0x2dc>)
 8004e6c:	6018      	str	r0, [r3, #0]
 8004e6e:	1e43      	subs	r3, r0, #1
 8004e70:	9303      	str	r3, [sp, #12]
 8004e72:	e7df      	b.n	8004e34 <_dtoa_r+0x9c>
 8004e74:	ab16      	add	r3, sp, #88	; 0x58
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	ab17      	add	r3, sp, #92	; 0x5c
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004e82:	f001 f8c5 	bl	8006010 <__d2b>
 8004e86:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004e8a:	4683      	mov	fp, r0
 8004e8c:	2c00      	cmp	r4, #0
 8004e8e:	d07f      	beq.n	8004f90 <_dtoa_r+0x1f8>
 8004e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e96:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004e9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e9e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004ea2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004ea6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004eaa:	2200      	movs	r2, #0
 8004eac:	4b72      	ldr	r3, [pc, #456]	; (8005078 <_dtoa_r+0x2e0>)
 8004eae:	f7fb f9bb 	bl	8000228 <__aeabi_dsub>
 8004eb2:	a365      	add	r3, pc, #404	; (adr r3, 8005048 <_dtoa_r+0x2b0>)
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f7fb fb6e 	bl	8000598 <__aeabi_dmul>
 8004ebc:	a364      	add	r3, pc, #400	; (adr r3, 8005050 <_dtoa_r+0x2b8>)
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	f7fb f9b3 	bl	800022c <__adddf3>
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	4620      	mov	r0, r4
 8004eca:	460f      	mov	r7, r1
 8004ecc:	f7fb fafa 	bl	80004c4 <__aeabi_i2d>
 8004ed0:	a361      	add	r3, pc, #388	; (adr r3, 8005058 <_dtoa_r+0x2c0>)
 8004ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed6:	f7fb fb5f 	bl	8000598 <__aeabi_dmul>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4630      	mov	r0, r6
 8004ee0:	4639      	mov	r1, r7
 8004ee2:	f7fb f9a3 	bl	800022c <__adddf3>
 8004ee6:	4606      	mov	r6, r0
 8004ee8:	460f      	mov	r7, r1
 8004eea:	f7fb fe05 	bl	8000af8 <__aeabi_d2iz>
 8004eee:	2200      	movs	r2, #0
 8004ef0:	4682      	mov	sl, r0
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	4639      	mov	r1, r7
 8004ef8:	f7fb fdc0 	bl	8000a7c <__aeabi_dcmplt>
 8004efc:	b148      	cbz	r0, 8004f12 <_dtoa_r+0x17a>
 8004efe:	4650      	mov	r0, sl
 8004f00:	f7fb fae0 	bl	80004c4 <__aeabi_i2d>
 8004f04:	4632      	mov	r2, r6
 8004f06:	463b      	mov	r3, r7
 8004f08:	f7fb fdae 	bl	8000a68 <__aeabi_dcmpeq>
 8004f0c:	b908      	cbnz	r0, 8004f12 <_dtoa_r+0x17a>
 8004f0e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004f12:	f1ba 0f16 	cmp.w	sl, #22
 8004f16:	d858      	bhi.n	8004fca <_dtoa_r+0x232>
 8004f18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f1c:	4b57      	ldr	r3, [pc, #348]	; (800507c <_dtoa_r+0x2e4>)
 8004f1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	f7fb fda9 	bl	8000a7c <__aeabi_dcmplt>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d04f      	beq.n	8004fce <_dtoa_r+0x236>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004f34:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f38:	1b1c      	subs	r4, r3, r4
 8004f3a:	1e63      	subs	r3, r4, #1
 8004f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3e:	bf49      	itett	mi
 8004f40:	f1c4 0301 	rsbmi	r3, r4, #1
 8004f44:	2300      	movpl	r3, #0
 8004f46:	9306      	strmi	r3, [sp, #24]
 8004f48:	2300      	movmi	r3, #0
 8004f4a:	bf54      	ite	pl
 8004f4c:	9306      	strpl	r3, [sp, #24]
 8004f4e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004f50:	f1ba 0f00 	cmp.w	sl, #0
 8004f54:	db3d      	blt.n	8004fd2 <_dtoa_r+0x23a>
 8004f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f58:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004f5c:	4453      	add	r3, sl
 8004f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f60:	2300      	movs	r3, #0
 8004f62:	930a      	str	r3, [sp, #40]	; 0x28
 8004f64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f66:	2b09      	cmp	r3, #9
 8004f68:	f200 808c 	bhi.w	8005084 <_dtoa_r+0x2ec>
 8004f6c:	2b05      	cmp	r3, #5
 8004f6e:	bfc4      	itt	gt
 8004f70:	3b04      	subgt	r3, #4
 8004f72:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004f74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f76:	bfc8      	it	gt
 8004f78:	2400      	movgt	r4, #0
 8004f7a:	f1a3 0302 	sub.w	r3, r3, #2
 8004f7e:	bfd8      	it	le
 8004f80:	2401      	movle	r4, #1
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	f200 808a 	bhi.w	800509c <_dtoa_r+0x304>
 8004f88:	e8df f003 	tbb	[pc, r3]
 8004f8c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004f90:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004f94:	441c      	add	r4, r3
 8004f96:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	bfc3      	ittte	gt
 8004f9e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004fa2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004fa6:	fa09 f303 	lslgt.w	r3, r9, r3
 8004faa:	f1c3 0320 	rsble	r3, r3, #32
 8004fae:	bfc6      	itte	gt
 8004fb0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004fb4:	4318      	orrgt	r0, r3
 8004fb6:	fa06 f003 	lslle.w	r0, r6, r3
 8004fba:	f7fb fa73 	bl	80004a4 <__aeabi_ui2d>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004fc4:	3c01      	subs	r4, #1
 8004fc6:	9313      	str	r3, [sp, #76]	; 0x4c
 8004fc8:	e76f      	b.n	8004eaa <_dtoa_r+0x112>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e7b2      	b.n	8004f34 <_dtoa_r+0x19c>
 8004fce:	900f      	str	r0, [sp, #60]	; 0x3c
 8004fd0:	e7b1      	b.n	8004f36 <_dtoa_r+0x19e>
 8004fd2:	9b06      	ldr	r3, [sp, #24]
 8004fd4:	eba3 030a 	sub.w	r3, r3, sl
 8004fd8:	9306      	str	r3, [sp, #24]
 8004fda:	f1ca 0300 	rsb	r3, sl, #0
 8004fde:	930a      	str	r3, [sp, #40]	; 0x28
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	930e      	str	r3, [sp, #56]	; 0x38
 8004fe4:	e7be      	b.n	8004f64 <_dtoa_r+0x1cc>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	dc58      	bgt.n	80050a2 <_dtoa_r+0x30a>
 8004ff0:	f04f 0901 	mov.w	r9, #1
 8004ff4:	464b      	mov	r3, r9
 8004ff6:	f8cd 9020 	str.w	r9, [sp, #32]
 8004ffa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004ffe:	2200      	movs	r2, #0
 8005000:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005002:	6042      	str	r2, [r0, #4]
 8005004:	2204      	movs	r2, #4
 8005006:	f102 0614 	add.w	r6, r2, #20
 800500a:	429e      	cmp	r6, r3
 800500c:	6841      	ldr	r1, [r0, #4]
 800500e:	d94e      	bls.n	80050ae <_dtoa_r+0x316>
 8005010:	4628      	mov	r0, r5
 8005012:	f000 fcd7 	bl	80059c4 <_Balloc>
 8005016:	9003      	str	r0, [sp, #12]
 8005018:	2800      	cmp	r0, #0
 800501a:	d14c      	bne.n	80050b6 <_dtoa_r+0x31e>
 800501c:	4602      	mov	r2, r0
 800501e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005022:	4b17      	ldr	r3, [pc, #92]	; (8005080 <_dtoa_r+0x2e8>)
 8005024:	e6cc      	b.n	8004dc0 <_dtoa_r+0x28>
 8005026:	2301      	movs	r3, #1
 8005028:	e7de      	b.n	8004fe8 <_dtoa_r+0x250>
 800502a:	2300      	movs	r3, #0
 800502c:	930b      	str	r3, [sp, #44]	; 0x2c
 800502e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005030:	eb0a 0903 	add.w	r9, sl, r3
 8005034:	f109 0301 	add.w	r3, r9, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	9308      	str	r3, [sp, #32]
 800503c:	bfb8      	it	lt
 800503e:	2301      	movlt	r3, #1
 8005040:	e7dd      	b.n	8004ffe <_dtoa_r+0x266>
 8005042:	2301      	movs	r3, #1
 8005044:	e7f2      	b.n	800502c <_dtoa_r+0x294>
 8005046:	bf00      	nop
 8005048:	636f4361 	.word	0x636f4361
 800504c:	3fd287a7 	.word	0x3fd287a7
 8005050:	8b60c8b3 	.word	0x8b60c8b3
 8005054:	3fc68a28 	.word	0x3fc68a28
 8005058:	509f79fb 	.word	0x509f79fb
 800505c:	3fd34413 	.word	0x3fd34413
 8005060:	08006e95 	.word	0x08006e95
 8005064:	08006eac 	.word	0x08006eac
 8005068:	7ff00000 	.word	0x7ff00000
 800506c:	08006e91 	.word	0x08006e91
 8005070:	08006e88 	.word	0x08006e88
 8005074:	08006e65 	.word	0x08006e65
 8005078:	3ff80000 	.word	0x3ff80000
 800507c:	08006fa0 	.word	0x08006fa0
 8005080:	08006f07 	.word	0x08006f07
 8005084:	2401      	movs	r4, #1
 8005086:	2300      	movs	r3, #0
 8005088:	940b      	str	r4, [sp, #44]	; 0x2c
 800508a:	9322      	str	r3, [sp, #136]	; 0x88
 800508c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005090:	2200      	movs	r2, #0
 8005092:	2312      	movs	r3, #18
 8005094:	f8cd 9020 	str.w	r9, [sp, #32]
 8005098:	9223      	str	r2, [sp, #140]	; 0x8c
 800509a:	e7b0      	b.n	8004ffe <_dtoa_r+0x266>
 800509c:	2301      	movs	r3, #1
 800509e:	930b      	str	r3, [sp, #44]	; 0x2c
 80050a0:	e7f4      	b.n	800508c <_dtoa_r+0x2f4>
 80050a2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80050a6:	464b      	mov	r3, r9
 80050a8:	f8cd 9020 	str.w	r9, [sp, #32]
 80050ac:	e7a7      	b.n	8004ffe <_dtoa_r+0x266>
 80050ae:	3101      	adds	r1, #1
 80050b0:	6041      	str	r1, [r0, #4]
 80050b2:	0052      	lsls	r2, r2, #1
 80050b4:	e7a7      	b.n	8005006 <_dtoa_r+0x26e>
 80050b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80050b8:	9a03      	ldr	r2, [sp, #12]
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	9b08      	ldr	r3, [sp, #32]
 80050be:	2b0e      	cmp	r3, #14
 80050c0:	f200 80a8 	bhi.w	8005214 <_dtoa_r+0x47c>
 80050c4:	2c00      	cmp	r4, #0
 80050c6:	f000 80a5 	beq.w	8005214 <_dtoa_r+0x47c>
 80050ca:	f1ba 0f00 	cmp.w	sl, #0
 80050ce:	dd34      	ble.n	800513a <_dtoa_r+0x3a2>
 80050d0:	4a9a      	ldr	r2, [pc, #616]	; (800533c <_dtoa_r+0x5a4>)
 80050d2:	f00a 030f 	and.w	r3, sl, #15
 80050d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80050da:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80050de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80050e6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80050ea:	d016      	beq.n	800511a <_dtoa_r+0x382>
 80050ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050f0:	4b93      	ldr	r3, [pc, #588]	; (8005340 <_dtoa_r+0x5a8>)
 80050f2:	2703      	movs	r7, #3
 80050f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050f8:	f7fb fb78 	bl	80007ec <__aeabi_ddiv>
 80050fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005100:	f004 040f 	and.w	r4, r4, #15
 8005104:	4e8e      	ldr	r6, [pc, #568]	; (8005340 <_dtoa_r+0x5a8>)
 8005106:	b954      	cbnz	r4, 800511e <_dtoa_r+0x386>
 8005108:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800510c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005110:	f7fb fb6c 	bl	80007ec <__aeabi_ddiv>
 8005114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005118:	e029      	b.n	800516e <_dtoa_r+0x3d6>
 800511a:	2702      	movs	r7, #2
 800511c:	e7f2      	b.n	8005104 <_dtoa_r+0x36c>
 800511e:	07e1      	lsls	r1, r4, #31
 8005120:	d508      	bpl.n	8005134 <_dtoa_r+0x39c>
 8005122:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005126:	e9d6 2300 	ldrd	r2, r3, [r6]
 800512a:	f7fb fa35 	bl	8000598 <__aeabi_dmul>
 800512e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005132:	3701      	adds	r7, #1
 8005134:	1064      	asrs	r4, r4, #1
 8005136:	3608      	adds	r6, #8
 8005138:	e7e5      	b.n	8005106 <_dtoa_r+0x36e>
 800513a:	f000 80a5 	beq.w	8005288 <_dtoa_r+0x4f0>
 800513e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005142:	f1ca 0400 	rsb	r4, sl, #0
 8005146:	4b7d      	ldr	r3, [pc, #500]	; (800533c <_dtoa_r+0x5a4>)
 8005148:	f004 020f 	and.w	r2, r4, #15
 800514c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	f7fb fa20 	bl	8000598 <__aeabi_dmul>
 8005158:	2702      	movs	r7, #2
 800515a:	2300      	movs	r3, #0
 800515c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005160:	4e77      	ldr	r6, [pc, #476]	; (8005340 <_dtoa_r+0x5a8>)
 8005162:	1124      	asrs	r4, r4, #4
 8005164:	2c00      	cmp	r4, #0
 8005166:	f040 8084 	bne.w	8005272 <_dtoa_r+0x4da>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1d2      	bne.n	8005114 <_dtoa_r+0x37c>
 800516e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 808b 	beq.w	800528c <_dtoa_r+0x4f4>
 8005176:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800517a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800517e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005182:	2200      	movs	r2, #0
 8005184:	4b6f      	ldr	r3, [pc, #444]	; (8005344 <_dtoa_r+0x5ac>)
 8005186:	f7fb fc79 	bl	8000a7c <__aeabi_dcmplt>
 800518a:	2800      	cmp	r0, #0
 800518c:	d07e      	beq.n	800528c <_dtoa_r+0x4f4>
 800518e:	9b08      	ldr	r3, [sp, #32]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d07b      	beq.n	800528c <_dtoa_r+0x4f4>
 8005194:	f1b9 0f00 	cmp.w	r9, #0
 8005198:	dd38      	ble.n	800520c <_dtoa_r+0x474>
 800519a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800519e:	2200      	movs	r2, #0
 80051a0:	4b69      	ldr	r3, [pc, #420]	; (8005348 <_dtoa_r+0x5b0>)
 80051a2:	f7fb f9f9 	bl	8000598 <__aeabi_dmul>
 80051a6:	464c      	mov	r4, r9
 80051a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051ac:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80051b0:	3701      	adds	r7, #1
 80051b2:	4638      	mov	r0, r7
 80051b4:	f7fb f986 	bl	80004c4 <__aeabi_i2d>
 80051b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051bc:	f7fb f9ec 	bl	8000598 <__aeabi_dmul>
 80051c0:	2200      	movs	r2, #0
 80051c2:	4b62      	ldr	r3, [pc, #392]	; (800534c <_dtoa_r+0x5b4>)
 80051c4:	f7fb f832 	bl	800022c <__adddf3>
 80051c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80051cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051d0:	9611      	str	r6, [sp, #68]	; 0x44
 80051d2:	2c00      	cmp	r4, #0
 80051d4:	d15d      	bne.n	8005292 <_dtoa_r+0x4fa>
 80051d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051da:	2200      	movs	r2, #0
 80051dc:	4b5c      	ldr	r3, [pc, #368]	; (8005350 <_dtoa_r+0x5b8>)
 80051de:	f7fb f823 	bl	8000228 <__aeabi_dsub>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051ea:	4633      	mov	r3, r6
 80051ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051ee:	f7fb fc63 	bl	8000ab8 <__aeabi_dcmpgt>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	f040 829c 	bne.w	8005730 <_dtoa_r+0x998>
 80051f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051fe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005202:	f7fb fc3b 	bl	8000a7c <__aeabi_dcmplt>
 8005206:	2800      	cmp	r0, #0
 8005208:	f040 8290 	bne.w	800572c <_dtoa_r+0x994>
 800520c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005210:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005214:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005216:	2b00      	cmp	r3, #0
 8005218:	f2c0 8152 	blt.w	80054c0 <_dtoa_r+0x728>
 800521c:	f1ba 0f0e 	cmp.w	sl, #14
 8005220:	f300 814e 	bgt.w	80054c0 <_dtoa_r+0x728>
 8005224:	4b45      	ldr	r3, [pc, #276]	; (800533c <_dtoa_r+0x5a4>)
 8005226:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800522a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800522e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005232:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005234:	2b00      	cmp	r3, #0
 8005236:	f280 80db 	bge.w	80053f0 <_dtoa_r+0x658>
 800523a:	9b08      	ldr	r3, [sp, #32]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f300 80d7 	bgt.w	80053f0 <_dtoa_r+0x658>
 8005242:	f040 8272 	bne.w	800572a <_dtoa_r+0x992>
 8005246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800524a:	2200      	movs	r2, #0
 800524c:	4b40      	ldr	r3, [pc, #256]	; (8005350 <_dtoa_r+0x5b8>)
 800524e:	f7fb f9a3 	bl	8000598 <__aeabi_dmul>
 8005252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005256:	f7fb fc25 	bl	8000aa4 <__aeabi_dcmpge>
 800525a:	9c08      	ldr	r4, [sp, #32]
 800525c:	4626      	mov	r6, r4
 800525e:	2800      	cmp	r0, #0
 8005260:	f040 8248 	bne.w	80056f4 <_dtoa_r+0x95c>
 8005264:	2331      	movs	r3, #49	; 0x31
 8005266:	9f03      	ldr	r7, [sp, #12]
 8005268:	f10a 0a01 	add.w	sl, sl, #1
 800526c:	f807 3b01 	strb.w	r3, [r7], #1
 8005270:	e244      	b.n	80056fc <_dtoa_r+0x964>
 8005272:	07e2      	lsls	r2, r4, #31
 8005274:	d505      	bpl.n	8005282 <_dtoa_r+0x4ea>
 8005276:	e9d6 2300 	ldrd	r2, r3, [r6]
 800527a:	f7fb f98d 	bl	8000598 <__aeabi_dmul>
 800527e:	2301      	movs	r3, #1
 8005280:	3701      	adds	r7, #1
 8005282:	1064      	asrs	r4, r4, #1
 8005284:	3608      	adds	r6, #8
 8005286:	e76d      	b.n	8005164 <_dtoa_r+0x3cc>
 8005288:	2702      	movs	r7, #2
 800528a:	e770      	b.n	800516e <_dtoa_r+0x3d6>
 800528c:	46d0      	mov	r8, sl
 800528e:	9c08      	ldr	r4, [sp, #32]
 8005290:	e78f      	b.n	80051b2 <_dtoa_r+0x41a>
 8005292:	9903      	ldr	r1, [sp, #12]
 8005294:	4b29      	ldr	r3, [pc, #164]	; (800533c <_dtoa_r+0x5a4>)
 8005296:	4421      	add	r1, r4
 8005298:	9112      	str	r1, [sp, #72]	; 0x48
 800529a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800529c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80052a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052a8:	2900      	cmp	r1, #0
 80052aa:	d055      	beq.n	8005358 <_dtoa_r+0x5c0>
 80052ac:	2000      	movs	r0, #0
 80052ae:	4929      	ldr	r1, [pc, #164]	; (8005354 <_dtoa_r+0x5bc>)
 80052b0:	f7fb fa9c 	bl	80007ec <__aeabi_ddiv>
 80052b4:	463b      	mov	r3, r7
 80052b6:	4632      	mov	r2, r6
 80052b8:	f7fa ffb6 	bl	8000228 <__aeabi_dsub>
 80052bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052c0:	9f03      	ldr	r7, [sp, #12]
 80052c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052c6:	f7fb fc17 	bl	8000af8 <__aeabi_d2iz>
 80052ca:	4604      	mov	r4, r0
 80052cc:	f7fb f8fa 	bl	80004c4 <__aeabi_i2d>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052d8:	f7fa ffa6 	bl	8000228 <__aeabi_dsub>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	3430      	adds	r4, #48	; 0x30
 80052e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052ea:	f807 4b01 	strb.w	r4, [r7], #1
 80052ee:	f7fb fbc5 	bl	8000a7c <__aeabi_dcmplt>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d174      	bne.n	80053e0 <_dtoa_r+0x648>
 80052f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052fa:	2000      	movs	r0, #0
 80052fc:	4911      	ldr	r1, [pc, #68]	; (8005344 <_dtoa_r+0x5ac>)
 80052fe:	f7fa ff93 	bl	8000228 <__aeabi_dsub>
 8005302:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005306:	f7fb fbb9 	bl	8000a7c <__aeabi_dcmplt>
 800530a:	2800      	cmp	r0, #0
 800530c:	f040 80b7 	bne.w	800547e <_dtoa_r+0x6e6>
 8005310:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005312:	429f      	cmp	r7, r3
 8005314:	f43f af7a 	beq.w	800520c <_dtoa_r+0x474>
 8005318:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800531c:	2200      	movs	r2, #0
 800531e:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <_dtoa_r+0x5b0>)
 8005320:	f7fb f93a 	bl	8000598 <__aeabi_dmul>
 8005324:	2200      	movs	r2, #0
 8005326:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800532a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800532e:	4b06      	ldr	r3, [pc, #24]	; (8005348 <_dtoa_r+0x5b0>)
 8005330:	f7fb f932 	bl	8000598 <__aeabi_dmul>
 8005334:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005338:	e7c3      	b.n	80052c2 <_dtoa_r+0x52a>
 800533a:	bf00      	nop
 800533c:	08006fa0 	.word	0x08006fa0
 8005340:	08006f78 	.word	0x08006f78
 8005344:	3ff00000 	.word	0x3ff00000
 8005348:	40240000 	.word	0x40240000
 800534c:	401c0000 	.word	0x401c0000
 8005350:	40140000 	.word	0x40140000
 8005354:	3fe00000 	.word	0x3fe00000
 8005358:	4630      	mov	r0, r6
 800535a:	4639      	mov	r1, r7
 800535c:	f7fb f91c 	bl	8000598 <__aeabi_dmul>
 8005360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005362:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005366:	9c03      	ldr	r4, [sp, #12]
 8005368:	9314      	str	r3, [sp, #80]	; 0x50
 800536a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800536e:	f7fb fbc3 	bl	8000af8 <__aeabi_d2iz>
 8005372:	9015      	str	r0, [sp, #84]	; 0x54
 8005374:	f7fb f8a6 	bl	80004c4 <__aeabi_i2d>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005380:	f7fa ff52 	bl	8000228 <__aeabi_dsub>
 8005384:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005386:	4606      	mov	r6, r0
 8005388:	3330      	adds	r3, #48	; 0x30
 800538a:	f804 3b01 	strb.w	r3, [r4], #1
 800538e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005390:	460f      	mov	r7, r1
 8005392:	429c      	cmp	r4, r3
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	d124      	bne.n	80053e4 <_dtoa_r+0x64c>
 800539a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800539e:	4bb0      	ldr	r3, [pc, #704]	; (8005660 <_dtoa_r+0x8c8>)
 80053a0:	f7fa ff44 	bl	800022c <__adddf3>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4630      	mov	r0, r6
 80053aa:	4639      	mov	r1, r7
 80053ac:	f7fb fb84 	bl	8000ab8 <__aeabi_dcmpgt>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	d163      	bne.n	800547c <_dtoa_r+0x6e4>
 80053b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053b8:	2000      	movs	r0, #0
 80053ba:	49a9      	ldr	r1, [pc, #676]	; (8005660 <_dtoa_r+0x8c8>)
 80053bc:	f7fa ff34 	bl	8000228 <__aeabi_dsub>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4630      	mov	r0, r6
 80053c6:	4639      	mov	r1, r7
 80053c8:	f7fb fb58 	bl	8000a7c <__aeabi_dcmplt>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	f43f af1d 	beq.w	800520c <_dtoa_r+0x474>
 80053d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80053d4:	1e7b      	subs	r3, r7, #1
 80053d6:	9314      	str	r3, [sp, #80]	; 0x50
 80053d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80053dc:	2b30      	cmp	r3, #48	; 0x30
 80053de:	d0f8      	beq.n	80053d2 <_dtoa_r+0x63a>
 80053e0:	46c2      	mov	sl, r8
 80053e2:	e03b      	b.n	800545c <_dtoa_r+0x6c4>
 80053e4:	4b9f      	ldr	r3, [pc, #636]	; (8005664 <_dtoa_r+0x8cc>)
 80053e6:	f7fb f8d7 	bl	8000598 <__aeabi_dmul>
 80053ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053ee:	e7bc      	b.n	800536a <_dtoa_r+0x5d2>
 80053f0:	9f03      	ldr	r7, [sp, #12]
 80053f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80053f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053fa:	4640      	mov	r0, r8
 80053fc:	4649      	mov	r1, r9
 80053fe:	f7fb f9f5 	bl	80007ec <__aeabi_ddiv>
 8005402:	f7fb fb79 	bl	8000af8 <__aeabi_d2iz>
 8005406:	4604      	mov	r4, r0
 8005408:	f7fb f85c 	bl	80004c4 <__aeabi_i2d>
 800540c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005410:	f7fb f8c2 	bl	8000598 <__aeabi_dmul>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4640      	mov	r0, r8
 800541a:	4649      	mov	r1, r9
 800541c:	f7fa ff04 	bl	8000228 <__aeabi_dsub>
 8005420:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005424:	f807 6b01 	strb.w	r6, [r7], #1
 8005428:	9e03      	ldr	r6, [sp, #12]
 800542a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800542e:	1bbe      	subs	r6, r7, r6
 8005430:	45b4      	cmp	ip, r6
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	d136      	bne.n	80054a6 <_dtoa_r+0x70e>
 8005438:	f7fa fef8 	bl	800022c <__adddf3>
 800543c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005440:	4680      	mov	r8, r0
 8005442:	4689      	mov	r9, r1
 8005444:	f7fb fb38 	bl	8000ab8 <__aeabi_dcmpgt>
 8005448:	bb58      	cbnz	r0, 80054a2 <_dtoa_r+0x70a>
 800544a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800544e:	4640      	mov	r0, r8
 8005450:	4649      	mov	r1, r9
 8005452:	f7fb fb09 	bl	8000a68 <__aeabi_dcmpeq>
 8005456:	b108      	cbz	r0, 800545c <_dtoa_r+0x6c4>
 8005458:	07e1      	lsls	r1, r4, #31
 800545a:	d422      	bmi.n	80054a2 <_dtoa_r+0x70a>
 800545c:	4628      	mov	r0, r5
 800545e:	4659      	mov	r1, fp
 8005460:	f000 faf0 	bl	8005a44 <_Bfree>
 8005464:	2300      	movs	r3, #0
 8005466:	703b      	strb	r3, [r7, #0]
 8005468:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800546a:	f10a 0001 	add.w	r0, sl, #1
 800546e:	6018      	str	r0, [r3, #0]
 8005470:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005472:	2b00      	cmp	r3, #0
 8005474:	f43f acde 	beq.w	8004e34 <_dtoa_r+0x9c>
 8005478:	601f      	str	r7, [r3, #0]
 800547a:	e4db      	b.n	8004e34 <_dtoa_r+0x9c>
 800547c:	4627      	mov	r7, r4
 800547e:	463b      	mov	r3, r7
 8005480:	461f      	mov	r7, r3
 8005482:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005486:	2a39      	cmp	r2, #57	; 0x39
 8005488:	d107      	bne.n	800549a <_dtoa_r+0x702>
 800548a:	9a03      	ldr	r2, [sp, #12]
 800548c:	429a      	cmp	r2, r3
 800548e:	d1f7      	bne.n	8005480 <_dtoa_r+0x6e8>
 8005490:	2230      	movs	r2, #48	; 0x30
 8005492:	9903      	ldr	r1, [sp, #12]
 8005494:	f108 0801 	add.w	r8, r8, #1
 8005498:	700a      	strb	r2, [r1, #0]
 800549a:	781a      	ldrb	r2, [r3, #0]
 800549c:	3201      	adds	r2, #1
 800549e:	701a      	strb	r2, [r3, #0]
 80054a0:	e79e      	b.n	80053e0 <_dtoa_r+0x648>
 80054a2:	46d0      	mov	r8, sl
 80054a4:	e7eb      	b.n	800547e <_dtoa_r+0x6e6>
 80054a6:	2200      	movs	r2, #0
 80054a8:	4b6e      	ldr	r3, [pc, #440]	; (8005664 <_dtoa_r+0x8cc>)
 80054aa:	f7fb f875 	bl	8000598 <__aeabi_dmul>
 80054ae:	2200      	movs	r2, #0
 80054b0:	2300      	movs	r3, #0
 80054b2:	4680      	mov	r8, r0
 80054b4:	4689      	mov	r9, r1
 80054b6:	f7fb fad7 	bl	8000a68 <__aeabi_dcmpeq>
 80054ba:	2800      	cmp	r0, #0
 80054bc:	d09b      	beq.n	80053f6 <_dtoa_r+0x65e>
 80054be:	e7cd      	b.n	800545c <_dtoa_r+0x6c4>
 80054c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054c2:	2a00      	cmp	r2, #0
 80054c4:	f000 80d0 	beq.w	8005668 <_dtoa_r+0x8d0>
 80054c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80054ca:	2a01      	cmp	r2, #1
 80054cc:	f300 80ae 	bgt.w	800562c <_dtoa_r+0x894>
 80054d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80054d2:	2a00      	cmp	r2, #0
 80054d4:	f000 80a6 	beq.w	8005624 <_dtoa_r+0x88c>
 80054d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80054dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80054de:	9f06      	ldr	r7, [sp, #24]
 80054e0:	9a06      	ldr	r2, [sp, #24]
 80054e2:	2101      	movs	r1, #1
 80054e4:	441a      	add	r2, r3
 80054e6:	9206      	str	r2, [sp, #24]
 80054e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054ea:	4628      	mov	r0, r5
 80054ec:	441a      	add	r2, r3
 80054ee:	9209      	str	r2, [sp, #36]	; 0x24
 80054f0:	f000 fb5e 	bl	8005bb0 <__i2b>
 80054f4:	4606      	mov	r6, r0
 80054f6:	2f00      	cmp	r7, #0
 80054f8:	dd0c      	ble.n	8005514 <_dtoa_r+0x77c>
 80054fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	dd09      	ble.n	8005514 <_dtoa_r+0x77c>
 8005500:	42bb      	cmp	r3, r7
 8005502:	bfa8      	it	ge
 8005504:	463b      	movge	r3, r7
 8005506:	9a06      	ldr	r2, [sp, #24]
 8005508:	1aff      	subs	r7, r7, r3
 800550a:	1ad2      	subs	r2, r2, r3
 800550c:	9206      	str	r2, [sp, #24]
 800550e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	9309      	str	r3, [sp, #36]	; 0x24
 8005514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005516:	b1f3      	cbz	r3, 8005556 <_dtoa_r+0x7be>
 8005518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 80a8 	beq.w	8005670 <_dtoa_r+0x8d8>
 8005520:	2c00      	cmp	r4, #0
 8005522:	dd10      	ble.n	8005546 <_dtoa_r+0x7ae>
 8005524:	4631      	mov	r1, r6
 8005526:	4622      	mov	r2, r4
 8005528:	4628      	mov	r0, r5
 800552a:	f000 fbff 	bl	8005d2c <__pow5mult>
 800552e:	465a      	mov	r2, fp
 8005530:	4601      	mov	r1, r0
 8005532:	4606      	mov	r6, r0
 8005534:	4628      	mov	r0, r5
 8005536:	f000 fb51 	bl	8005bdc <__multiply>
 800553a:	4680      	mov	r8, r0
 800553c:	4659      	mov	r1, fp
 800553e:	4628      	mov	r0, r5
 8005540:	f000 fa80 	bl	8005a44 <_Bfree>
 8005544:	46c3      	mov	fp, r8
 8005546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005548:	1b1a      	subs	r2, r3, r4
 800554a:	d004      	beq.n	8005556 <_dtoa_r+0x7be>
 800554c:	4659      	mov	r1, fp
 800554e:	4628      	mov	r0, r5
 8005550:	f000 fbec 	bl	8005d2c <__pow5mult>
 8005554:	4683      	mov	fp, r0
 8005556:	2101      	movs	r1, #1
 8005558:	4628      	mov	r0, r5
 800555a:	f000 fb29 	bl	8005bb0 <__i2b>
 800555e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005560:	4604      	mov	r4, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	f340 8086 	ble.w	8005674 <_dtoa_r+0x8dc>
 8005568:	461a      	mov	r2, r3
 800556a:	4601      	mov	r1, r0
 800556c:	4628      	mov	r0, r5
 800556e:	f000 fbdd 	bl	8005d2c <__pow5mult>
 8005572:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005574:	4604      	mov	r4, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	dd7f      	ble.n	800567a <_dtoa_r+0x8e2>
 800557a:	f04f 0800 	mov.w	r8, #0
 800557e:	6923      	ldr	r3, [r4, #16]
 8005580:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005584:	6918      	ldr	r0, [r3, #16]
 8005586:	f000 fac5 	bl	8005b14 <__hi0bits>
 800558a:	f1c0 0020 	rsb	r0, r0, #32
 800558e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005590:	4418      	add	r0, r3
 8005592:	f010 001f 	ands.w	r0, r0, #31
 8005596:	f000 8092 	beq.w	80056be <_dtoa_r+0x926>
 800559a:	f1c0 0320 	rsb	r3, r0, #32
 800559e:	2b04      	cmp	r3, #4
 80055a0:	f340 808a 	ble.w	80056b8 <_dtoa_r+0x920>
 80055a4:	f1c0 001c 	rsb	r0, r0, #28
 80055a8:	9b06      	ldr	r3, [sp, #24]
 80055aa:	4407      	add	r7, r0
 80055ac:	4403      	add	r3, r0
 80055ae:	9306      	str	r3, [sp, #24]
 80055b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b2:	4403      	add	r3, r0
 80055b4:	9309      	str	r3, [sp, #36]	; 0x24
 80055b6:	9b06      	ldr	r3, [sp, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	dd05      	ble.n	80055c8 <_dtoa_r+0x830>
 80055bc:	4659      	mov	r1, fp
 80055be:	461a      	mov	r2, r3
 80055c0:	4628      	mov	r0, r5
 80055c2:	f000 fc0d 	bl	8005de0 <__lshift>
 80055c6:	4683      	mov	fp, r0
 80055c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	dd05      	ble.n	80055da <_dtoa_r+0x842>
 80055ce:	4621      	mov	r1, r4
 80055d0:	461a      	mov	r2, r3
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 fc04 	bl	8005de0 <__lshift>
 80055d8:	4604      	mov	r4, r0
 80055da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d070      	beq.n	80056c2 <_dtoa_r+0x92a>
 80055e0:	4621      	mov	r1, r4
 80055e2:	4658      	mov	r0, fp
 80055e4:	f000 fc6c 	bl	8005ec0 <__mcmp>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	da6a      	bge.n	80056c2 <_dtoa_r+0x92a>
 80055ec:	2300      	movs	r3, #0
 80055ee:	4659      	mov	r1, fp
 80055f0:	220a      	movs	r2, #10
 80055f2:	4628      	mov	r0, r5
 80055f4:	f000 fa48 	bl	8005a88 <__multadd>
 80055f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055fa:	4683      	mov	fp, r0
 80055fc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8194 	beq.w	800592e <_dtoa_r+0xb96>
 8005606:	4631      	mov	r1, r6
 8005608:	2300      	movs	r3, #0
 800560a:	220a      	movs	r2, #10
 800560c:	4628      	mov	r0, r5
 800560e:	f000 fa3b 	bl	8005a88 <__multadd>
 8005612:	f1b9 0f00 	cmp.w	r9, #0
 8005616:	4606      	mov	r6, r0
 8005618:	f300 8093 	bgt.w	8005742 <_dtoa_r+0x9aa>
 800561c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800561e:	2b02      	cmp	r3, #2
 8005620:	dc57      	bgt.n	80056d2 <_dtoa_r+0x93a>
 8005622:	e08e      	b.n	8005742 <_dtoa_r+0x9aa>
 8005624:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005626:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800562a:	e757      	b.n	80054dc <_dtoa_r+0x744>
 800562c:	9b08      	ldr	r3, [sp, #32]
 800562e:	1e5c      	subs	r4, r3, #1
 8005630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005632:	42a3      	cmp	r3, r4
 8005634:	bfb7      	itett	lt
 8005636:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005638:	1b1c      	subge	r4, r3, r4
 800563a:	1ae2      	sublt	r2, r4, r3
 800563c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800563e:	bfbe      	ittt	lt
 8005640:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005642:	189b      	addlt	r3, r3, r2
 8005644:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005646:	9b08      	ldr	r3, [sp, #32]
 8005648:	bfb8      	it	lt
 800564a:	2400      	movlt	r4, #0
 800564c:	2b00      	cmp	r3, #0
 800564e:	bfbb      	ittet	lt
 8005650:	9b06      	ldrlt	r3, [sp, #24]
 8005652:	9a08      	ldrlt	r2, [sp, #32]
 8005654:	9f06      	ldrge	r7, [sp, #24]
 8005656:	1a9f      	sublt	r7, r3, r2
 8005658:	bfac      	ite	ge
 800565a:	9b08      	ldrge	r3, [sp, #32]
 800565c:	2300      	movlt	r3, #0
 800565e:	e73f      	b.n	80054e0 <_dtoa_r+0x748>
 8005660:	3fe00000 	.word	0x3fe00000
 8005664:	40240000 	.word	0x40240000
 8005668:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800566a:	9f06      	ldr	r7, [sp, #24]
 800566c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800566e:	e742      	b.n	80054f6 <_dtoa_r+0x75e>
 8005670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005672:	e76b      	b.n	800554c <_dtoa_r+0x7b4>
 8005674:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005676:	2b01      	cmp	r3, #1
 8005678:	dc19      	bgt.n	80056ae <_dtoa_r+0x916>
 800567a:	9b04      	ldr	r3, [sp, #16]
 800567c:	b9bb      	cbnz	r3, 80056ae <_dtoa_r+0x916>
 800567e:	9b05      	ldr	r3, [sp, #20]
 8005680:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005684:	b99b      	cbnz	r3, 80056ae <_dtoa_r+0x916>
 8005686:	9b05      	ldr	r3, [sp, #20]
 8005688:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800568c:	0d1b      	lsrs	r3, r3, #20
 800568e:	051b      	lsls	r3, r3, #20
 8005690:	b183      	cbz	r3, 80056b4 <_dtoa_r+0x91c>
 8005692:	f04f 0801 	mov.w	r8, #1
 8005696:	9b06      	ldr	r3, [sp, #24]
 8005698:	3301      	adds	r3, #1
 800569a:	9306      	str	r3, [sp, #24]
 800569c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569e:	3301      	adds	r3, #1
 80056a0:	9309      	str	r3, [sp, #36]	; 0x24
 80056a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f47f af6a 	bne.w	800557e <_dtoa_r+0x7e6>
 80056aa:	2001      	movs	r0, #1
 80056ac:	e76f      	b.n	800558e <_dtoa_r+0x7f6>
 80056ae:	f04f 0800 	mov.w	r8, #0
 80056b2:	e7f6      	b.n	80056a2 <_dtoa_r+0x90a>
 80056b4:	4698      	mov	r8, r3
 80056b6:	e7f4      	b.n	80056a2 <_dtoa_r+0x90a>
 80056b8:	f43f af7d 	beq.w	80055b6 <_dtoa_r+0x81e>
 80056bc:	4618      	mov	r0, r3
 80056be:	301c      	adds	r0, #28
 80056c0:	e772      	b.n	80055a8 <_dtoa_r+0x810>
 80056c2:	9b08      	ldr	r3, [sp, #32]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	dc36      	bgt.n	8005736 <_dtoa_r+0x99e>
 80056c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	dd33      	ble.n	8005736 <_dtoa_r+0x99e>
 80056ce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056d2:	f1b9 0f00 	cmp.w	r9, #0
 80056d6:	d10d      	bne.n	80056f4 <_dtoa_r+0x95c>
 80056d8:	4621      	mov	r1, r4
 80056da:	464b      	mov	r3, r9
 80056dc:	2205      	movs	r2, #5
 80056de:	4628      	mov	r0, r5
 80056e0:	f000 f9d2 	bl	8005a88 <__multadd>
 80056e4:	4601      	mov	r1, r0
 80056e6:	4604      	mov	r4, r0
 80056e8:	4658      	mov	r0, fp
 80056ea:	f000 fbe9 	bl	8005ec0 <__mcmp>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	f73f adb8 	bgt.w	8005264 <_dtoa_r+0x4cc>
 80056f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056f6:	9f03      	ldr	r7, [sp, #12]
 80056f8:	ea6f 0a03 	mvn.w	sl, r3
 80056fc:	f04f 0800 	mov.w	r8, #0
 8005700:	4621      	mov	r1, r4
 8005702:	4628      	mov	r0, r5
 8005704:	f000 f99e 	bl	8005a44 <_Bfree>
 8005708:	2e00      	cmp	r6, #0
 800570a:	f43f aea7 	beq.w	800545c <_dtoa_r+0x6c4>
 800570e:	f1b8 0f00 	cmp.w	r8, #0
 8005712:	d005      	beq.n	8005720 <_dtoa_r+0x988>
 8005714:	45b0      	cmp	r8, r6
 8005716:	d003      	beq.n	8005720 <_dtoa_r+0x988>
 8005718:	4641      	mov	r1, r8
 800571a:	4628      	mov	r0, r5
 800571c:	f000 f992 	bl	8005a44 <_Bfree>
 8005720:	4631      	mov	r1, r6
 8005722:	4628      	mov	r0, r5
 8005724:	f000 f98e 	bl	8005a44 <_Bfree>
 8005728:	e698      	b.n	800545c <_dtoa_r+0x6c4>
 800572a:	2400      	movs	r4, #0
 800572c:	4626      	mov	r6, r4
 800572e:	e7e1      	b.n	80056f4 <_dtoa_r+0x95c>
 8005730:	46c2      	mov	sl, r8
 8005732:	4626      	mov	r6, r4
 8005734:	e596      	b.n	8005264 <_dtoa_r+0x4cc>
 8005736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005738:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80fd 	beq.w	800593c <_dtoa_r+0xba4>
 8005742:	2f00      	cmp	r7, #0
 8005744:	dd05      	ble.n	8005752 <_dtoa_r+0x9ba>
 8005746:	4631      	mov	r1, r6
 8005748:	463a      	mov	r2, r7
 800574a:	4628      	mov	r0, r5
 800574c:	f000 fb48 	bl	8005de0 <__lshift>
 8005750:	4606      	mov	r6, r0
 8005752:	f1b8 0f00 	cmp.w	r8, #0
 8005756:	d05c      	beq.n	8005812 <_dtoa_r+0xa7a>
 8005758:	4628      	mov	r0, r5
 800575a:	6871      	ldr	r1, [r6, #4]
 800575c:	f000 f932 	bl	80059c4 <_Balloc>
 8005760:	4607      	mov	r7, r0
 8005762:	b928      	cbnz	r0, 8005770 <_dtoa_r+0x9d8>
 8005764:	4602      	mov	r2, r0
 8005766:	f240 21ea 	movw	r1, #746	; 0x2ea
 800576a:	4b7f      	ldr	r3, [pc, #508]	; (8005968 <_dtoa_r+0xbd0>)
 800576c:	f7ff bb28 	b.w	8004dc0 <_dtoa_r+0x28>
 8005770:	6932      	ldr	r2, [r6, #16]
 8005772:	f106 010c 	add.w	r1, r6, #12
 8005776:	3202      	adds	r2, #2
 8005778:	0092      	lsls	r2, r2, #2
 800577a:	300c      	adds	r0, #12
 800577c:	f000 f914 	bl	80059a8 <memcpy>
 8005780:	2201      	movs	r2, #1
 8005782:	4639      	mov	r1, r7
 8005784:	4628      	mov	r0, r5
 8005786:	f000 fb2b 	bl	8005de0 <__lshift>
 800578a:	46b0      	mov	r8, r6
 800578c:	4606      	mov	r6, r0
 800578e:	9b03      	ldr	r3, [sp, #12]
 8005790:	3301      	adds	r3, #1
 8005792:	9308      	str	r3, [sp, #32]
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	444b      	add	r3, r9
 8005798:	930a      	str	r3, [sp, #40]	; 0x28
 800579a:	9b04      	ldr	r3, [sp, #16]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	9309      	str	r3, [sp, #36]	; 0x24
 80057a2:	9b08      	ldr	r3, [sp, #32]
 80057a4:	4621      	mov	r1, r4
 80057a6:	3b01      	subs	r3, #1
 80057a8:	4658      	mov	r0, fp
 80057aa:	9304      	str	r3, [sp, #16]
 80057ac:	f7ff fa66 	bl	8004c7c <quorem>
 80057b0:	4603      	mov	r3, r0
 80057b2:	4641      	mov	r1, r8
 80057b4:	3330      	adds	r3, #48	; 0x30
 80057b6:	9006      	str	r0, [sp, #24]
 80057b8:	4658      	mov	r0, fp
 80057ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80057bc:	f000 fb80 	bl	8005ec0 <__mcmp>
 80057c0:	4632      	mov	r2, r6
 80057c2:	4681      	mov	r9, r0
 80057c4:	4621      	mov	r1, r4
 80057c6:	4628      	mov	r0, r5
 80057c8:	f000 fb96 	bl	8005ef8 <__mdiff>
 80057cc:	68c2      	ldr	r2, [r0, #12]
 80057ce:	4607      	mov	r7, r0
 80057d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057d2:	bb02      	cbnz	r2, 8005816 <_dtoa_r+0xa7e>
 80057d4:	4601      	mov	r1, r0
 80057d6:	4658      	mov	r0, fp
 80057d8:	f000 fb72 	bl	8005ec0 <__mcmp>
 80057dc:	4602      	mov	r2, r0
 80057de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057e0:	4639      	mov	r1, r7
 80057e2:	4628      	mov	r0, r5
 80057e4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80057e8:	f000 f92c 	bl	8005a44 <_Bfree>
 80057ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057f0:	9f08      	ldr	r7, [sp, #32]
 80057f2:	ea43 0102 	orr.w	r1, r3, r2
 80057f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f8:	430b      	orrs	r3, r1
 80057fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057fc:	d10d      	bne.n	800581a <_dtoa_r+0xa82>
 80057fe:	2b39      	cmp	r3, #57	; 0x39
 8005800:	d029      	beq.n	8005856 <_dtoa_r+0xabe>
 8005802:	f1b9 0f00 	cmp.w	r9, #0
 8005806:	dd01      	ble.n	800580c <_dtoa_r+0xa74>
 8005808:	9b06      	ldr	r3, [sp, #24]
 800580a:	3331      	adds	r3, #49	; 0x31
 800580c:	9a04      	ldr	r2, [sp, #16]
 800580e:	7013      	strb	r3, [r2, #0]
 8005810:	e776      	b.n	8005700 <_dtoa_r+0x968>
 8005812:	4630      	mov	r0, r6
 8005814:	e7b9      	b.n	800578a <_dtoa_r+0x9f2>
 8005816:	2201      	movs	r2, #1
 8005818:	e7e2      	b.n	80057e0 <_dtoa_r+0xa48>
 800581a:	f1b9 0f00 	cmp.w	r9, #0
 800581e:	db06      	blt.n	800582e <_dtoa_r+0xa96>
 8005820:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005822:	ea41 0909 	orr.w	r9, r1, r9
 8005826:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005828:	ea59 0101 	orrs.w	r1, r9, r1
 800582c:	d120      	bne.n	8005870 <_dtoa_r+0xad8>
 800582e:	2a00      	cmp	r2, #0
 8005830:	ddec      	ble.n	800580c <_dtoa_r+0xa74>
 8005832:	4659      	mov	r1, fp
 8005834:	2201      	movs	r2, #1
 8005836:	4628      	mov	r0, r5
 8005838:	9308      	str	r3, [sp, #32]
 800583a:	f000 fad1 	bl	8005de0 <__lshift>
 800583e:	4621      	mov	r1, r4
 8005840:	4683      	mov	fp, r0
 8005842:	f000 fb3d 	bl	8005ec0 <__mcmp>
 8005846:	2800      	cmp	r0, #0
 8005848:	9b08      	ldr	r3, [sp, #32]
 800584a:	dc02      	bgt.n	8005852 <_dtoa_r+0xaba>
 800584c:	d1de      	bne.n	800580c <_dtoa_r+0xa74>
 800584e:	07da      	lsls	r2, r3, #31
 8005850:	d5dc      	bpl.n	800580c <_dtoa_r+0xa74>
 8005852:	2b39      	cmp	r3, #57	; 0x39
 8005854:	d1d8      	bne.n	8005808 <_dtoa_r+0xa70>
 8005856:	2339      	movs	r3, #57	; 0x39
 8005858:	9a04      	ldr	r2, [sp, #16]
 800585a:	7013      	strb	r3, [r2, #0]
 800585c:	463b      	mov	r3, r7
 800585e:	461f      	mov	r7, r3
 8005860:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005864:	3b01      	subs	r3, #1
 8005866:	2a39      	cmp	r2, #57	; 0x39
 8005868:	d050      	beq.n	800590c <_dtoa_r+0xb74>
 800586a:	3201      	adds	r2, #1
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	e747      	b.n	8005700 <_dtoa_r+0x968>
 8005870:	2a00      	cmp	r2, #0
 8005872:	dd03      	ble.n	800587c <_dtoa_r+0xae4>
 8005874:	2b39      	cmp	r3, #57	; 0x39
 8005876:	d0ee      	beq.n	8005856 <_dtoa_r+0xabe>
 8005878:	3301      	adds	r3, #1
 800587a:	e7c7      	b.n	800580c <_dtoa_r+0xa74>
 800587c:	9a08      	ldr	r2, [sp, #32]
 800587e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005880:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005884:	428a      	cmp	r2, r1
 8005886:	d02a      	beq.n	80058de <_dtoa_r+0xb46>
 8005888:	4659      	mov	r1, fp
 800588a:	2300      	movs	r3, #0
 800588c:	220a      	movs	r2, #10
 800588e:	4628      	mov	r0, r5
 8005890:	f000 f8fa 	bl	8005a88 <__multadd>
 8005894:	45b0      	cmp	r8, r6
 8005896:	4683      	mov	fp, r0
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	f04f 020a 	mov.w	r2, #10
 80058a0:	4641      	mov	r1, r8
 80058a2:	4628      	mov	r0, r5
 80058a4:	d107      	bne.n	80058b6 <_dtoa_r+0xb1e>
 80058a6:	f000 f8ef 	bl	8005a88 <__multadd>
 80058aa:	4680      	mov	r8, r0
 80058ac:	4606      	mov	r6, r0
 80058ae:	9b08      	ldr	r3, [sp, #32]
 80058b0:	3301      	adds	r3, #1
 80058b2:	9308      	str	r3, [sp, #32]
 80058b4:	e775      	b.n	80057a2 <_dtoa_r+0xa0a>
 80058b6:	f000 f8e7 	bl	8005a88 <__multadd>
 80058ba:	4631      	mov	r1, r6
 80058bc:	4680      	mov	r8, r0
 80058be:	2300      	movs	r3, #0
 80058c0:	220a      	movs	r2, #10
 80058c2:	4628      	mov	r0, r5
 80058c4:	f000 f8e0 	bl	8005a88 <__multadd>
 80058c8:	4606      	mov	r6, r0
 80058ca:	e7f0      	b.n	80058ae <_dtoa_r+0xb16>
 80058cc:	f1b9 0f00 	cmp.w	r9, #0
 80058d0:	bfcc      	ite	gt
 80058d2:	464f      	movgt	r7, r9
 80058d4:	2701      	movle	r7, #1
 80058d6:	f04f 0800 	mov.w	r8, #0
 80058da:	9a03      	ldr	r2, [sp, #12]
 80058dc:	4417      	add	r7, r2
 80058de:	4659      	mov	r1, fp
 80058e0:	2201      	movs	r2, #1
 80058e2:	4628      	mov	r0, r5
 80058e4:	9308      	str	r3, [sp, #32]
 80058e6:	f000 fa7b 	bl	8005de0 <__lshift>
 80058ea:	4621      	mov	r1, r4
 80058ec:	4683      	mov	fp, r0
 80058ee:	f000 fae7 	bl	8005ec0 <__mcmp>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	dcb2      	bgt.n	800585c <_dtoa_r+0xac4>
 80058f6:	d102      	bne.n	80058fe <_dtoa_r+0xb66>
 80058f8:	9b08      	ldr	r3, [sp, #32]
 80058fa:	07db      	lsls	r3, r3, #31
 80058fc:	d4ae      	bmi.n	800585c <_dtoa_r+0xac4>
 80058fe:	463b      	mov	r3, r7
 8005900:	461f      	mov	r7, r3
 8005902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005906:	2a30      	cmp	r2, #48	; 0x30
 8005908:	d0fa      	beq.n	8005900 <_dtoa_r+0xb68>
 800590a:	e6f9      	b.n	8005700 <_dtoa_r+0x968>
 800590c:	9a03      	ldr	r2, [sp, #12]
 800590e:	429a      	cmp	r2, r3
 8005910:	d1a5      	bne.n	800585e <_dtoa_r+0xac6>
 8005912:	2331      	movs	r3, #49	; 0x31
 8005914:	f10a 0a01 	add.w	sl, sl, #1
 8005918:	e779      	b.n	800580e <_dtoa_r+0xa76>
 800591a:	4b14      	ldr	r3, [pc, #80]	; (800596c <_dtoa_r+0xbd4>)
 800591c:	f7ff baa8 	b.w	8004e70 <_dtoa_r+0xd8>
 8005920:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005922:	2b00      	cmp	r3, #0
 8005924:	f47f aa81 	bne.w	8004e2a <_dtoa_r+0x92>
 8005928:	4b11      	ldr	r3, [pc, #68]	; (8005970 <_dtoa_r+0xbd8>)
 800592a:	f7ff baa1 	b.w	8004e70 <_dtoa_r+0xd8>
 800592e:	f1b9 0f00 	cmp.w	r9, #0
 8005932:	dc03      	bgt.n	800593c <_dtoa_r+0xba4>
 8005934:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005936:	2b02      	cmp	r3, #2
 8005938:	f73f aecb 	bgt.w	80056d2 <_dtoa_r+0x93a>
 800593c:	9f03      	ldr	r7, [sp, #12]
 800593e:	4621      	mov	r1, r4
 8005940:	4658      	mov	r0, fp
 8005942:	f7ff f99b 	bl	8004c7c <quorem>
 8005946:	9a03      	ldr	r2, [sp, #12]
 8005948:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800594c:	f807 3b01 	strb.w	r3, [r7], #1
 8005950:	1aba      	subs	r2, r7, r2
 8005952:	4591      	cmp	r9, r2
 8005954:	ddba      	ble.n	80058cc <_dtoa_r+0xb34>
 8005956:	4659      	mov	r1, fp
 8005958:	2300      	movs	r3, #0
 800595a:	220a      	movs	r2, #10
 800595c:	4628      	mov	r0, r5
 800595e:	f000 f893 	bl	8005a88 <__multadd>
 8005962:	4683      	mov	fp, r0
 8005964:	e7eb      	b.n	800593e <_dtoa_r+0xba6>
 8005966:	bf00      	nop
 8005968:	08006f07 	.word	0x08006f07
 800596c:	08006e64 	.word	0x08006e64
 8005970:	08006e88 	.word	0x08006e88

08005974 <_localeconv_r>:
 8005974:	4800      	ldr	r0, [pc, #0]	; (8005978 <_localeconv_r+0x4>)
 8005976:	4770      	bx	lr
 8005978:	20000160 	.word	0x20000160

0800597c <malloc>:
 800597c:	4b02      	ldr	r3, [pc, #8]	; (8005988 <malloc+0xc>)
 800597e:	4601      	mov	r1, r0
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	f000 bc1d 	b.w	80061c0 <_malloc_r>
 8005986:	bf00      	nop
 8005988:	2000000c 	.word	0x2000000c

0800598c <memchr>:
 800598c:	4603      	mov	r3, r0
 800598e:	b510      	push	{r4, lr}
 8005990:	b2c9      	uxtb	r1, r1
 8005992:	4402      	add	r2, r0
 8005994:	4293      	cmp	r3, r2
 8005996:	4618      	mov	r0, r3
 8005998:	d101      	bne.n	800599e <memchr+0x12>
 800599a:	2000      	movs	r0, #0
 800599c:	e003      	b.n	80059a6 <memchr+0x1a>
 800599e:	7804      	ldrb	r4, [r0, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	428c      	cmp	r4, r1
 80059a4:	d1f6      	bne.n	8005994 <memchr+0x8>
 80059a6:	bd10      	pop	{r4, pc}

080059a8 <memcpy>:
 80059a8:	440a      	add	r2, r1
 80059aa:	4291      	cmp	r1, r2
 80059ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80059b0:	d100      	bne.n	80059b4 <memcpy+0xc>
 80059b2:	4770      	bx	lr
 80059b4:	b510      	push	{r4, lr}
 80059b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ba:	4291      	cmp	r1, r2
 80059bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059c0:	d1f9      	bne.n	80059b6 <memcpy+0xe>
 80059c2:	bd10      	pop	{r4, pc}

080059c4 <_Balloc>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059c8:	4604      	mov	r4, r0
 80059ca:	460d      	mov	r5, r1
 80059cc:	b976      	cbnz	r6, 80059ec <_Balloc+0x28>
 80059ce:	2010      	movs	r0, #16
 80059d0:	f7ff ffd4 	bl	800597c <malloc>
 80059d4:	4602      	mov	r2, r0
 80059d6:	6260      	str	r0, [r4, #36]	; 0x24
 80059d8:	b920      	cbnz	r0, 80059e4 <_Balloc+0x20>
 80059da:	2166      	movs	r1, #102	; 0x66
 80059dc:	4b17      	ldr	r3, [pc, #92]	; (8005a3c <_Balloc+0x78>)
 80059de:	4818      	ldr	r0, [pc, #96]	; (8005a40 <_Balloc+0x7c>)
 80059e0:	f000 fc72 	bl	80062c8 <__assert_func>
 80059e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059e8:	6006      	str	r6, [r0, #0]
 80059ea:	60c6      	str	r6, [r0, #12]
 80059ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059ee:	68f3      	ldr	r3, [r6, #12]
 80059f0:	b183      	cbz	r3, 8005a14 <_Balloc+0x50>
 80059f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059fa:	b9b8      	cbnz	r0, 8005a2c <_Balloc+0x68>
 80059fc:	2101      	movs	r1, #1
 80059fe:	fa01 f605 	lsl.w	r6, r1, r5
 8005a02:	1d72      	adds	r2, r6, #5
 8005a04:	4620      	mov	r0, r4
 8005a06:	0092      	lsls	r2, r2, #2
 8005a08:	f000 fb5e 	bl	80060c8 <_calloc_r>
 8005a0c:	b160      	cbz	r0, 8005a28 <_Balloc+0x64>
 8005a0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a12:	e00e      	b.n	8005a32 <_Balloc+0x6e>
 8005a14:	2221      	movs	r2, #33	; 0x21
 8005a16:	2104      	movs	r1, #4
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 fb55 	bl	80060c8 <_calloc_r>
 8005a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a20:	60f0      	str	r0, [r6, #12]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e4      	bne.n	80059f2 <_Balloc+0x2e>
 8005a28:	2000      	movs	r0, #0
 8005a2a:	bd70      	pop	{r4, r5, r6, pc}
 8005a2c:	6802      	ldr	r2, [r0, #0]
 8005a2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a32:	2300      	movs	r3, #0
 8005a34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a38:	e7f7      	b.n	8005a2a <_Balloc+0x66>
 8005a3a:	bf00      	nop
 8005a3c:	08006e95 	.word	0x08006e95
 8005a40:	08006f18 	.word	0x08006f18

08005a44 <_Bfree>:
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a48:	4605      	mov	r5, r0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	b976      	cbnz	r6, 8005a6c <_Bfree+0x28>
 8005a4e:	2010      	movs	r0, #16
 8005a50:	f7ff ff94 	bl	800597c <malloc>
 8005a54:	4602      	mov	r2, r0
 8005a56:	6268      	str	r0, [r5, #36]	; 0x24
 8005a58:	b920      	cbnz	r0, 8005a64 <_Bfree+0x20>
 8005a5a:	218a      	movs	r1, #138	; 0x8a
 8005a5c:	4b08      	ldr	r3, [pc, #32]	; (8005a80 <_Bfree+0x3c>)
 8005a5e:	4809      	ldr	r0, [pc, #36]	; (8005a84 <_Bfree+0x40>)
 8005a60:	f000 fc32 	bl	80062c8 <__assert_func>
 8005a64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a68:	6006      	str	r6, [r0, #0]
 8005a6a:	60c6      	str	r6, [r0, #12]
 8005a6c:	b13c      	cbz	r4, 8005a7e <_Bfree+0x3a>
 8005a6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a70:	6862      	ldr	r2, [r4, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a78:	6021      	str	r1, [r4, #0]
 8005a7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}
 8005a80:	08006e95 	.word	0x08006e95
 8005a84:	08006f18 	.word	0x08006f18

08005a88 <__multadd>:
 8005a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8c:	4607      	mov	r7, r0
 8005a8e:	460c      	mov	r4, r1
 8005a90:	461e      	mov	r6, r3
 8005a92:	2000      	movs	r0, #0
 8005a94:	690d      	ldr	r5, [r1, #16]
 8005a96:	f101 0c14 	add.w	ip, r1, #20
 8005a9a:	f8dc 3000 	ldr.w	r3, [ip]
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	b299      	uxth	r1, r3
 8005aa2:	fb02 6101 	mla	r1, r2, r1, r6
 8005aa6:	0c1e      	lsrs	r6, r3, #16
 8005aa8:	0c0b      	lsrs	r3, r1, #16
 8005aaa:	fb02 3306 	mla	r3, r2, r6, r3
 8005aae:	b289      	uxth	r1, r1
 8005ab0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ab4:	4285      	cmp	r5, r0
 8005ab6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005aba:	f84c 1b04 	str.w	r1, [ip], #4
 8005abe:	dcec      	bgt.n	8005a9a <__multadd+0x12>
 8005ac0:	b30e      	cbz	r6, 8005b06 <__multadd+0x7e>
 8005ac2:	68a3      	ldr	r3, [r4, #8]
 8005ac4:	42ab      	cmp	r3, r5
 8005ac6:	dc19      	bgt.n	8005afc <__multadd+0x74>
 8005ac8:	6861      	ldr	r1, [r4, #4]
 8005aca:	4638      	mov	r0, r7
 8005acc:	3101      	adds	r1, #1
 8005ace:	f7ff ff79 	bl	80059c4 <_Balloc>
 8005ad2:	4680      	mov	r8, r0
 8005ad4:	b928      	cbnz	r0, 8005ae2 <__multadd+0x5a>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	21b5      	movs	r1, #181	; 0xb5
 8005ada:	4b0c      	ldr	r3, [pc, #48]	; (8005b0c <__multadd+0x84>)
 8005adc:	480c      	ldr	r0, [pc, #48]	; (8005b10 <__multadd+0x88>)
 8005ade:	f000 fbf3 	bl	80062c8 <__assert_func>
 8005ae2:	6922      	ldr	r2, [r4, #16]
 8005ae4:	f104 010c 	add.w	r1, r4, #12
 8005ae8:	3202      	adds	r2, #2
 8005aea:	0092      	lsls	r2, r2, #2
 8005aec:	300c      	adds	r0, #12
 8005aee:	f7ff ff5b 	bl	80059a8 <memcpy>
 8005af2:	4621      	mov	r1, r4
 8005af4:	4638      	mov	r0, r7
 8005af6:	f7ff ffa5 	bl	8005a44 <_Bfree>
 8005afa:	4644      	mov	r4, r8
 8005afc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b00:	3501      	adds	r5, #1
 8005b02:	615e      	str	r6, [r3, #20]
 8005b04:	6125      	str	r5, [r4, #16]
 8005b06:	4620      	mov	r0, r4
 8005b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b0c:	08006f07 	.word	0x08006f07
 8005b10:	08006f18 	.word	0x08006f18

08005b14 <__hi0bits>:
 8005b14:	0c02      	lsrs	r2, r0, #16
 8005b16:	0412      	lsls	r2, r2, #16
 8005b18:	4603      	mov	r3, r0
 8005b1a:	b9ca      	cbnz	r2, 8005b50 <__hi0bits+0x3c>
 8005b1c:	0403      	lsls	r3, r0, #16
 8005b1e:	2010      	movs	r0, #16
 8005b20:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b24:	bf04      	itt	eq
 8005b26:	021b      	lsleq	r3, r3, #8
 8005b28:	3008      	addeq	r0, #8
 8005b2a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b2e:	bf04      	itt	eq
 8005b30:	011b      	lsleq	r3, r3, #4
 8005b32:	3004      	addeq	r0, #4
 8005b34:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b38:	bf04      	itt	eq
 8005b3a:	009b      	lsleq	r3, r3, #2
 8005b3c:	3002      	addeq	r0, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	db05      	blt.n	8005b4e <__hi0bits+0x3a>
 8005b42:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005b46:	f100 0001 	add.w	r0, r0, #1
 8005b4a:	bf08      	it	eq
 8005b4c:	2020      	moveq	r0, #32
 8005b4e:	4770      	bx	lr
 8005b50:	2000      	movs	r0, #0
 8005b52:	e7e5      	b.n	8005b20 <__hi0bits+0xc>

08005b54 <__lo0bits>:
 8005b54:	6803      	ldr	r3, [r0, #0]
 8005b56:	4602      	mov	r2, r0
 8005b58:	f013 0007 	ands.w	r0, r3, #7
 8005b5c:	d00b      	beq.n	8005b76 <__lo0bits+0x22>
 8005b5e:	07d9      	lsls	r1, r3, #31
 8005b60:	d421      	bmi.n	8005ba6 <__lo0bits+0x52>
 8005b62:	0798      	lsls	r0, r3, #30
 8005b64:	bf49      	itett	mi
 8005b66:	085b      	lsrmi	r3, r3, #1
 8005b68:	089b      	lsrpl	r3, r3, #2
 8005b6a:	2001      	movmi	r0, #1
 8005b6c:	6013      	strmi	r3, [r2, #0]
 8005b6e:	bf5c      	itt	pl
 8005b70:	2002      	movpl	r0, #2
 8005b72:	6013      	strpl	r3, [r2, #0]
 8005b74:	4770      	bx	lr
 8005b76:	b299      	uxth	r1, r3
 8005b78:	b909      	cbnz	r1, 8005b7e <__lo0bits+0x2a>
 8005b7a:	2010      	movs	r0, #16
 8005b7c:	0c1b      	lsrs	r3, r3, #16
 8005b7e:	b2d9      	uxtb	r1, r3
 8005b80:	b909      	cbnz	r1, 8005b86 <__lo0bits+0x32>
 8005b82:	3008      	adds	r0, #8
 8005b84:	0a1b      	lsrs	r3, r3, #8
 8005b86:	0719      	lsls	r1, r3, #28
 8005b88:	bf04      	itt	eq
 8005b8a:	091b      	lsreq	r3, r3, #4
 8005b8c:	3004      	addeq	r0, #4
 8005b8e:	0799      	lsls	r1, r3, #30
 8005b90:	bf04      	itt	eq
 8005b92:	089b      	lsreq	r3, r3, #2
 8005b94:	3002      	addeq	r0, #2
 8005b96:	07d9      	lsls	r1, r3, #31
 8005b98:	d403      	bmi.n	8005ba2 <__lo0bits+0x4e>
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	f100 0001 	add.w	r0, r0, #1
 8005ba0:	d003      	beq.n	8005baa <__lo0bits+0x56>
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	4770      	bx	lr
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	4770      	bx	lr
 8005baa:	2020      	movs	r0, #32
 8005bac:	4770      	bx	lr
	...

08005bb0 <__i2b>:
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	f7ff ff05 	bl	80059c4 <_Balloc>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	b928      	cbnz	r0, 8005bca <__i2b+0x1a>
 8005bbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005bc2:	4b04      	ldr	r3, [pc, #16]	; (8005bd4 <__i2b+0x24>)
 8005bc4:	4804      	ldr	r0, [pc, #16]	; (8005bd8 <__i2b+0x28>)
 8005bc6:	f000 fb7f 	bl	80062c8 <__assert_func>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	6144      	str	r4, [r0, #20]
 8005bce:	6103      	str	r3, [r0, #16]
 8005bd0:	bd10      	pop	{r4, pc}
 8005bd2:	bf00      	nop
 8005bd4:	08006f07 	.word	0x08006f07
 8005bd8:	08006f18 	.word	0x08006f18

08005bdc <__multiply>:
 8005bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be0:	4691      	mov	r9, r2
 8005be2:	690a      	ldr	r2, [r1, #16]
 8005be4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005be8:	460c      	mov	r4, r1
 8005bea:	429a      	cmp	r2, r3
 8005bec:	bfbe      	ittt	lt
 8005bee:	460b      	movlt	r3, r1
 8005bf0:	464c      	movlt	r4, r9
 8005bf2:	4699      	movlt	r9, r3
 8005bf4:	6927      	ldr	r7, [r4, #16]
 8005bf6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005bfa:	68a3      	ldr	r3, [r4, #8]
 8005bfc:	6861      	ldr	r1, [r4, #4]
 8005bfe:	eb07 060a 	add.w	r6, r7, sl
 8005c02:	42b3      	cmp	r3, r6
 8005c04:	b085      	sub	sp, #20
 8005c06:	bfb8      	it	lt
 8005c08:	3101      	addlt	r1, #1
 8005c0a:	f7ff fedb 	bl	80059c4 <_Balloc>
 8005c0e:	b930      	cbnz	r0, 8005c1e <__multiply+0x42>
 8005c10:	4602      	mov	r2, r0
 8005c12:	f240 115d 	movw	r1, #349	; 0x15d
 8005c16:	4b43      	ldr	r3, [pc, #268]	; (8005d24 <__multiply+0x148>)
 8005c18:	4843      	ldr	r0, [pc, #268]	; (8005d28 <__multiply+0x14c>)
 8005c1a:	f000 fb55 	bl	80062c8 <__assert_func>
 8005c1e:	f100 0514 	add.w	r5, r0, #20
 8005c22:	462b      	mov	r3, r5
 8005c24:	2200      	movs	r2, #0
 8005c26:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c2a:	4543      	cmp	r3, r8
 8005c2c:	d321      	bcc.n	8005c72 <__multiply+0x96>
 8005c2e:	f104 0314 	add.w	r3, r4, #20
 8005c32:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005c36:	f109 0314 	add.w	r3, r9, #20
 8005c3a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005c3e:	9202      	str	r2, [sp, #8]
 8005c40:	1b3a      	subs	r2, r7, r4
 8005c42:	3a15      	subs	r2, #21
 8005c44:	f022 0203 	bic.w	r2, r2, #3
 8005c48:	3204      	adds	r2, #4
 8005c4a:	f104 0115 	add.w	r1, r4, #21
 8005c4e:	428f      	cmp	r7, r1
 8005c50:	bf38      	it	cc
 8005c52:	2204      	movcc	r2, #4
 8005c54:	9201      	str	r2, [sp, #4]
 8005c56:	9a02      	ldr	r2, [sp, #8]
 8005c58:	9303      	str	r3, [sp, #12]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d80c      	bhi.n	8005c78 <__multiply+0x9c>
 8005c5e:	2e00      	cmp	r6, #0
 8005c60:	dd03      	ble.n	8005c6a <__multiply+0x8e>
 8005c62:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d059      	beq.n	8005d1e <__multiply+0x142>
 8005c6a:	6106      	str	r6, [r0, #16]
 8005c6c:	b005      	add	sp, #20
 8005c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c72:	f843 2b04 	str.w	r2, [r3], #4
 8005c76:	e7d8      	b.n	8005c2a <__multiply+0x4e>
 8005c78:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c7c:	f1ba 0f00 	cmp.w	sl, #0
 8005c80:	d023      	beq.n	8005cca <__multiply+0xee>
 8005c82:	46a9      	mov	r9, r5
 8005c84:	f04f 0c00 	mov.w	ip, #0
 8005c88:	f104 0e14 	add.w	lr, r4, #20
 8005c8c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c90:	f8d9 1000 	ldr.w	r1, [r9]
 8005c94:	fa1f fb82 	uxth.w	fp, r2
 8005c98:	b289      	uxth	r1, r1
 8005c9a:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c9e:	4461      	add	r1, ip
 8005ca0:	f8d9 c000 	ldr.w	ip, [r9]
 8005ca4:	0c12      	lsrs	r2, r2, #16
 8005ca6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005caa:	fb0a c202 	mla	r2, sl, r2, ip
 8005cae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005cb2:	b289      	uxth	r1, r1
 8005cb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005cb8:	4577      	cmp	r7, lr
 8005cba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005cbe:	f849 1b04 	str.w	r1, [r9], #4
 8005cc2:	d8e3      	bhi.n	8005c8c <__multiply+0xb0>
 8005cc4:	9a01      	ldr	r2, [sp, #4]
 8005cc6:	f845 c002 	str.w	ip, [r5, r2]
 8005cca:	9a03      	ldr	r2, [sp, #12]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005cd2:	f1b9 0f00 	cmp.w	r9, #0
 8005cd6:	d020      	beq.n	8005d1a <__multiply+0x13e>
 8005cd8:	46ae      	mov	lr, r5
 8005cda:	f04f 0a00 	mov.w	sl, #0
 8005cde:	6829      	ldr	r1, [r5, #0]
 8005ce0:	f104 0c14 	add.w	ip, r4, #20
 8005ce4:	f8bc b000 	ldrh.w	fp, [ip]
 8005ce8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005cec:	b289      	uxth	r1, r1
 8005cee:	fb09 220b 	mla	r2, r9, fp, r2
 8005cf2:	4492      	add	sl, r2
 8005cf4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005cf8:	f84e 1b04 	str.w	r1, [lr], #4
 8005cfc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005d00:	f8be 1000 	ldrh.w	r1, [lr]
 8005d04:	0c12      	lsrs	r2, r2, #16
 8005d06:	fb09 1102 	mla	r1, r9, r2, r1
 8005d0a:	4567      	cmp	r7, ip
 8005d0c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005d10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d14:	d8e6      	bhi.n	8005ce4 <__multiply+0x108>
 8005d16:	9a01      	ldr	r2, [sp, #4]
 8005d18:	50a9      	str	r1, [r5, r2]
 8005d1a:	3504      	adds	r5, #4
 8005d1c:	e79b      	b.n	8005c56 <__multiply+0x7a>
 8005d1e:	3e01      	subs	r6, #1
 8005d20:	e79d      	b.n	8005c5e <__multiply+0x82>
 8005d22:	bf00      	nop
 8005d24:	08006f07 	.word	0x08006f07
 8005d28:	08006f18 	.word	0x08006f18

08005d2c <__pow5mult>:
 8005d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d30:	4615      	mov	r5, r2
 8005d32:	f012 0203 	ands.w	r2, r2, #3
 8005d36:	4606      	mov	r6, r0
 8005d38:	460f      	mov	r7, r1
 8005d3a:	d007      	beq.n	8005d4c <__pow5mult+0x20>
 8005d3c:	4c25      	ldr	r4, [pc, #148]	; (8005dd4 <__pow5mult+0xa8>)
 8005d3e:	3a01      	subs	r2, #1
 8005d40:	2300      	movs	r3, #0
 8005d42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d46:	f7ff fe9f 	bl	8005a88 <__multadd>
 8005d4a:	4607      	mov	r7, r0
 8005d4c:	10ad      	asrs	r5, r5, #2
 8005d4e:	d03d      	beq.n	8005dcc <__pow5mult+0xa0>
 8005d50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d52:	b97c      	cbnz	r4, 8005d74 <__pow5mult+0x48>
 8005d54:	2010      	movs	r0, #16
 8005d56:	f7ff fe11 	bl	800597c <malloc>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	6270      	str	r0, [r6, #36]	; 0x24
 8005d5e:	b928      	cbnz	r0, 8005d6c <__pow5mult+0x40>
 8005d60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005d64:	4b1c      	ldr	r3, [pc, #112]	; (8005dd8 <__pow5mult+0xac>)
 8005d66:	481d      	ldr	r0, [pc, #116]	; (8005ddc <__pow5mult+0xb0>)
 8005d68:	f000 faae 	bl	80062c8 <__assert_func>
 8005d6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d70:	6004      	str	r4, [r0, #0]
 8005d72:	60c4      	str	r4, [r0, #12]
 8005d74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d7c:	b94c      	cbnz	r4, 8005d92 <__pow5mult+0x66>
 8005d7e:	f240 2171 	movw	r1, #625	; 0x271
 8005d82:	4630      	mov	r0, r6
 8005d84:	f7ff ff14 	bl	8005bb0 <__i2b>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d90:	6003      	str	r3, [r0, #0]
 8005d92:	f04f 0900 	mov.w	r9, #0
 8005d96:	07eb      	lsls	r3, r5, #31
 8005d98:	d50a      	bpl.n	8005db0 <__pow5mult+0x84>
 8005d9a:	4639      	mov	r1, r7
 8005d9c:	4622      	mov	r2, r4
 8005d9e:	4630      	mov	r0, r6
 8005da0:	f7ff ff1c 	bl	8005bdc <__multiply>
 8005da4:	4680      	mov	r8, r0
 8005da6:	4639      	mov	r1, r7
 8005da8:	4630      	mov	r0, r6
 8005daa:	f7ff fe4b 	bl	8005a44 <_Bfree>
 8005dae:	4647      	mov	r7, r8
 8005db0:	106d      	asrs	r5, r5, #1
 8005db2:	d00b      	beq.n	8005dcc <__pow5mult+0xa0>
 8005db4:	6820      	ldr	r0, [r4, #0]
 8005db6:	b938      	cbnz	r0, 8005dc8 <__pow5mult+0x9c>
 8005db8:	4622      	mov	r2, r4
 8005dba:	4621      	mov	r1, r4
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f7ff ff0d 	bl	8005bdc <__multiply>
 8005dc2:	6020      	str	r0, [r4, #0]
 8005dc4:	f8c0 9000 	str.w	r9, [r0]
 8005dc8:	4604      	mov	r4, r0
 8005dca:	e7e4      	b.n	8005d96 <__pow5mult+0x6a>
 8005dcc:	4638      	mov	r0, r7
 8005dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dd2:	bf00      	nop
 8005dd4:	08007068 	.word	0x08007068
 8005dd8:	08006e95 	.word	0x08006e95
 8005ddc:	08006f18 	.word	0x08006f18

08005de0 <__lshift>:
 8005de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de4:	460c      	mov	r4, r1
 8005de6:	4607      	mov	r7, r0
 8005de8:	4691      	mov	r9, r2
 8005dea:	6923      	ldr	r3, [r4, #16]
 8005dec:	6849      	ldr	r1, [r1, #4]
 8005dee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005df2:	68a3      	ldr	r3, [r4, #8]
 8005df4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005df8:	f108 0601 	add.w	r6, r8, #1
 8005dfc:	42b3      	cmp	r3, r6
 8005dfe:	db0b      	blt.n	8005e18 <__lshift+0x38>
 8005e00:	4638      	mov	r0, r7
 8005e02:	f7ff fddf 	bl	80059c4 <_Balloc>
 8005e06:	4605      	mov	r5, r0
 8005e08:	b948      	cbnz	r0, 8005e1e <__lshift+0x3e>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e10:	4b29      	ldr	r3, [pc, #164]	; (8005eb8 <__lshift+0xd8>)
 8005e12:	482a      	ldr	r0, [pc, #168]	; (8005ebc <__lshift+0xdc>)
 8005e14:	f000 fa58 	bl	80062c8 <__assert_func>
 8005e18:	3101      	adds	r1, #1
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	e7ee      	b.n	8005dfc <__lshift+0x1c>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f100 0114 	add.w	r1, r0, #20
 8005e24:	f100 0210 	add.w	r2, r0, #16
 8005e28:	4618      	mov	r0, r3
 8005e2a:	4553      	cmp	r3, sl
 8005e2c:	db37      	blt.n	8005e9e <__lshift+0xbe>
 8005e2e:	6920      	ldr	r0, [r4, #16]
 8005e30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e34:	f104 0314 	add.w	r3, r4, #20
 8005e38:	f019 091f 	ands.w	r9, r9, #31
 8005e3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005e44:	d02f      	beq.n	8005ea6 <__lshift+0xc6>
 8005e46:	468a      	mov	sl, r1
 8005e48:	f04f 0c00 	mov.w	ip, #0
 8005e4c:	f1c9 0e20 	rsb	lr, r9, #32
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	fa02 f209 	lsl.w	r2, r2, r9
 8005e56:	ea42 020c 	orr.w	r2, r2, ip
 8005e5a:	f84a 2b04 	str.w	r2, [sl], #4
 8005e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e62:	4298      	cmp	r0, r3
 8005e64:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005e68:	d8f2      	bhi.n	8005e50 <__lshift+0x70>
 8005e6a:	1b03      	subs	r3, r0, r4
 8005e6c:	3b15      	subs	r3, #21
 8005e6e:	f023 0303 	bic.w	r3, r3, #3
 8005e72:	3304      	adds	r3, #4
 8005e74:	f104 0215 	add.w	r2, r4, #21
 8005e78:	4290      	cmp	r0, r2
 8005e7a:	bf38      	it	cc
 8005e7c:	2304      	movcc	r3, #4
 8005e7e:	f841 c003 	str.w	ip, [r1, r3]
 8005e82:	f1bc 0f00 	cmp.w	ip, #0
 8005e86:	d001      	beq.n	8005e8c <__lshift+0xac>
 8005e88:	f108 0602 	add.w	r6, r8, #2
 8005e8c:	3e01      	subs	r6, #1
 8005e8e:	4638      	mov	r0, r7
 8005e90:	4621      	mov	r1, r4
 8005e92:	612e      	str	r6, [r5, #16]
 8005e94:	f7ff fdd6 	bl	8005a44 <_Bfree>
 8005e98:	4628      	mov	r0, r5
 8005e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	e7c1      	b.n	8005e2a <__lshift+0x4a>
 8005ea6:	3904      	subs	r1, #4
 8005ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eac:	4298      	cmp	r0, r3
 8005eae:	f841 2f04 	str.w	r2, [r1, #4]!
 8005eb2:	d8f9      	bhi.n	8005ea8 <__lshift+0xc8>
 8005eb4:	e7ea      	b.n	8005e8c <__lshift+0xac>
 8005eb6:	bf00      	nop
 8005eb8:	08006f07 	.word	0x08006f07
 8005ebc:	08006f18 	.word	0x08006f18

08005ec0 <__mcmp>:
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	690a      	ldr	r2, [r1, #16]
 8005ec4:	6900      	ldr	r0, [r0, #16]
 8005ec6:	b530      	push	{r4, r5, lr}
 8005ec8:	1a80      	subs	r0, r0, r2
 8005eca:	d10d      	bne.n	8005ee8 <__mcmp+0x28>
 8005ecc:	3314      	adds	r3, #20
 8005ece:	3114      	adds	r1, #20
 8005ed0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ed4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005ed8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005edc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ee0:	4295      	cmp	r5, r2
 8005ee2:	d002      	beq.n	8005eea <__mcmp+0x2a>
 8005ee4:	d304      	bcc.n	8005ef0 <__mcmp+0x30>
 8005ee6:	2001      	movs	r0, #1
 8005ee8:	bd30      	pop	{r4, r5, pc}
 8005eea:	42a3      	cmp	r3, r4
 8005eec:	d3f4      	bcc.n	8005ed8 <__mcmp+0x18>
 8005eee:	e7fb      	b.n	8005ee8 <__mcmp+0x28>
 8005ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ef4:	e7f8      	b.n	8005ee8 <__mcmp+0x28>
	...

08005ef8 <__mdiff>:
 8005ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efc:	460d      	mov	r5, r1
 8005efe:	4607      	mov	r7, r0
 8005f00:	4611      	mov	r1, r2
 8005f02:	4628      	mov	r0, r5
 8005f04:	4614      	mov	r4, r2
 8005f06:	f7ff ffdb 	bl	8005ec0 <__mcmp>
 8005f0a:	1e06      	subs	r6, r0, #0
 8005f0c:	d111      	bne.n	8005f32 <__mdiff+0x3a>
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4638      	mov	r0, r7
 8005f12:	f7ff fd57 	bl	80059c4 <_Balloc>
 8005f16:	4602      	mov	r2, r0
 8005f18:	b928      	cbnz	r0, 8005f26 <__mdiff+0x2e>
 8005f1a:	f240 2132 	movw	r1, #562	; 0x232
 8005f1e:	4b3a      	ldr	r3, [pc, #232]	; (8006008 <__mdiff+0x110>)
 8005f20:	483a      	ldr	r0, [pc, #232]	; (800600c <__mdiff+0x114>)
 8005f22:	f000 f9d1 	bl	80062c8 <__assert_func>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f32:	bfa4      	itt	ge
 8005f34:	4623      	movge	r3, r4
 8005f36:	462c      	movge	r4, r5
 8005f38:	4638      	mov	r0, r7
 8005f3a:	6861      	ldr	r1, [r4, #4]
 8005f3c:	bfa6      	itte	ge
 8005f3e:	461d      	movge	r5, r3
 8005f40:	2600      	movge	r6, #0
 8005f42:	2601      	movlt	r6, #1
 8005f44:	f7ff fd3e 	bl	80059c4 <_Balloc>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	b918      	cbnz	r0, 8005f54 <__mdiff+0x5c>
 8005f4c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f50:	4b2d      	ldr	r3, [pc, #180]	; (8006008 <__mdiff+0x110>)
 8005f52:	e7e5      	b.n	8005f20 <__mdiff+0x28>
 8005f54:	f102 0814 	add.w	r8, r2, #20
 8005f58:	46c2      	mov	sl, r8
 8005f5a:	f04f 0c00 	mov.w	ip, #0
 8005f5e:	6927      	ldr	r7, [r4, #16]
 8005f60:	60c6      	str	r6, [r0, #12]
 8005f62:	692e      	ldr	r6, [r5, #16]
 8005f64:	f104 0014 	add.w	r0, r4, #20
 8005f68:	f105 0914 	add.w	r9, r5, #20
 8005f6c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005f70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f74:	3410      	adds	r4, #16
 8005f76:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005f7a:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f7e:	fa1f f18b 	uxth.w	r1, fp
 8005f82:	448c      	add	ip, r1
 8005f84:	b299      	uxth	r1, r3
 8005f86:	0c1b      	lsrs	r3, r3, #16
 8005f88:	ebac 0101 	sub.w	r1, ip, r1
 8005f8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f90:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f94:	b289      	uxth	r1, r1
 8005f96:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f9a:	454e      	cmp	r6, r9
 8005f9c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005fa0:	f84a 3b04 	str.w	r3, [sl], #4
 8005fa4:	d8e7      	bhi.n	8005f76 <__mdiff+0x7e>
 8005fa6:	1b73      	subs	r3, r6, r5
 8005fa8:	3b15      	subs	r3, #21
 8005faa:	f023 0303 	bic.w	r3, r3, #3
 8005fae:	3515      	adds	r5, #21
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	42ae      	cmp	r6, r5
 8005fb4:	bf38      	it	cc
 8005fb6:	2304      	movcc	r3, #4
 8005fb8:	4418      	add	r0, r3
 8005fba:	4443      	add	r3, r8
 8005fbc:	461e      	mov	r6, r3
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	4575      	cmp	r5, lr
 8005fc2:	d30e      	bcc.n	8005fe2 <__mdiff+0xea>
 8005fc4:	f10e 0103 	add.w	r1, lr, #3
 8005fc8:	1a09      	subs	r1, r1, r0
 8005fca:	f021 0103 	bic.w	r1, r1, #3
 8005fce:	3803      	subs	r0, #3
 8005fd0:	4586      	cmp	lr, r0
 8005fd2:	bf38      	it	cc
 8005fd4:	2100      	movcc	r1, #0
 8005fd6:	4419      	add	r1, r3
 8005fd8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005fdc:	b18b      	cbz	r3, 8006002 <__mdiff+0x10a>
 8005fde:	6117      	str	r7, [r2, #16]
 8005fe0:	e7a4      	b.n	8005f2c <__mdiff+0x34>
 8005fe2:	f855 8b04 	ldr.w	r8, [r5], #4
 8005fe6:	fa1f f188 	uxth.w	r1, r8
 8005fea:	4461      	add	r1, ip
 8005fec:	140c      	asrs	r4, r1, #16
 8005fee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ff2:	b289      	uxth	r1, r1
 8005ff4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005ff8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005ffc:	f846 1b04 	str.w	r1, [r6], #4
 8006000:	e7de      	b.n	8005fc0 <__mdiff+0xc8>
 8006002:	3f01      	subs	r7, #1
 8006004:	e7e8      	b.n	8005fd8 <__mdiff+0xe0>
 8006006:	bf00      	nop
 8006008:	08006f07 	.word	0x08006f07
 800600c:	08006f18 	.word	0x08006f18

08006010 <__d2b>:
 8006010:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006014:	2101      	movs	r1, #1
 8006016:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800601a:	4690      	mov	r8, r2
 800601c:	461d      	mov	r5, r3
 800601e:	f7ff fcd1 	bl	80059c4 <_Balloc>
 8006022:	4604      	mov	r4, r0
 8006024:	b930      	cbnz	r0, 8006034 <__d2b+0x24>
 8006026:	4602      	mov	r2, r0
 8006028:	f240 310a 	movw	r1, #778	; 0x30a
 800602c:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <__d2b+0xb0>)
 800602e:	4825      	ldr	r0, [pc, #148]	; (80060c4 <__d2b+0xb4>)
 8006030:	f000 f94a 	bl	80062c8 <__assert_func>
 8006034:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006038:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800603c:	bb2d      	cbnz	r5, 800608a <__d2b+0x7a>
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	f1b8 0300 	subs.w	r3, r8, #0
 8006044:	d026      	beq.n	8006094 <__d2b+0x84>
 8006046:	4668      	mov	r0, sp
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	f7ff fd83 	bl	8005b54 <__lo0bits>
 800604e:	9900      	ldr	r1, [sp, #0]
 8006050:	b1f0      	cbz	r0, 8006090 <__d2b+0x80>
 8006052:	9a01      	ldr	r2, [sp, #4]
 8006054:	f1c0 0320 	rsb	r3, r0, #32
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	430b      	orrs	r3, r1
 800605e:	40c2      	lsrs	r2, r0
 8006060:	6163      	str	r3, [r4, #20]
 8006062:	9201      	str	r2, [sp, #4]
 8006064:	9b01      	ldr	r3, [sp, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	bf14      	ite	ne
 800606a:	2102      	movne	r1, #2
 800606c:	2101      	moveq	r1, #1
 800606e:	61a3      	str	r3, [r4, #24]
 8006070:	6121      	str	r1, [r4, #16]
 8006072:	b1c5      	cbz	r5, 80060a6 <__d2b+0x96>
 8006074:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006078:	4405      	add	r5, r0
 800607a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800607e:	603d      	str	r5, [r7, #0]
 8006080:	6030      	str	r0, [r6, #0]
 8006082:	4620      	mov	r0, r4
 8006084:	b002      	add	sp, #8
 8006086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800608a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800608e:	e7d6      	b.n	800603e <__d2b+0x2e>
 8006090:	6161      	str	r1, [r4, #20]
 8006092:	e7e7      	b.n	8006064 <__d2b+0x54>
 8006094:	a801      	add	r0, sp, #4
 8006096:	f7ff fd5d 	bl	8005b54 <__lo0bits>
 800609a:	2101      	movs	r1, #1
 800609c:	9b01      	ldr	r3, [sp, #4]
 800609e:	6121      	str	r1, [r4, #16]
 80060a0:	6163      	str	r3, [r4, #20]
 80060a2:	3020      	adds	r0, #32
 80060a4:	e7e5      	b.n	8006072 <__d2b+0x62>
 80060a6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80060aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80060ae:	6038      	str	r0, [r7, #0]
 80060b0:	6918      	ldr	r0, [r3, #16]
 80060b2:	f7ff fd2f 	bl	8005b14 <__hi0bits>
 80060b6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80060ba:	6031      	str	r1, [r6, #0]
 80060bc:	e7e1      	b.n	8006082 <__d2b+0x72>
 80060be:	bf00      	nop
 80060c0:	08006f07 	.word	0x08006f07
 80060c4:	08006f18 	.word	0x08006f18

080060c8 <_calloc_r>:
 80060c8:	b570      	push	{r4, r5, r6, lr}
 80060ca:	fba1 5402 	umull	r5, r4, r1, r2
 80060ce:	b934      	cbnz	r4, 80060de <_calloc_r+0x16>
 80060d0:	4629      	mov	r1, r5
 80060d2:	f000 f875 	bl	80061c0 <_malloc_r>
 80060d6:	4606      	mov	r6, r0
 80060d8:	b928      	cbnz	r0, 80060e6 <_calloc_r+0x1e>
 80060da:	4630      	mov	r0, r6
 80060dc:	bd70      	pop	{r4, r5, r6, pc}
 80060de:	220c      	movs	r2, #12
 80060e0:	2600      	movs	r6, #0
 80060e2:	6002      	str	r2, [r0, #0]
 80060e4:	e7f9      	b.n	80060da <_calloc_r+0x12>
 80060e6:	462a      	mov	r2, r5
 80060e8:	4621      	mov	r1, r4
 80060ea:	f7fe f95f 	bl	80043ac <memset>
 80060ee:	e7f4      	b.n	80060da <_calloc_r+0x12>

080060f0 <_free_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4605      	mov	r5, r0
 80060f4:	2900      	cmp	r1, #0
 80060f6:	d040      	beq.n	800617a <_free_r+0x8a>
 80060f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060fc:	1f0c      	subs	r4, r1, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	bfb8      	it	lt
 8006102:	18e4      	addlt	r4, r4, r3
 8006104:	f000 f922 	bl	800634c <__malloc_lock>
 8006108:	4a1c      	ldr	r2, [pc, #112]	; (800617c <_free_r+0x8c>)
 800610a:	6813      	ldr	r3, [r2, #0]
 800610c:	b933      	cbnz	r3, 800611c <_free_r+0x2c>
 800610e:	6063      	str	r3, [r4, #4]
 8006110:	6014      	str	r4, [r2, #0]
 8006112:	4628      	mov	r0, r5
 8006114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006118:	f000 b91e 	b.w	8006358 <__malloc_unlock>
 800611c:	42a3      	cmp	r3, r4
 800611e:	d908      	bls.n	8006132 <_free_r+0x42>
 8006120:	6820      	ldr	r0, [r4, #0]
 8006122:	1821      	adds	r1, r4, r0
 8006124:	428b      	cmp	r3, r1
 8006126:	bf01      	itttt	eq
 8006128:	6819      	ldreq	r1, [r3, #0]
 800612a:	685b      	ldreq	r3, [r3, #4]
 800612c:	1809      	addeq	r1, r1, r0
 800612e:	6021      	streq	r1, [r4, #0]
 8006130:	e7ed      	b.n	800610e <_free_r+0x1e>
 8006132:	461a      	mov	r2, r3
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	b10b      	cbz	r3, 800613c <_free_r+0x4c>
 8006138:	42a3      	cmp	r3, r4
 800613a:	d9fa      	bls.n	8006132 <_free_r+0x42>
 800613c:	6811      	ldr	r1, [r2, #0]
 800613e:	1850      	adds	r0, r2, r1
 8006140:	42a0      	cmp	r0, r4
 8006142:	d10b      	bne.n	800615c <_free_r+0x6c>
 8006144:	6820      	ldr	r0, [r4, #0]
 8006146:	4401      	add	r1, r0
 8006148:	1850      	adds	r0, r2, r1
 800614a:	4283      	cmp	r3, r0
 800614c:	6011      	str	r1, [r2, #0]
 800614e:	d1e0      	bne.n	8006112 <_free_r+0x22>
 8006150:	6818      	ldr	r0, [r3, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	4401      	add	r1, r0
 8006156:	6011      	str	r1, [r2, #0]
 8006158:	6053      	str	r3, [r2, #4]
 800615a:	e7da      	b.n	8006112 <_free_r+0x22>
 800615c:	d902      	bls.n	8006164 <_free_r+0x74>
 800615e:	230c      	movs	r3, #12
 8006160:	602b      	str	r3, [r5, #0]
 8006162:	e7d6      	b.n	8006112 <_free_r+0x22>
 8006164:	6820      	ldr	r0, [r4, #0]
 8006166:	1821      	adds	r1, r4, r0
 8006168:	428b      	cmp	r3, r1
 800616a:	bf01      	itttt	eq
 800616c:	6819      	ldreq	r1, [r3, #0]
 800616e:	685b      	ldreq	r3, [r3, #4]
 8006170:	1809      	addeq	r1, r1, r0
 8006172:	6021      	streq	r1, [r4, #0]
 8006174:	6063      	str	r3, [r4, #4]
 8006176:	6054      	str	r4, [r2, #4]
 8006178:	e7cb      	b.n	8006112 <_free_r+0x22>
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	20000640 	.word	0x20000640

08006180 <sbrk_aligned>:
 8006180:	b570      	push	{r4, r5, r6, lr}
 8006182:	4e0e      	ldr	r6, [pc, #56]	; (80061bc <sbrk_aligned+0x3c>)
 8006184:	460c      	mov	r4, r1
 8006186:	6831      	ldr	r1, [r6, #0]
 8006188:	4605      	mov	r5, r0
 800618a:	b911      	cbnz	r1, 8006192 <sbrk_aligned+0x12>
 800618c:	f000 f88c 	bl	80062a8 <_sbrk_r>
 8006190:	6030      	str	r0, [r6, #0]
 8006192:	4621      	mov	r1, r4
 8006194:	4628      	mov	r0, r5
 8006196:	f000 f887 	bl	80062a8 <_sbrk_r>
 800619a:	1c43      	adds	r3, r0, #1
 800619c:	d00a      	beq.n	80061b4 <sbrk_aligned+0x34>
 800619e:	1cc4      	adds	r4, r0, #3
 80061a0:	f024 0403 	bic.w	r4, r4, #3
 80061a4:	42a0      	cmp	r0, r4
 80061a6:	d007      	beq.n	80061b8 <sbrk_aligned+0x38>
 80061a8:	1a21      	subs	r1, r4, r0
 80061aa:	4628      	mov	r0, r5
 80061ac:	f000 f87c 	bl	80062a8 <_sbrk_r>
 80061b0:	3001      	adds	r0, #1
 80061b2:	d101      	bne.n	80061b8 <sbrk_aligned+0x38>
 80061b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80061b8:	4620      	mov	r0, r4
 80061ba:	bd70      	pop	{r4, r5, r6, pc}
 80061bc:	20000644 	.word	0x20000644

080061c0 <_malloc_r>:
 80061c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c4:	1ccd      	adds	r5, r1, #3
 80061c6:	f025 0503 	bic.w	r5, r5, #3
 80061ca:	3508      	adds	r5, #8
 80061cc:	2d0c      	cmp	r5, #12
 80061ce:	bf38      	it	cc
 80061d0:	250c      	movcc	r5, #12
 80061d2:	2d00      	cmp	r5, #0
 80061d4:	4607      	mov	r7, r0
 80061d6:	db01      	blt.n	80061dc <_malloc_r+0x1c>
 80061d8:	42a9      	cmp	r1, r5
 80061da:	d905      	bls.n	80061e8 <_malloc_r+0x28>
 80061dc:	230c      	movs	r3, #12
 80061de:	2600      	movs	r6, #0
 80061e0:	603b      	str	r3, [r7, #0]
 80061e2:	4630      	mov	r0, r6
 80061e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e8:	4e2e      	ldr	r6, [pc, #184]	; (80062a4 <_malloc_r+0xe4>)
 80061ea:	f000 f8af 	bl	800634c <__malloc_lock>
 80061ee:	6833      	ldr	r3, [r6, #0]
 80061f0:	461c      	mov	r4, r3
 80061f2:	bb34      	cbnz	r4, 8006242 <_malloc_r+0x82>
 80061f4:	4629      	mov	r1, r5
 80061f6:	4638      	mov	r0, r7
 80061f8:	f7ff ffc2 	bl	8006180 <sbrk_aligned>
 80061fc:	1c43      	adds	r3, r0, #1
 80061fe:	4604      	mov	r4, r0
 8006200:	d14d      	bne.n	800629e <_malloc_r+0xde>
 8006202:	6834      	ldr	r4, [r6, #0]
 8006204:	4626      	mov	r6, r4
 8006206:	2e00      	cmp	r6, #0
 8006208:	d140      	bne.n	800628c <_malloc_r+0xcc>
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	4631      	mov	r1, r6
 800620e:	4638      	mov	r0, r7
 8006210:	eb04 0803 	add.w	r8, r4, r3
 8006214:	f000 f848 	bl	80062a8 <_sbrk_r>
 8006218:	4580      	cmp	r8, r0
 800621a:	d13a      	bne.n	8006292 <_malloc_r+0xd2>
 800621c:	6821      	ldr	r1, [r4, #0]
 800621e:	3503      	adds	r5, #3
 8006220:	1a6d      	subs	r5, r5, r1
 8006222:	f025 0503 	bic.w	r5, r5, #3
 8006226:	3508      	adds	r5, #8
 8006228:	2d0c      	cmp	r5, #12
 800622a:	bf38      	it	cc
 800622c:	250c      	movcc	r5, #12
 800622e:	4638      	mov	r0, r7
 8006230:	4629      	mov	r1, r5
 8006232:	f7ff ffa5 	bl	8006180 <sbrk_aligned>
 8006236:	3001      	adds	r0, #1
 8006238:	d02b      	beq.n	8006292 <_malloc_r+0xd2>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	442b      	add	r3, r5
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	e00e      	b.n	8006260 <_malloc_r+0xa0>
 8006242:	6822      	ldr	r2, [r4, #0]
 8006244:	1b52      	subs	r2, r2, r5
 8006246:	d41e      	bmi.n	8006286 <_malloc_r+0xc6>
 8006248:	2a0b      	cmp	r2, #11
 800624a:	d916      	bls.n	800627a <_malloc_r+0xba>
 800624c:	1961      	adds	r1, r4, r5
 800624e:	42a3      	cmp	r3, r4
 8006250:	6025      	str	r5, [r4, #0]
 8006252:	bf18      	it	ne
 8006254:	6059      	strne	r1, [r3, #4]
 8006256:	6863      	ldr	r3, [r4, #4]
 8006258:	bf08      	it	eq
 800625a:	6031      	streq	r1, [r6, #0]
 800625c:	5162      	str	r2, [r4, r5]
 800625e:	604b      	str	r3, [r1, #4]
 8006260:	4638      	mov	r0, r7
 8006262:	f104 060b 	add.w	r6, r4, #11
 8006266:	f000 f877 	bl	8006358 <__malloc_unlock>
 800626a:	f026 0607 	bic.w	r6, r6, #7
 800626e:	1d23      	adds	r3, r4, #4
 8006270:	1af2      	subs	r2, r6, r3
 8006272:	d0b6      	beq.n	80061e2 <_malloc_r+0x22>
 8006274:	1b9b      	subs	r3, r3, r6
 8006276:	50a3      	str	r3, [r4, r2]
 8006278:	e7b3      	b.n	80061e2 <_malloc_r+0x22>
 800627a:	6862      	ldr	r2, [r4, #4]
 800627c:	42a3      	cmp	r3, r4
 800627e:	bf0c      	ite	eq
 8006280:	6032      	streq	r2, [r6, #0]
 8006282:	605a      	strne	r2, [r3, #4]
 8006284:	e7ec      	b.n	8006260 <_malloc_r+0xa0>
 8006286:	4623      	mov	r3, r4
 8006288:	6864      	ldr	r4, [r4, #4]
 800628a:	e7b2      	b.n	80061f2 <_malloc_r+0x32>
 800628c:	4634      	mov	r4, r6
 800628e:	6876      	ldr	r6, [r6, #4]
 8006290:	e7b9      	b.n	8006206 <_malloc_r+0x46>
 8006292:	230c      	movs	r3, #12
 8006294:	4638      	mov	r0, r7
 8006296:	603b      	str	r3, [r7, #0]
 8006298:	f000 f85e 	bl	8006358 <__malloc_unlock>
 800629c:	e7a1      	b.n	80061e2 <_malloc_r+0x22>
 800629e:	6025      	str	r5, [r4, #0]
 80062a0:	e7de      	b.n	8006260 <_malloc_r+0xa0>
 80062a2:	bf00      	nop
 80062a4:	20000640 	.word	0x20000640

080062a8 <_sbrk_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	2300      	movs	r3, #0
 80062ac:	4d05      	ldr	r5, [pc, #20]	; (80062c4 <_sbrk_r+0x1c>)
 80062ae:	4604      	mov	r4, r0
 80062b0:	4608      	mov	r0, r1
 80062b2:	602b      	str	r3, [r5, #0]
 80062b4:	f7fa ffd2 	bl	800125c <_sbrk>
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d102      	bne.n	80062c2 <_sbrk_r+0x1a>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	b103      	cbz	r3, 80062c2 <_sbrk_r+0x1a>
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	20000648 	.word	0x20000648

080062c8 <__assert_func>:
 80062c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062ca:	4614      	mov	r4, r2
 80062cc:	461a      	mov	r2, r3
 80062ce:	4b09      	ldr	r3, [pc, #36]	; (80062f4 <__assert_func+0x2c>)
 80062d0:	4605      	mov	r5, r0
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68d8      	ldr	r0, [r3, #12]
 80062d6:	b14c      	cbz	r4, 80062ec <__assert_func+0x24>
 80062d8:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <__assert_func+0x30>)
 80062da:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062de:	9100      	str	r1, [sp, #0]
 80062e0:	462b      	mov	r3, r5
 80062e2:	4906      	ldr	r1, [pc, #24]	; (80062fc <__assert_func+0x34>)
 80062e4:	f000 f80e 	bl	8006304 <fiprintf>
 80062e8:	f000 fa62 	bl	80067b0 <abort>
 80062ec:	4b04      	ldr	r3, [pc, #16]	; (8006300 <__assert_func+0x38>)
 80062ee:	461c      	mov	r4, r3
 80062f0:	e7f3      	b.n	80062da <__assert_func+0x12>
 80062f2:	bf00      	nop
 80062f4:	2000000c 	.word	0x2000000c
 80062f8:	08007074 	.word	0x08007074
 80062fc:	08007081 	.word	0x08007081
 8006300:	080070af 	.word	0x080070af

08006304 <fiprintf>:
 8006304:	b40e      	push	{r1, r2, r3}
 8006306:	b503      	push	{r0, r1, lr}
 8006308:	4601      	mov	r1, r0
 800630a:	ab03      	add	r3, sp, #12
 800630c:	4805      	ldr	r0, [pc, #20]	; (8006324 <fiprintf+0x20>)
 800630e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006312:	6800      	ldr	r0, [r0, #0]
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	f000 f84d 	bl	80063b4 <_vfiprintf_r>
 800631a:	b002      	add	sp, #8
 800631c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006320:	b003      	add	sp, #12
 8006322:	4770      	bx	lr
 8006324:	2000000c 	.word	0x2000000c

08006328 <__ascii_mbtowc>:
 8006328:	b082      	sub	sp, #8
 800632a:	b901      	cbnz	r1, 800632e <__ascii_mbtowc+0x6>
 800632c:	a901      	add	r1, sp, #4
 800632e:	b142      	cbz	r2, 8006342 <__ascii_mbtowc+0x1a>
 8006330:	b14b      	cbz	r3, 8006346 <__ascii_mbtowc+0x1e>
 8006332:	7813      	ldrb	r3, [r2, #0]
 8006334:	600b      	str	r3, [r1, #0]
 8006336:	7812      	ldrb	r2, [r2, #0]
 8006338:	1e10      	subs	r0, r2, #0
 800633a:	bf18      	it	ne
 800633c:	2001      	movne	r0, #1
 800633e:	b002      	add	sp, #8
 8006340:	4770      	bx	lr
 8006342:	4610      	mov	r0, r2
 8006344:	e7fb      	b.n	800633e <__ascii_mbtowc+0x16>
 8006346:	f06f 0001 	mvn.w	r0, #1
 800634a:	e7f8      	b.n	800633e <__ascii_mbtowc+0x16>

0800634c <__malloc_lock>:
 800634c:	4801      	ldr	r0, [pc, #4]	; (8006354 <__malloc_lock+0x8>)
 800634e:	f000 bbeb 	b.w	8006b28 <__retarget_lock_acquire_recursive>
 8006352:	bf00      	nop
 8006354:	2000064c 	.word	0x2000064c

08006358 <__malloc_unlock>:
 8006358:	4801      	ldr	r0, [pc, #4]	; (8006360 <__malloc_unlock+0x8>)
 800635a:	f000 bbe6 	b.w	8006b2a <__retarget_lock_release_recursive>
 800635e:	bf00      	nop
 8006360:	2000064c 	.word	0x2000064c

08006364 <__sfputc_r>:
 8006364:	6893      	ldr	r3, [r2, #8]
 8006366:	b410      	push	{r4}
 8006368:	3b01      	subs	r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	6093      	str	r3, [r2, #8]
 800636e:	da07      	bge.n	8006380 <__sfputc_r+0x1c>
 8006370:	6994      	ldr	r4, [r2, #24]
 8006372:	42a3      	cmp	r3, r4
 8006374:	db01      	blt.n	800637a <__sfputc_r+0x16>
 8006376:	290a      	cmp	r1, #10
 8006378:	d102      	bne.n	8006380 <__sfputc_r+0x1c>
 800637a:	bc10      	pop	{r4}
 800637c:	f000 b94a 	b.w	8006614 <__swbuf_r>
 8006380:	6813      	ldr	r3, [r2, #0]
 8006382:	1c58      	adds	r0, r3, #1
 8006384:	6010      	str	r0, [r2, #0]
 8006386:	7019      	strb	r1, [r3, #0]
 8006388:	4608      	mov	r0, r1
 800638a:	bc10      	pop	{r4}
 800638c:	4770      	bx	lr

0800638e <__sfputs_r>:
 800638e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006390:	4606      	mov	r6, r0
 8006392:	460f      	mov	r7, r1
 8006394:	4614      	mov	r4, r2
 8006396:	18d5      	adds	r5, r2, r3
 8006398:	42ac      	cmp	r4, r5
 800639a:	d101      	bne.n	80063a0 <__sfputs_r+0x12>
 800639c:	2000      	movs	r0, #0
 800639e:	e007      	b.n	80063b0 <__sfputs_r+0x22>
 80063a0:	463a      	mov	r2, r7
 80063a2:	4630      	mov	r0, r6
 80063a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063a8:	f7ff ffdc 	bl	8006364 <__sfputc_r>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d1f3      	bne.n	8006398 <__sfputs_r+0xa>
 80063b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063b4 <_vfiprintf_r>:
 80063b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b8:	460d      	mov	r5, r1
 80063ba:	4614      	mov	r4, r2
 80063bc:	4698      	mov	r8, r3
 80063be:	4606      	mov	r6, r0
 80063c0:	b09d      	sub	sp, #116	; 0x74
 80063c2:	b118      	cbz	r0, 80063cc <_vfiprintf_r+0x18>
 80063c4:	6983      	ldr	r3, [r0, #24]
 80063c6:	b90b      	cbnz	r3, 80063cc <_vfiprintf_r+0x18>
 80063c8:	f000 fb10 	bl	80069ec <__sinit>
 80063cc:	4b89      	ldr	r3, [pc, #548]	; (80065f4 <_vfiprintf_r+0x240>)
 80063ce:	429d      	cmp	r5, r3
 80063d0:	d11b      	bne.n	800640a <_vfiprintf_r+0x56>
 80063d2:	6875      	ldr	r5, [r6, #4]
 80063d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063d6:	07d9      	lsls	r1, r3, #31
 80063d8:	d405      	bmi.n	80063e6 <_vfiprintf_r+0x32>
 80063da:	89ab      	ldrh	r3, [r5, #12]
 80063dc:	059a      	lsls	r2, r3, #22
 80063de:	d402      	bmi.n	80063e6 <_vfiprintf_r+0x32>
 80063e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063e2:	f000 fba1 	bl	8006b28 <__retarget_lock_acquire_recursive>
 80063e6:	89ab      	ldrh	r3, [r5, #12]
 80063e8:	071b      	lsls	r3, r3, #28
 80063ea:	d501      	bpl.n	80063f0 <_vfiprintf_r+0x3c>
 80063ec:	692b      	ldr	r3, [r5, #16]
 80063ee:	b9eb      	cbnz	r3, 800642c <_vfiprintf_r+0x78>
 80063f0:	4629      	mov	r1, r5
 80063f2:	4630      	mov	r0, r6
 80063f4:	f000 f96e 	bl	80066d4 <__swsetup_r>
 80063f8:	b1c0      	cbz	r0, 800642c <_vfiprintf_r+0x78>
 80063fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063fc:	07dc      	lsls	r4, r3, #31
 80063fe:	d50e      	bpl.n	800641e <_vfiprintf_r+0x6a>
 8006400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006404:	b01d      	add	sp, #116	; 0x74
 8006406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640a:	4b7b      	ldr	r3, [pc, #492]	; (80065f8 <_vfiprintf_r+0x244>)
 800640c:	429d      	cmp	r5, r3
 800640e:	d101      	bne.n	8006414 <_vfiprintf_r+0x60>
 8006410:	68b5      	ldr	r5, [r6, #8]
 8006412:	e7df      	b.n	80063d4 <_vfiprintf_r+0x20>
 8006414:	4b79      	ldr	r3, [pc, #484]	; (80065fc <_vfiprintf_r+0x248>)
 8006416:	429d      	cmp	r5, r3
 8006418:	bf08      	it	eq
 800641a:	68f5      	ldreq	r5, [r6, #12]
 800641c:	e7da      	b.n	80063d4 <_vfiprintf_r+0x20>
 800641e:	89ab      	ldrh	r3, [r5, #12]
 8006420:	0598      	lsls	r0, r3, #22
 8006422:	d4ed      	bmi.n	8006400 <_vfiprintf_r+0x4c>
 8006424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006426:	f000 fb80 	bl	8006b2a <__retarget_lock_release_recursive>
 800642a:	e7e9      	b.n	8006400 <_vfiprintf_r+0x4c>
 800642c:	2300      	movs	r3, #0
 800642e:	9309      	str	r3, [sp, #36]	; 0x24
 8006430:	2320      	movs	r3, #32
 8006432:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006436:	2330      	movs	r3, #48	; 0x30
 8006438:	f04f 0901 	mov.w	r9, #1
 800643c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006440:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006600 <_vfiprintf_r+0x24c>
 8006444:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006448:	4623      	mov	r3, r4
 800644a:	469a      	mov	sl, r3
 800644c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006450:	b10a      	cbz	r2, 8006456 <_vfiprintf_r+0xa2>
 8006452:	2a25      	cmp	r2, #37	; 0x25
 8006454:	d1f9      	bne.n	800644a <_vfiprintf_r+0x96>
 8006456:	ebba 0b04 	subs.w	fp, sl, r4
 800645a:	d00b      	beq.n	8006474 <_vfiprintf_r+0xc0>
 800645c:	465b      	mov	r3, fp
 800645e:	4622      	mov	r2, r4
 8006460:	4629      	mov	r1, r5
 8006462:	4630      	mov	r0, r6
 8006464:	f7ff ff93 	bl	800638e <__sfputs_r>
 8006468:	3001      	adds	r0, #1
 800646a:	f000 80aa 	beq.w	80065c2 <_vfiprintf_r+0x20e>
 800646e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006470:	445a      	add	r2, fp
 8006472:	9209      	str	r2, [sp, #36]	; 0x24
 8006474:	f89a 3000 	ldrb.w	r3, [sl]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 80a2 	beq.w	80065c2 <_vfiprintf_r+0x20e>
 800647e:	2300      	movs	r3, #0
 8006480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006484:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006488:	f10a 0a01 	add.w	sl, sl, #1
 800648c:	9304      	str	r3, [sp, #16]
 800648e:	9307      	str	r3, [sp, #28]
 8006490:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006494:	931a      	str	r3, [sp, #104]	; 0x68
 8006496:	4654      	mov	r4, sl
 8006498:	2205      	movs	r2, #5
 800649a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800649e:	4858      	ldr	r0, [pc, #352]	; (8006600 <_vfiprintf_r+0x24c>)
 80064a0:	f7ff fa74 	bl	800598c <memchr>
 80064a4:	9a04      	ldr	r2, [sp, #16]
 80064a6:	b9d8      	cbnz	r0, 80064e0 <_vfiprintf_r+0x12c>
 80064a8:	06d1      	lsls	r1, r2, #27
 80064aa:	bf44      	itt	mi
 80064ac:	2320      	movmi	r3, #32
 80064ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064b2:	0713      	lsls	r3, r2, #28
 80064b4:	bf44      	itt	mi
 80064b6:	232b      	movmi	r3, #43	; 0x2b
 80064b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064bc:	f89a 3000 	ldrb.w	r3, [sl]
 80064c0:	2b2a      	cmp	r3, #42	; 0x2a
 80064c2:	d015      	beq.n	80064f0 <_vfiprintf_r+0x13c>
 80064c4:	4654      	mov	r4, sl
 80064c6:	2000      	movs	r0, #0
 80064c8:	f04f 0c0a 	mov.w	ip, #10
 80064cc:	9a07      	ldr	r2, [sp, #28]
 80064ce:	4621      	mov	r1, r4
 80064d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064d4:	3b30      	subs	r3, #48	; 0x30
 80064d6:	2b09      	cmp	r3, #9
 80064d8:	d94e      	bls.n	8006578 <_vfiprintf_r+0x1c4>
 80064da:	b1b0      	cbz	r0, 800650a <_vfiprintf_r+0x156>
 80064dc:	9207      	str	r2, [sp, #28]
 80064de:	e014      	b.n	800650a <_vfiprintf_r+0x156>
 80064e0:	eba0 0308 	sub.w	r3, r0, r8
 80064e4:	fa09 f303 	lsl.w	r3, r9, r3
 80064e8:	4313      	orrs	r3, r2
 80064ea:	46a2      	mov	sl, r4
 80064ec:	9304      	str	r3, [sp, #16]
 80064ee:	e7d2      	b.n	8006496 <_vfiprintf_r+0xe2>
 80064f0:	9b03      	ldr	r3, [sp, #12]
 80064f2:	1d19      	adds	r1, r3, #4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	9103      	str	r1, [sp, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	bfbb      	ittet	lt
 80064fc:	425b      	neglt	r3, r3
 80064fe:	f042 0202 	orrlt.w	r2, r2, #2
 8006502:	9307      	strge	r3, [sp, #28]
 8006504:	9307      	strlt	r3, [sp, #28]
 8006506:	bfb8      	it	lt
 8006508:	9204      	strlt	r2, [sp, #16]
 800650a:	7823      	ldrb	r3, [r4, #0]
 800650c:	2b2e      	cmp	r3, #46	; 0x2e
 800650e:	d10c      	bne.n	800652a <_vfiprintf_r+0x176>
 8006510:	7863      	ldrb	r3, [r4, #1]
 8006512:	2b2a      	cmp	r3, #42	; 0x2a
 8006514:	d135      	bne.n	8006582 <_vfiprintf_r+0x1ce>
 8006516:	9b03      	ldr	r3, [sp, #12]
 8006518:	3402      	adds	r4, #2
 800651a:	1d1a      	adds	r2, r3, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	9203      	str	r2, [sp, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	bfb8      	it	lt
 8006524:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006528:	9305      	str	r3, [sp, #20]
 800652a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006604 <_vfiprintf_r+0x250>
 800652e:	2203      	movs	r2, #3
 8006530:	4650      	mov	r0, sl
 8006532:	7821      	ldrb	r1, [r4, #0]
 8006534:	f7ff fa2a 	bl	800598c <memchr>
 8006538:	b140      	cbz	r0, 800654c <_vfiprintf_r+0x198>
 800653a:	2340      	movs	r3, #64	; 0x40
 800653c:	eba0 000a 	sub.w	r0, r0, sl
 8006540:	fa03 f000 	lsl.w	r0, r3, r0
 8006544:	9b04      	ldr	r3, [sp, #16]
 8006546:	3401      	adds	r4, #1
 8006548:	4303      	orrs	r3, r0
 800654a:	9304      	str	r3, [sp, #16]
 800654c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006550:	2206      	movs	r2, #6
 8006552:	482d      	ldr	r0, [pc, #180]	; (8006608 <_vfiprintf_r+0x254>)
 8006554:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006558:	f7ff fa18 	bl	800598c <memchr>
 800655c:	2800      	cmp	r0, #0
 800655e:	d03f      	beq.n	80065e0 <_vfiprintf_r+0x22c>
 8006560:	4b2a      	ldr	r3, [pc, #168]	; (800660c <_vfiprintf_r+0x258>)
 8006562:	bb1b      	cbnz	r3, 80065ac <_vfiprintf_r+0x1f8>
 8006564:	9b03      	ldr	r3, [sp, #12]
 8006566:	3307      	adds	r3, #7
 8006568:	f023 0307 	bic.w	r3, r3, #7
 800656c:	3308      	adds	r3, #8
 800656e:	9303      	str	r3, [sp, #12]
 8006570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006572:	443b      	add	r3, r7
 8006574:	9309      	str	r3, [sp, #36]	; 0x24
 8006576:	e767      	b.n	8006448 <_vfiprintf_r+0x94>
 8006578:	460c      	mov	r4, r1
 800657a:	2001      	movs	r0, #1
 800657c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006580:	e7a5      	b.n	80064ce <_vfiprintf_r+0x11a>
 8006582:	2300      	movs	r3, #0
 8006584:	f04f 0c0a 	mov.w	ip, #10
 8006588:	4619      	mov	r1, r3
 800658a:	3401      	adds	r4, #1
 800658c:	9305      	str	r3, [sp, #20]
 800658e:	4620      	mov	r0, r4
 8006590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006594:	3a30      	subs	r2, #48	; 0x30
 8006596:	2a09      	cmp	r2, #9
 8006598:	d903      	bls.n	80065a2 <_vfiprintf_r+0x1ee>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0c5      	beq.n	800652a <_vfiprintf_r+0x176>
 800659e:	9105      	str	r1, [sp, #20]
 80065a0:	e7c3      	b.n	800652a <_vfiprintf_r+0x176>
 80065a2:	4604      	mov	r4, r0
 80065a4:	2301      	movs	r3, #1
 80065a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80065aa:	e7f0      	b.n	800658e <_vfiprintf_r+0x1da>
 80065ac:	ab03      	add	r3, sp, #12
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	462a      	mov	r2, r5
 80065b2:	4630      	mov	r0, r6
 80065b4:	4b16      	ldr	r3, [pc, #88]	; (8006610 <_vfiprintf_r+0x25c>)
 80065b6:	a904      	add	r1, sp, #16
 80065b8:	f7fd ff9e 	bl	80044f8 <_printf_float>
 80065bc:	4607      	mov	r7, r0
 80065be:	1c78      	adds	r0, r7, #1
 80065c0:	d1d6      	bne.n	8006570 <_vfiprintf_r+0x1bc>
 80065c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065c4:	07d9      	lsls	r1, r3, #31
 80065c6:	d405      	bmi.n	80065d4 <_vfiprintf_r+0x220>
 80065c8:	89ab      	ldrh	r3, [r5, #12]
 80065ca:	059a      	lsls	r2, r3, #22
 80065cc:	d402      	bmi.n	80065d4 <_vfiprintf_r+0x220>
 80065ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065d0:	f000 faab 	bl	8006b2a <__retarget_lock_release_recursive>
 80065d4:	89ab      	ldrh	r3, [r5, #12]
 80065d6:	065b      	lsls	r3, r3, #25
 80065d8:	f53f af12 	bmi.w	8006400 <_vfiprintf_r+0x4c>
 80065dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065de:	e711      	b.n	8006404 <_vfiprintf_r+0x50>
 80065e0:	ab03      	add	r3, sp, #12
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	462a      	mov	r2, r5
 80065e6:	4630      	mov	r0, r6
 80065e8:	4b09      	ldr	r3, [pc, #36]	; (8006610 <_vfiprintf_r+0x25c>)
 80065ea:	a904      	add	r1, sp, #16
 80065ec:	f7fe fa20 	bl	8004a30 <_printf_i>
 80065f0:	e7e4      	b.n	80065bc <_vfiprintf_r+0x208>
 80065f2:	bf00      	nop
 80065f4:	080071ec 	.word	0x080071ec
 80065f8:	0800720c 	.word	0x0800720c
 80065fc:	080071cc 	.word	0x080071cc
 8006600:	080070ba 	.word	0x080070ba
 8006604:	080070c0 	.word	0x080070c0
 8006608:	080070c4 	.word	0x080070c4
 800660c:	080044f9 	.word	0x080044f9
 8006610:	0800638f 	.word	0x0800638f

08006614 <__swbuf_r>:
 8006614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006616:	460e      	mov	r6, r1
 8006618:	4614      	mov	r4, r2
 800661a:	4605      	mov	r5, r0
 800661c:	b118      	cbz	r0, 8006626 <__swbuf_r+0x12>
 800661e:	6983      	ldr	r3, [r0, #24]
 8006620:	b90b      	cbnz	r3, 8006626 <__swbuf_r+0x12>
 8006622:	f000 f9e3 	bl	80069ec <__sinit>
 8006626:	4b21      	ldr	r3, [pc, #132]	; (80066ac <__swbuf_r+0x98>)
 8006628:	429c      	cmp	r4, r3
 800662a:	d12b      	bne.n	8006684 <__swbuf_r+0x70>
 800662c:	686c      	ldr	r4, [r5, #4]
 800662e:	69a3      	ldr	r3, [r4, #24]
 8006630:	60a3      	str	r3, [r4, #8]
 8006632:	89a3      	ldrh	r3, [r4, #12]
 8006634:	071a      	lsls	r2, r3, #28
 8006636:	d52f      	bpl.n	8006698 <__swbuf_r+0x84>
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	b36b      	cbz	r3, 8006698 <__swbuf_r+0x84>
 800663c:	6923      	ldr	r3, [r4, #16]
 800663e:	6820      	ldr	r0, [r4, #0]
 8006640:	b2f6      	uxtb	r6, r6
 8006642:	1ac0      	subs	r0, r0, r3
 8006644:	6963      	ldr	r3, [r4, #20]
 8006646:	4637      	mov	r7, r6
 8006648:	4283      	cmp	r3, r0
 800664a:	dc04      	bgt.n	8006656 <__swbuf_r+0x42>
 800664c:	4621      	mov	r1, r4
 800664e:	4628      	mov	r0, r5
 8006650:	f000 f938 	bl	80068c4 <_fflush_r>
 8006654:	bb30      	cbnz	r0, 80066a4 <__swbuf_r+0x90>
 8006656:	68a3      	ldr	r3, [r4, #8]
 8006658:	3001      	adds	r0, #1
 800665a:	3b01      	subs	r3, #1
 800665c:	60a3      	str	r3, [r4, #8]
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	6022      	str	r2, [r4, #0]
 8006664:	701e      	strb	r6, [r3, #0]
 8006666:	6963      	ldr	r3, [r4, #20]
 8006668:	4283      	cmp	r3, r0
 800666a:	d004      	beq.n	8006676 <__swbuf_r+0x62>
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	07db      	lsls	r3, r3, #31
 8006670:	d506      	bpl.n	8006680 <__swbuf_r+0x6c>
 8006672:	2e0a      	cmp	r6, #10
 8006674:	d104      	bne.n	8006680 <__swbuf_r+0x6c>
 8006676:	4621      	mov	r1, r4
 8006678:	4628      	mov	r0, r5
 800667a:	f000 f923 	bl	80068c4 <_fflush_r>
 800667e:	b988      	cbnz	r0, 80066a4 <__swbuf_r+0x90>
 8006680:	4638      	mov	r0, r7
 8006682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006684:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <__swbuf_r+0x9c>)
 8006686:	429c      	cmp	r4, r3
 8006688:	d101      	bne.n	800668e <__swbuf_r+0x7a>
 800668a:	68ac      	ldr	r4, [r5, #8]
 800668c:	e7cf      	b.n	800662e <__swbuf_r+0x1a>
 800668e:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <__swbuf_r+0xa0>)
 8006690:	429c      	cmp	r4, r3
 8006692:	bf08      	it	eq
 8006694:	68ec      	ldreq	r4, [r5, #12]
 8006696:	e7ca      	b.n	800662e <__swbuf_r+0x1a>
 8006698:	4621      	mov	r1, r4
 800669a:	4628      	mov	r0, r5
 800669c:	f000 f81a 	bl	80066d4 <__swsetup_r>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d0cb      	beq.n	800663c <__swbuf_r+0x28>
 80066a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80066a8:	e7ea      	b.n	8006680 <__swbuf_r+0x6c>
 80066aa:	bf00      	nop
 80066ac:	080071ec 	.word	0x080071ec
 80066b0:	0800720c 	.word	0x0800720c
 80066b4:	080071cc 	.word	0x080071cc

080066b8 <__ascii_wctomb>:
 80066b8:	4603      	mov	r3, r0
 80066ba:	4608      	mov	r0, r1
 80066bc:	b141      	cbz	r1, 80066d0 <__ascii_wctomb+0x18>
 80066be:	2aff      	cmp	r2, #255	; 0xff
 80066c0:	d904      	bls.n	80066cc <__ascii_wctomb+0x14>
 80066c2:	228a      	movs	r2, #138	; 0x8a
 80066c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	4770      	bx	lr
 80066cc:	2001      	movs	r0, #1
 80066ce:	700a      	strb	r2, [r1, #0]
 80066d0:	4770      	bx	lr
	...

080066d4 <__swsetup_r>:
 80066d4:	4b32      	ldr	r3, [pc, #200]	; (80067a0 <__swsetup_r+0xcc>)
 80066d6:	b570      	push	{r4, r5, r6, lr}
 80066d8:	681d      	ldr	r5, [r3, #0]
 80066da:	4606      	mov	r6, r0
 80066dc:	460c      	mov	r4, r1
 80066de:	b125      	cbz	r5, 80066ea <__swsetup_r+0x16>
 80066e0:	69ab      	ldr	r3, [r5, #24]
 80066e2:	b913      	cbnz	r3, 80066ea <__swsetup_r+0x16>
 80066e4:	4628      	mov	r0, r5
 80066e6:	f000 f981 	bl	80069ec <__sinit>
 80066ea:	4b2e      	ldr	r3, [pc, #184]	; (80067a4 <__swsetup_r+0xd0>)
 80066ec:	429c      	cmp	r4, r3
 80066ee:	d10f      	bne.n	8006710 <__swsetup_r+0x3c>
 80066f0:	686c      	ldr	r4, [r5, #4]
 80066f2:	89a3      	ldrh	r3, [r4, #12]
 80066f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066f8:	0719      	lsls	r1, r3, #28
 80066fa:	d42c      	bmi.n	8006756 <__swsetup_r+0x82>
 80066fc:	06dd      	lsls	r5, r3, #27
 80066fe:	d411      	bmi.n	8006724 <__swsetup_r+0x50>
 8006700:	2309      	movs	r3, #9
 8006702:	6033      	str	r3, [r6, #0]
 8006704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800670c:	81a3      	strh	r3, [r4, #12]
 800670e:	e03e      	b.n	800678e <__swsetup_r+0xba>
 8006710:	4b25      	ldr	r3, [pc, #148]	; (80067a8 <__swsetup_r+0xd4>)
 8006712:	429c      	cmp	r4, r3
 8006714:	d101      	bne.n	800671a <__swsetup_r+0x46>
 8006716:	68ac      	ldr	r4, [r5, #8]
 8006718:	e7eb      	b.n	80066f2 <__swsetup_r+0x1e>
 800671a:	4b24      	ldr	r3, [pc, #144]	; (80067ac <__swsetup_r+0xd8>)
 800671c:	429c      	cmp	r4, r3
 800671e:	bf08      	it	eq
 8006720:	68ec      	ldreq	r4, [r5, #12]
 8006722:	e7e6      	b.n	80066f2 <__swsetup_r+0x1e>
 8006724:	0758      	lsls	r0, r3, #29
 8006726:	d512      	bpl.n	800674e <__swsetup_r+0x7a>
 8006728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800672a:	b141      	cbz	r1, 800673e <__swsetup_r+0x6a>
 800672c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006730:	4299      	cmp	r1, r3
 8006732:	d002      	beq.n	800673a <__swsetup_r+0x66>
 8006734:	4630      	mov	r0, r6
 8006736:	f7ff fcdb 	bl	80060f0 <_free_r>
 800673a:	2300      	movs	r3, #0
 800673c:	6363      	str	r3, [r4, #52]	; 0x34
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006744:	81a3      	strh	r3, [r4, #12]
 8006746:	2300      	movs	r3, #0
 8006748:	6063      	str	r3, [r4, #4]
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	f043 0308 	orr.w	r3, r3, #8
 8006754:	81a3      	strh	r3, [r4, #12]
 8006756:	6923      	ldr	r3, [r4, #16]
 8006758:	b94b      	cbnz	r3, 800676e <__swsetup_r+0x9a>
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006764:	d003      	beq.n	800676e <__swsetup_r+0x9a>
 8006766:	4621      	mov	r1, r4
 8006768:	4630      	mov	r0, r6
 800676a:	f000 fa05 	bl	8006b78 <__smakebuf_r>
 800676e:	89a0      	ldrh	r0, [r4, #12]
 8006770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006774:	f010 0301 	ands.w	r3, r0, #1
 8006778:	d00a      	beq.n	8006790 <__swsetup_r+0xbc>
 800677a:	2300      	movs	r3, #0
 800677c:	60a3      	str	r3, [r4, #8]
 800677e:	6963      	ldr	r3, [r4, #20]
 8006780:	425b      	negs	r3, r3
 8006782:	61a3      	str	r3, [r4, #24]
 8006784:	6923      	ldr	r3, [r4, #16]
 8006786:	b943      	cbnz	r3, 800679a <__swsetup_r+0xc6>
 8006788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800678c:	d1ba      	bne.n	8006704 <__swsetup_r+0x30>
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	0781      	lsls	r1, r0, #30
 8006792:	bf58      	it	pl
 8006794:	6963      	ldrpl	r3, [r4, #20]
 8006796:	60a3      	str	r3, [r4, #8]
 8006798:	e7f4      	b.n	8006784 <__swsetup_r+0xb0>
 800679a:	2000      	movs	r0, #0
 800679c:	e7f7      	b.n	800678e <__swsetup_r+0xba>
 800679e:	bf00      	nop
 80067a0:	2000000c 	.word	0x2000000c
 80067a4:	080071ec 	.word	0x080071ec
 80067a8:	0800720c 	.word	0x0800720c
 80067ac:	080071cc 	.word	0x080071cc

080067b0 <abort>:
 80067b0:	2006      	movs	r0, #6
 80067b2:	b508      	push	{r3, lr}
 80067b4:	f000 fa48 	bl	8006c48 <raise>
 80067b8:	2001      	movs	r0, #1
 80067ba:	f7fa fcdc 	bl	8001176 <_exit>
	...

080067c0 <__sflush_r>:
 80067c0:	898a      	ldrh	r2, [r1, #12]
 80067c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c4:	4605      	mov	r5, r0
 80067c6:	0710      	lsls	r0, r2, #28
 80067c8:	460c      	mov	r4, r1
 80067ca:	d457      	bmi.n	800687c <__sflush_r+0xbc>
 80067cc:	684b      	ldr	r3, [r1, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	dc04      	bgt.n	80067dc <__sflush_r+0x1c>
 80067d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	dc01      	bgt.n	80067dc <__sflush_r+0x1c>
 80067d8:	2000      	movs	r0, #0
 80067da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067de:	2e00      	cmp	r6, #0
 80067e0:	d0fa      	beq.n	80067d8 <__sflush_r+0x18>
 80067e2:	2300      	movs	r3, #0
 80067e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067e8:	682f      	ldr	r7, [r5, #0]
 80067ea:	602b      	str	r3, [r5, #0]
 80067ec:	d032      	beq.n	8006854 <__sflush_r+0x94>
 80067ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	075a      	lsls	r2, r3, #29
 80067f4:	d505      	bpl.n	8006802 <__sflush_r+0x42>
 80067f6:	6863      	ldr	r3, [r4, #4]
 80067f8:	1ac0      	subs	r0, r0, r3
 80067fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067fc:	b10b      	cbz	r3, 8006802 <__sflush_r+0x42>
 80067fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006800:	1ac0      	subs	r0, r0, r3
 8006802:	2300      	movs	r3, #0
 8006804:	4602      	mov	r2, r0
 8006806:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006808:	4628      	mov	r0, r5
 800680a:	6a21      	ldr	r1, [r4, #32]
 800680c:	47b0      	blx	r6
 800680e:	1c43      	adds	r3, r0, #1
 8006810:	89a3      	ldrh	r3, [r4, #12]
 8006812:	d106      	bne.n	8006822 <__sflush_r+0x62>
 8006814:	6829      	ldr	r1, [r5, #0]
 8006816:	291d      	cmp	r1, #29
 8006818:	d82c      	bhi.n	8006874 <__sflush_r+0xb4>
 800681a:	4a29      	ldr	r2, [pc, #164]	; (80068c0 <__sflush_r+0x100>)
 800681c:	40ca      	lsrs	r2, r1
 800681e:	07d6      	lsls	r6, r2, #31
 8006820:	d528      	bpl.n	8006874 <__sflush_r+0xb4>
 8006822:	2200      	movs	r2, #0
 8006824:	6062      	str	r2, [r4, #4]
 8006826:	6922      	ldr	r2, [r4, #16]
 8006828:	04d9      	lsls	r1, r3, #19
 800682a:	6022      	str	r2, [r4, #0]
 800682c:	d504      	bpl.n	8006838 <__sflush_r+0x78>
 800682e:	1c42      	adds	r2, r0, #1
 8006830:	d101      	bne.n	8006836 <__sflush_r+0x76>
 8006832:	682b      	ldr	r3, [r5, #0]
 8006834:	b903      	cbnz	r3, 8006838 <__sflush_r+0x78>
 8006836:	6560      	str	r0, [r4, #84]	; 0x54
 8006838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800683a:	602f      	str	r7, [r5, #0]
 800683c:	2900      	cmp	r1, #0
 800683e:	d0cb      	beq.n	80067d8 <__sflush_r+0x18>
 8006840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006844:	4299      	cmp	r1, r3
 8006846:	d002      	beq.n	800684e <__sflush_r+0x8e>
 8006848:	4628      	mov	r0, r5
 800684a:	f7ff fc51 	bl	80060f0 <_free_r>
 800684e:	2000      	movs	r0, #0
 8006850:	6360      	str	r0, [r4, #52]	; 0x34
 8006852:	e7c2      	b.n	80067da <__sflush_r+0x1a>
 8006854:	6a21      	ldr	r1, [r4, #32]
 8006856:	2301      	movs	r3, #1
 8006858:	4628      	mov	r0, r5
 800685a:	47b0      	blx	r6
 800685c:	1c41      	adds	r1, r0, #1
 800685e:	d1c7      	bne.n	80067f0 <__sflush_r+0x30>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0c4      	beq.n	80067f0 <__sflush_r+0x30>
 8006866:	2b1d      	cmp	r3, #29
 8006868:	d001      	beq.n	800686e <__sflush_r+0xae>
 800686a:	2b16      	cmp	r3, #22
 800686c:	d101      	bne.n	8006872 <__sflush_r+0xb2>
 800686e:	602f      	str	r7, [r5, #0]
 8006870:	e7b2      	b.n	80067d8 <__sflush_r+0x18>
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006878:	81a3      	strh	r3, [r4, #12]
 800687a:	e7ae      	b.n	80067da <__sflush_r+0x1a>
 800687c:	690f      	ldr	r7, [r1, #16]
 800687e:	2f00      	cmp	r7, #0
 8006880:	d0aa      	beq.n	80067d8 <__sflush_r+0x18>
 8006882:	0793      	lsls	r3, r2, #30
 8006884:	bf18      	it	ne
 8006886:	2300      	movne	r3, #0
 8006888:	680e      	ldr	r6, [r1, #0]
 800688a:	bf08      	it	eq
 800688c:	694b      	ldreq	r3, [r1, #20]
 800688e:	1bf6      	subs	r6, r6, r7
 8006890:	600f      	str	r7, [r1, #0]
 8006892:	608b      	str	r3, [r1, #8]
 8006894:	2e00      	cmp	r6, #0
 8006896:	dd9f      	ble.n	80067d8 <__sflush_r+0x18>
 8006898:	4633      	mov	r3, r6
 800689a:	463a      	mov	r2, r7
 800689c:	4628      	mov	r0, r5
 800689e:	6a21      	ldr	r1, [r4, #32]
 80068a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80068a4:	47e0      	blx	ip
 80068a6:	2800      	cmp	r0, #0
 80068a8:	dc06      	bgt.n	80068b8 <__sflush_r+0xf8>
 80068aa:	89a3      	ldrh	r3, [r4, #12]
 80068ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068b4:	81a3      	strh	r3, [r4, #12]
 80068b6:	e790      	b.n	80067da <__sflush_r+0x1a>
 80068b8:	4407      	add	r7, r0
 80068ba:	1a36      	subs	r6, r6, r0
 80068bc:	e7ea      	b.n	8006894 <__sflush_r+0xd4>
 80068be:	bf00      	nop
 80068c0:	20400001 	.word	0x20400001

080068c4 <_fflush_r>:
 80068c4:	b538      	push	{r3, r4, r5, lr}
 80068c6:	690b      	ldr	r3, [r1, #16]
 80068c8:	4605      	mov	r5, r0
 80068ca:	460c      	mov	r4, r1
 80068cc:	b913      	cbnz	r3, 80068d4 <_fflush_r+0x10>
 80068ce:	2500      	movs	r5, #0
 80068d0:	4628      	mov	r0, r5
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	b118      	cbz	r0, 80068de <_fflush_r+0x1a>
 80068d6:	6983      	ldr	r3, [r0, #24]
 80068d8:	b90b      	cbnz	r3, 80068de <_fflush_r+0x1a>
 80068da:	f000 f887 	bl	80069ec <__sinit>
 80068de:	4b14      	ldr	r3, [pc, #80]	; (8006930 <_fflush_r+0x6c>)
 80068e0:	429c      	cmp	r4, r3
 80068e2:	d11b      	bne.n	800691c <_fflush_r+0x58>
 80068e4:	686c      	ldr	r4, [r5, #4]
 80068e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0ef      	beq.n	80068ce <_fflush_r+0xa>
 80068ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068f0:	07d0      	lsls	r0, r2, #31
 80068f2:	d404      	bmi.n	80068fe <_fflush_r+0x3a>
 80068f4:	0599      	lsls	r1, r3, #22
 80068f6:	d402      	bmi.n	80068fe <_fflush_r+0x3a>
 80068f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068fa:	f000 f915 	bl	8006b28 <__retarget_lock_acquire_recursive>
 80068fe:	4628      	mov	r0, r5
 8006900:	4621      	mov	r1, r4
 8006902:	f7ff ff5d 	bl	80067c0 <__sflush_r>
 8006906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006908:	4605      	mov	r5, r0
 800690a:	07da      	lsls	r2, r3, #31
 800690c:	d4e0      	bmi.n	80068d0 <_fflush_r+0xc>
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	059b      	lsls	r3, r3, #22
 8006912:	d4dd      	bmi.n	80068d0 <_fflush_r+0xc>
 8006914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006916:	f000 f908 	bl	8006b2a <__retarget_lock_release_recursive>
 800691a:	e7d9      	b.n	80068d0 <_fflush_r+0xc>
 800691c:	4b05      	ldr	r3, [pc, #20]	; (8006934 <_fflush_r+0x70>)
 800691e:	429c      	cmp	r4, r3
 8006920:	d101      	bne.n	8006926 <_fflush_r+0x62>
 8006922:	68ac      	ldr	r4, [r5, #8]
 8006924:	e7df      	b.n	80068e6 <_fflush_r+0x22>
 8006926:	4b04      	ldr	r3, [pc, #16]	; (8006938 <_fflush_r+0x74>)
 8006928:	429c      	cmp	r4, r3
 800692a:	bf08      	it	eq
 800692c:	68ec      	ldreq	r4, [r5, #12]
 800692e:	e7da      	b.n	80068e6 <_fflush_r+0x22>
 8006930:	080071ec 	.word	0x080071ec
 8006934:	0800720c 	.word	0x0800720c
 8006938:	080071cc 	.word	0x080071cc

0800693c <std>:
 800693c:	2300      	movs	r3, #0
 800693e:	b510      	push	{r4, lr}
 8006940:	4604      	mov	r4, r0
 8006942:	e9c0 3300 	strd	r3, r3, [r0]
 8006946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800694a:	6083      	str	r3, [r0, #8]
 800694c:	8181      	strh	r1, [r0, #12]
 800694e:	6643      	str	r3, [r0, #100]	; 0x64
 8006950:	81c2      	strh	r2, [r0, #14]
 8006952:	6183      	str	r3, [r0, #24]
 8006954:	4619      	mov	r1, r3
 8006956:	2208      	movs	r2, #8
 8006958:	305c      	adds	r0, #92	; 0x5c
 800695a:	f7fd fd27 	bl	80043ac <memset>
 800695e:	4b05      	ldr	r3, [pc, #20]	; (8006974 <std+0x38>)
 8006960:	6224      	str	r4, [r4, #32]
 8006962:	6263      	str	r3, [r4, #36]	; 0x24
 8006964:	4b04      	ldr	r3, [pc, #16]	; (8006978 <std+0x3c>)
 8006966:	62a3      	str	r3, [r4, #40]	; 0x28
 8006968:	4b04      	ldr	r3, [pc, #16]	; (800697c <std+0x40>)
 800696a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800696c:	4b04      	ldr	r3, [pc, #16]	; (8006980 <std+0x44>)
 800696e:	6323      	str	r3, [r4, #48]	; 0x30
 8006970:	bd10      	pop	{r4, pc}
 8006972:	bf00      	nop
 8006974:	08006c81 	.word	0x08006c81
 8006978:	08006ca3 	.word	0x08006ca3
 800697c:	08006cdb 	.word	0x08006cdb
 8006980:	08006cff 	.word	0x08006cff

08006984 <_cleanup_r>:
 8006984:	4901      	ldr	r1, [pc, #4]	; (800698c <_cleanup_r+0x8>)
 8006986:	f000 b8af 	b.w	8006ae8 <_fwalk_reent>
 800698a:	bf00      	nop
 800698c:	080068c5 	.word	0x080068c5

08006990 <__sfmoreglue>:
 8006990:	2268      	movs	r2, #104	; 0x68
 8006992:	b570      	push	{r4, r5, r6, lr}
 8006994:	1e4d      	subs	r5, r1, #1
 8006996:	4355      	muls	r5, r2
 8006998:	460e      	mov	r6, r1
 800699a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800699e:	f7ff fc0f 	bl	80061c0 <_malloc_r>
 80069a2:	4604      	mov	r4, r0
 80069a4:	b140      	cbz	r0, 80069b8 <__sfmoreglue+0x28>
 80069a6:	2100      	movs	r1, #0
 80069a8:	e9c0 1600 	strd	r1, r6, [r0]
 80069ac:	300c      	adds	r0, #12
 80069ae:	60a0      	str	r0, [r4, #8]
 80069b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069b4:	f7fd fcfa 	bl	80043ac <memset>
 80069b8:	4620      	mov	r0, r4
 80069ba:	bd70      	pop	{r4, r5, r6, pc}

080069bc <__sfp_lock_acquire>:
 80069bc:	4801      	ldr	r0, [pc, #4]	; (80069c4 <__sfp_lock_acquire+0x8>)
 80069be:	f000 b8b3 	b.w	8006b28 <__retarget_lock_acquire_recursive>
 80069c2:	bf00      	nop
 80069c4:	2000064d 	.word	0x2000064d

080069c8 <__sfp_lock_release>:
 80069c8:	4801      	ldr	r0, [pc, #4]	; (80069d0 <__sfp_lock_release+0x8>)
 80069ca:	f000 b8ae 	b.w	8006b2a <__retarget_lock_release_recursive>
 80069ce:	bf00      	nop
 80069d0:	2000064d 	.word	0x2000064d

080069d4 <__sinit_lock_acquire>:
 80069d4:	4801      	ldr	r0, [pc, #4]	; (80069dc <__sinit_lock_acquire+0x8>)
 80069d6:	f000 b8a7 	b.w	8006b28 <__retarget_lock_acquire_recursive>
 80069da:	bf00      	nop
 80069dc:	2000064e 	.word	0x2000064e

080069e0 <__sinit_lock_release>:
 80069e0:	4801      	ldr	r0, [pc, #4]	; (80069e8 <__sinit_lock_release+0x8>)
 80069e2:	f000 b8a2 	b.w	8006b2a <__retarget_lock_release_recursive>
 80069e6:	bf00      	nop
 80069e8:	2000064e 	.word	0x2000064e

080069ec <__sinit>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	4604      	mov	r4, r0
 80069f0:	f7ff fff0 	bl	80069d4 <__sinit_lock_acquire>
 80069f4:	69a3      	ldr	r3, [r4, #24]
 80069f6:	b11b      	cbz	r3, 8006a00 <__sinit+0x14>
 80069f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069fc:	f7ff bff0 	b.w	80069e0 <__sinit_lock_release>
 8006a00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a04:	6523      	str	r3, [r4, #80]	; 0x50
 8006a06:	4b13      	ldr	r3, [pc, #76]	; (8006a54 <__sinit+0x68>)
 8006a08:	4a13      	ldr	r2, [pc, #76]	; (8006a58 <__sinit+0x6c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a0e:	42a3      	cmp	r3, r4
 8006a10:	bf08      	it	eq
 8006a12:	2301      	moveq	r3, #1
 8006a14:	4620      	mov	r0, r4
 8006a16:	bf08      	it	eq
 8006a18:	61a3      	streq	r3, [r4, #24]
 8006a1a:	f000 f81f 	bl	8006a5c <__sfp>
 8006a1e:	6060      	str	r0, [r4, #4]
 8006a20:	4620      	mov	r0, r4
 8006a22:	f000 f81b 	bl	8006a5c <__sfp>
 8006a26:	60a0      	str	r0, [r4, #8]
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 f817 	bl	8006a5c <__sfp>
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2104      	movs	r1, #4
 8006a32:	60e0      	str	r0, [r4, #12]
 8006a34:	6860      	ldr	r0, [r4, #4]
 8006a36:	f7ff ff81 	bl	800693c <std>
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	2109      	movs	r1, #9
 8006a3e:	68a0      	ldr	r0, [r4, #8]
 8006a40:	f7ff ff7c 	bl	800693c <std>
 8006a44:	2202      	movs	r2, #2
 8006a46:	2112      	movs	r1, #18
 8006a48:	68e0      	ldr	r0, [r4, #12]
 8006a4a:	f7ff ff77 	bl	800693c <std>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	61a3      	str	r3, [r4, #24]
 8006a52:	e7d1      	b.n	80069f8 <__sinit+0xc>
 8006a54:	08006e50 	.word	0x08006e50
 8006a58:	08006985 	.word	0x08006985

08006a5c <__sfp>:
 8006a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5e:	4607      	mov	r7, r0
 8006a60:	f7ff ffac 	bl	80069bc <__sfp_lock_acquire>
 8006a64:	4b1e      	ldr	r3, [pc, #120]	; (8006ae0 <__sfp+0x84>)
 8006a66:	681e      	ldr	r6, [r3, #0]
 8006a68:	69b3      	ldr	r3, [r6, #24]
 8006a6a:	b913      	cbnz	r3, 8006a72 <__sfp+0x16>
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f7ff ffbd 	bl	80069ec <__sinit>
 8006a72:	3648      	adds	r6, #72	; 0x48
 8006a74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	d503      	bpl.n	8006a84 <__sfp+0x28>
 8006a7c:	6833      	ldr	r3, [r6, #0]
 8006a7e:	b30b      	cbz	r3, 8006ac4 <__sfp+0x68>
 8006a80:	6836      	ldr	r6, [r6, #0]
 8006a82:	e7f7      	b.n	8006a74 <__sfp+0x18>
 8006a84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a88:	b9d5      	cbnz	r5, 8006ac0 <__sfp+0x64>
 8006a8a:	4b16      	ldr	r3, [pc, #88]	; (8006ae4 <__sfp+0x88>)
 8006a8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a90:	60e3      	str	r3, [r4, #12]
 8006a92:	6665      	str	r5, [r4, #100]	; 0x64
 8006a94:	f000 f847 	bl	8006b26 <__retarget_lock_init_recursive>
 8006a98:	f7ff ff96 	bl	80069c8 <__sfp_lock_release>
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006aa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006aa8:	6025      	str	r5, [r4, #0]
 8006aaa:	61a5      	str	r5, [r4, #24]
 8006aac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ab0:	f7fd fc7c 	bl	80043ac <memset>
 8006ab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006abc:	4620      	mov	r0, r4
 8006abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ac0:	3468      	adds	r4, #104	; 0x68
 8006ac2:	e7d9      	b.n	8006a78 <__sfp+0x1c>
 8006ac4:	2104      	movs	r1, #4
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	f7ff ff62 	bl	8006990 <__sfmoreglue>
 8006acc:	4604      	mov	r4, r0
 8006ace:	6030      	str	r0, [r6, #0]
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d1d5      	bne.n	8006a80 <__sfp+0x24>
 8006ad4:	f7ff ff78 	bl	80069c8 <__sfp_lock_release>
 8006ad8:	230c      	movs	r3, #12
 8006ada:	603b      	str	r3, [r7, #0]
 8006adc:	e7ee      	b.n	8006abc <__sfp+0x60>
 8006ade:	bf00      	nop
 8006ae0:	08006e50 	.word	0x08006e50
 8006ae4:	ffff0001 	.word	0xffff0001

08006ae8 <_fwalk_reent>:
 8006ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aec:	4606      	mov	r6, r0
 8006aee:	4688      	mov	r8, r1
 8006af0:	2700      	movs	r7, #0
 8006af2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006af6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006afa:	f1b9 0901 	subs.w	r9, r9, #1
 8006afe:	d505      	bpl.n	8006b0c <_fwalk_reent+0x24>
 8006b00:	6824      	ldr	r4, [r4, #0]
 8006b02:	2c00      	cmp	r4, #0
 8006b04:	d1f7      	bne.n	8006af6 <_fwalk_reent+0xe>
 8006b06:	4638      	mov	r0, r7
 8006b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b0c:	89ab      	ldrh	r3, [r5, #12]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d907      	bls.n	8006b22 <_fwalk_reent+0x3a>
 8006b12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b16:	3301      	adds	r3, #1
 8006b18:	d003      	beq.n	8006b22 <_fwalk_reent+0x3a>
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	47c0      	blx	r8
 8006b20:	4307      	orrs	r7, r0
 8006b22:	3568      	adds	r5, #104	; 0x68
 8006b24:	e7e9      	b.n	8006afa <_fwalk_reent+0x12>

08006b26 <__retarget_lock_init_recursive>:
 8006b26:	4770      	bx	lr

08006b28 <__retarget_lock_acquire_recursive>:
 8006b28:	4770      	bx	lr

08006b2a <__retarget_lock_release_recursive>:
 8006b2a:	4770      	bx	lr

08006b2c <__swhatbuf_r>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	460e      	mov	r6, r1
 8006b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b34:	4614      	mov	r4, r2
 8006b36:	2900      	cmp	r1, #0
 8006b38:	461d      	mov	r5, r3
 8006b3a:	b096      	sub	sp, #88	; 0x58
 8006b3c:	da08      	bge.n	8006b50 <__swhatbuf_r+0x24>
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b44:	602a      	str	r2, [r5, #0]
 8006b46:	061a      	lsls	r2, r3, #24
 8006b48:	d410      	bmi.n	8006b6c <__swhatbuf_r+0x40>
 8006b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b4e:	e00e      	b.n	8006b6e <__swhatbuf_r+0x42>
 8006b50:	466a      	mov	r2, sp
 8006b52:	f000 f8fb 	bl	8006d4c <_fstat_r>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	dbf1      	blt.n	8006b3e <__swhatbuf_r+0x12>
 8006b5a:	9a01      	ldr	r2, [sp, #4]
 8006b5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b64:	425a      	negs	r2, r3
 8006b66:	415a      	adcs	r2, r3
 8006b68:	602a      	str	r2, [r5, #0]
 8006b6a:	e7ee      	b.n	8006b4a <__swhatbuf_r+0x1e>
 8006b6c:	2340      	movs	r3, #64	; 0x40
 8006b6e:	2000      	movs	r0, #0
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	b016      	add	sp, #88	; 0x58
 8006b74:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b78 <__smakebuf_r>:
 8006b78:	898b      	ldrh	r3, [r1, #12]
 8006b7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b7c:	079d      	lsls	r5, r3, #30
 8006b7e:	4606      	mov	r6, r0
 8006b80:	460c      	mov	r4, r1
 8006b82:	d507      	bpl.n	8006b94 <__smakebuf_r+0x1c>
 8006b84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b88:	6023      	str	r3, [r4, #0]
 8006b8a:	6123      	str	r3, [r4, #16]
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	6163      	str	r3, [r4, #20]
 8006b90:	b002      	add	sp, #8
 8006b92:	bd70      	pop	{r4, r5, r6, pc}
 8006b94:	466a      	mov	r2, sp
 8006b96:	ab01      	add	r3, sp, #4
 8006b98:	f7ff ffc8 	bl	8006b2c <__swhatbuf_r>
 8006b9c:	9900      	ldr	r1, [sp, #0]
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f7ff fb0d 	bl	80061c0 <_malloc_r>
 8006ba6:	b948      	cbnz	r0, 8006bbc <__smakebuf_r+0x44>
 8006ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bac:	059a      	lsls	r2, r3, #22
 8006bae:	d4ef      	bmi.n	8006b90 <__smakebuf_r+0x18>
 8006bb0:	f023 0303 	bic.w	r3, r3, #3
 8006bb4:	f043 0302 	orr.w	r3, r3, #2
 8006bb8:	81a3      	strh	r3, [r4, #12]
 8006bba:	e7e3      	b.n	8006b84 <__smakebuf_r+0xc>
 8006bbc:	4b0d      	ldr	r3, [pc, #52]	; (8006bf4 <__smakebuf_r+0x7c>)
 8006bbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	6020      	str	r0, [r4, #0]
 8006bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc8:	81a3      	strh	r3, [r4, #12]
 8006bca:	9b00      	ldr	r3, [sp, #0]
 8006bcc:	6120      	str	r0, [r4, #16]
 8006bce:	6163      	str	r3, [r4, #20]
 8006bd0:	9b01      	ldr	r3, [sp, #4]
 8006bd2:	b15b      	cbz	r3, 8006bec <__smakebuf_r+0x74>
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bda:	f000 f8c9 	bl	8006d70 <_isatty_r>
 8006bde:	b128      	cbz	r0, 8006bec <__smakebuf_r+0x74>
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	f023 0303 	bic.w	r3, r3, #3
 8006be6:	f043 0301 	orr.w	r3, r3, #1
 8006bea:	81a3      	strh	r3, [r4, #12]
 8006bec:	89a0      	ldrh	r0, [r4, #12]
 8006bee:	4305      	orrs	r5, r0
 8006bf0:	81a5      	strh	r5, [r4, #12]
 8006bf2:	e7cd      	b.n	8006b90 <__smakebuf_r+0x18>
 8006bf4:	08006985 	.word	0x08006985

08006bf8 <_raise_r>:
 8006bf8:	291f      	cmp	r1, #31
 8006bfa:	b538      	push	{r3, r4, r5, lr}
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	460d      	mov	r5, r1
 8006c00:	d904      	bls.n	8006c0c <_raise_r+0x14>
 8006c02:	2316      	movs	r3, #22
 8006c04:	6003      	str	r3, [r0, #0]
 8006c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c0e:	b112      	cbz	r2, 8006c16 <_raise_r+0x1e>
 8006c10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c14:	b94b      	cbnz	r3, 8006c2a <_raise_r+0x32>
 8006c16:	4620      	mov	r0, r4
 8006c18:	f000 f830 	bl	8006c7c <_getpid_r>
 8006c1c:	462a      	mov	r2, r5
 8006c1e:	4601      	mov	r1, r0
 8006c20:	4620      	mov	r0, r4
 8006c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c26:	f000 b817 	b.w	8006c58 <_kill_r>
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d00a      	beq.n	8006c44 <_raise_r+0x4c>
 8006c2e:	1c59      	adds	r1, r3, #1
 8006c30:	d103      	bne.n	8006c3a <_raise_r+0x42>
 8006c32:	2316      	movs	r3, #22
 8006c34:	6003      	str	r3, [r0, #0]
 8006c36:	2001      	movs	r0, #1
 8006c38:	e7e7      	b.n	8006c0a <_raise_r+0x12>
 8006c3a:	2400      	movs	r4, #0
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c42:	4798      	blx	r3
 8006c44:	2000      	movs	r0, #0
 8006c46:	e7e0      	b.n	8006c0a <_raise_r+0x12>

08006c48 <raise>:
 8006c48:	4b02      	ldr	r3, [pc, #8]	; (8006c54 <raise+0xc>)
 8006c4a:	4601      	mov	r1, r0
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	f7ff bfd3 	b.w	8006bf8 <_raise_r>
 8006c52:	bf00      	nop
 8006c54:	2000000c 	.word	0x2000000c

08006c58 <_kill_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	4d06      	ldr	r5, [pc, #24]	; (8006c78 <_kill_r+0x20>)
 8006c5e:	4604      	mov	r4, r0
 8006c60:	4608      	mov	r0, r1
 8006c62:	4611      	mov	r1, r2
 8006c64:	602b      	str	r3, [r5, #0]
 8006c66:	f7fa fa76 	bl	8001156 <_kill>
 8006c6a:	1c43      	adds	r3, r0, #1
 8006c6c:	d102      	bne.n	8006c74 <_kill_r+0x1c>
 8006c6e:	682b      	ldr	r3, [r5, #0]
 8006c70:	b103      	cbz	r3, 8006c74 <_kill_r+0x1c>
 8006c72:	6023      	str	r3, [r4, #0]
 8006c74:	bd38      	pop	{r3, r4, r5, pc}
 8006c76:	bf00      	nop
 8006c78:	20000648 	.word	0x20000648

08006c7c <_getpid_r>:
 8006c7c:	f7fa ba64 	b.w	8001148 <_getpid>

08006c80 <__sread>:
 8006c80:	b510      	push	{r4, lr}
 8006c82:	460c      	mov	r4, r1
 8006c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c88:	f000 f894 	bl	8006db4 <_read_r>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	bfab      	itete	ge
 8006c90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c92:	89a3      	ldrhlt	r3, [r4, #12]
 8006c94:	181b      	addge	r3, r3, r0
 8006c96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c9a:	bfac      	ite	ge
 8006c9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c9e:	81a3      	strhlt	r3, [r4, #12]
 8006ca0:	bd10      	pop	{r4, pc}

08006ca2 <__swrite>:
 8006ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca6:	461f      	mov	r7, r3
 8006ca8:	898b      	ldrh	r3, [r1, #12]
 8006caa:	4605      	mov	r5, r0
 8006cac:	05db      	lsls	r3, r3, #23
 8006cae:	460c      	mov	r4, r1
 8006cb0:	4616      	mov	r6, r2
 8006cb2:	d505      	bpl.n	8006cc0 <__swrite+0x1e>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cbc:	f000 f868 	bl	8006d90 <_lseek_r>
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	4632      	mov	r2, r6
 8006cc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cc8:	81a3      	strh	r3, [r4, #12]
 8006cca:	4628      	mov	r0, r5
 8006ccc:	463b      	mov	r3, r7
 8006cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd6:	f000 b817 	b.w	8006d08 <_write_r>

08006cda <__sseek>:
 8006cda:	b510      	push	{r4, lr}
 8006cdc:	460c      	mov	r4, r1
 8006cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce2:	f000 f855 	bl	8006d90 <_lseek_r>
 8006ce6:	1c43      	adds	r3, r0, #1
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	bf15      	itete	ne
 8006cec:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006cf6:	81a3      	strheq	r3, [r4, #12]
 8006cf8:	bf18      	it	ne
 8006cfa:	81a3      	strhne	r3, [r4, #12]
 8006cfc:	bd10      	pop	{r4, pc}

08006cfe <__sclose>:
 8006cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d02:	f000 b813 	b.w	8006d2c <_close_r>
	...

08006d08 <_write_r>:
 8006d08:	b538      	push	{r3, r4, r5, lr}
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	4608      	mov	r0, r1
 8006d0e:	4611      	mov	r1, r2
 8006d10:	2200      	movs	r2, #0
 8006d12:	4d05      	ldr	r5, [pc, #20]	; (8006d28 <_write_r+0x20>)
 8006d14:	602a      	str	r2, [r5, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	f7fa fa54 	bl	80011c4 <_write>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	d102      	bne.n	8006d26 <_write_r+0x1e>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	b103      	cbz	r3, 8006d26 <_write_r+0x1e>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	20000648 	.word	0x20000648

08006d2c <_close_r>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	2300      	movs	r3, #0
 8006d30:	4d05      	ldr	r5, [pc, #20]	; (8006d48 <_close_r+0x1c>)
 8006d32:	4604      	mov	r4, r0
 8006d34:	4608      	mov	r0, r1
 8006d36:	602b      	str	r3, [r5, #0]
 8006d38:	f7fa fa60 	bl	80011fc <_close>
 8006d3c:	1c43      	adds	r3, r0, #1
 8006d3e:	d102      	bne.n	8006d46 <_close_r+0x1a>
 8006d40:	682b      	ldr	r3, [r5, #0]
 8006d42:	b103      	cbz	r3, 8006d46 <_close_r+0x1a>
 8006d44:	6023      	str	r3, [r4, #0]
 8006d46:	bd38      	pop	{r3, r4, r5, pc}
 8006d48:	20000648 	.word	0x20000648

08006d4c <_fstat_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	2300      	movs	r3, #0
 8006d50:	4d06      	ldr	r5, [pc, #24]	; (8006d6c <_fstat_r+0x20>)
 8006d52:	4604      	mov	r4, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	4611      	mov	r1, r2
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	f7fa fa5a 	bl	8001212 <_fstat>
 8006d5e:	1c43      	adds	r3, r0, #1
 8006d60:	d102      	bne.n	8006d68 <_fstat_r+0x1c>
 8006d62:	682b      	ldr	r3, [r5, #0]
 8006d64:	b103      	cbz	r3, 8006d68 <_fstat_r+0x1c>
 8006d66:	6023      	str	r3, [r4, #0]
 8006d68:	bd38      	pop	{r3, r4, r5, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000648 	.word	0x20000648

08006d70 <_isatty_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	2300      	movs	r3, #0
 8006d74:	4d05      	ldr	r5, [pc, #20]	; (8006d8c <_isatty_r+0x1c>)
 8006d76:	4604      	mov	r4, r0
 8006d78:	4608      	mov	r0, r1
 8006d7a:	602b      	str	r3, [r5, #0]
 8006d7c:	f7fa fa58 	bl	8001230 <_isatty>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_isatty_r+0x1a>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_isatty_r+0x1a>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	20000648 	.word	0x20000648

08006d90 <_lseek_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	4611      	mov	r1, r2
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4d05      	ldr	r5, [pc, #20]	; (8006db0 <_lseek_r+0x20>)
 8006d9c:	602a      	str	r2, [r5, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f7fa fa50 	bl	8001244 <_lseek>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_lseek_r+0x1e>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_lseek_r+0x1e>
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	20000648 	.word	0x20000648

08006db4 <_read_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4604      	mov	r4, r0
 8006db8:	4608      	mov	r0, r1
 8006dba:	4611      	mov	r1, r2
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	4d05      	ldr	r5, [pc, #20]	; (8006dd4 <_read_r+0x20>)
 8006dc0:	602a      	str	r2, [r5, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f7fa f9e1 	bl	800118a <_read>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_read_r+0x1e>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_read_r+0x1e>
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	20000648 	.word	0x20000648

08006dd8 <_init>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr

08006de4 <_fini>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	bf00      	nop
 8006de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dea:	bc08      	pop	{r3}
 8006dec:	469e      	mov	lr, r3
 8006dee:	4770      	bx	lr
